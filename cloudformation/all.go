// Code generated by "go generate". Please don't change this file directly.

package cloudformation

import (
	"fmt"
	"github.com/drmmarsunited/goformation/v7/cloudformation/accessanalyzer"
	"github.com/drmmarsunited/goformation/v7/cloudformation/acmpca"
	"github.com/drmmarsunited/goformation/v7/cloudformation/amazonmq"
	"github.com/drmmarsunited/goformation/v7/cloudformation/amplify"
	"github.com/drmmarsunited/goformation/v7/cloudformation/amplifyuibuilder"
	"github.com/drmmarsunited/goformation/v7/cloudformation/apigateway"
	"github.com/drmmarsunited/goformation/v7/cloudformation/apigatewayv2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/appconfig"
	"github.com/drmmarsunited/goformation/v7/cloudformation/appflow"
	"github.com/drmmarsunited/goformation/v7/cloudformation/appintegrations"
	"github.com/drmmarsunited/goformation/v7/cloudformation/applicationautoscaling"
	"github.com/drmmarsunited/goformation/v7/cloudformation/applicationinsights"
	"github.com/drmmarsunited/goformation/v7/cloudformation/appmesh"
	"github.com/drmmarsunited/goformation/v7/cloudformation/apprunner"
	"github.com/drmmarsunited/goformation/v7/cloudformation/appstream"
	"github.com/drmmarsunited/goformation/v7/cloudformation/appsync"
	"github.com/drmmarsunited/goformation/v7/cloudformation/aps"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ask"
	"github.com/drmmarsunited/goformation/v7/cloudformation/athena"
	"github.com/drmmarsunited/goformation/v7/cloudformation/auditmanager"
	"github.com/drmmarsunited/goformation/v7/cloudformation/autoscaling"
	"github.com/drmmarsunited/goformation/v7/cloudformation/autoscalingplans"
	"github.com/drmmarsunited/goformation/v7/cloudformation/backup"
	"github.com/drmmarsunited/goformation/v7/cloudformation/backupgateway"
	"github.com/drmmarsunited/goformation/v7/cloudformation/batch"
	"github.com/drmmarsunited/goformation/v7/cloudformation/billingconductor"
	"github.com/drmmarsunited/goformation/v7/cloudformation/budgets"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cassandra"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cdk"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ce"
	"github.com/drmmarsunited/goformation/v7/cloudformation/certificatemanager"
	"github.com/drmmarsunited/goformation/v7/cloudformation/chatbot"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cloud9"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cloudformation"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cloudfront"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cloudtrail"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cloudwatch"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codeartifact"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codebuild"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codecommit"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codedeploy"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codeguruprofiler"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codegurureviewer"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codepipeline"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codestar"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codestarconnections"
	"github.com/drmmarsunited/goformation/v7/cloudformation/codestarnotifications"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cognito"
	"github.com/drmmarsunited/goformation/v7/cloudformation/comprehend"
	"github.com/drmmarsunited/goformation/v7/cloudformation/config"
	"github.com/drmmarsunited/goformation/v7/cloudformation/connect"
	"github.com/drmmarsunited/goformation/v7/cloudformation/connectcampaigns"
	"github.com/drmmarsunited/goformation/v7/cloudformation/controltower"
	"github.com/drmmarsunited/goformation/v7/cloudformation/cur"
	"github.com/drmmarsunited/goformation/v7/cloudformation/customerprofiles"
	"github.com/drmmarsunited/goformation/v7/cloudformation/databrew"
	"github.com/drmmarsunited/goformation/v7/cloudformation/datapipeline"
	"github.com/drmmarsunited/goformation/v7/cloudformation/datasync"
	"github.com/drmmarsunited/goformation/v7/cloudformation/dax"
	"github.com/drmmarsunited/goformation/v7/cloudformation/detective"
	"github.com/drmmarsunited/goformation/v7/cloudformation/devopsguru"
	"github.com/drmmarsunited/goformation/v7/cloudformation/directoryservice"
	"github.com/drmmarsunited/goformation/v7/cloudformation/dlm"
	"github.com/drmmarsunited/goformation/v7/cloudformation/dms"
	"github.com/drmmarsunited/goformation/v7/cloudformation/docdb"
	"github.com/drmmarsunited/goformation/v7/cloudformation/docdbelastic"
	"github.com/drmmarsunited/goformation/v7/cloudformation/dynamodb"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ec2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ecr"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ecs"
	"github.com/drmmarsunited/goformation/v7/cloudformation/efs"
	"github.com/drmmarsunited/goformation/v7/cloudformation/eks"
	"github.com/drmmarsunited/goformation/v7/cloudformation/elasticache"
	"github.com/drmmarsunited/goformation/v7/cloudformation/elasticbeanstalk"
	"github.com/drmmarsunited/goformation/v7/cloudformation/elasticloadbalancing"
	"github.com/drmmarsunited/goformation/v7/cloudformation/elasticloadbalancingv2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/elasticsearch"
	"github.com/drmmarsunited/goformation/v7/cloudformation/emr"
	"github.com/drmmarsunited/goformation/v7/cloudformation/emrcontainers"
	"github.com/drmmarsunited/goformation/v7/cloudformation/emrserverless"
	"github.com/drmmarsunited/goformation/v7/cloudformation/events"
	"github.com/drmmarsunited/goformation/v7/cloudformation/eventschemas"
	"github.com/drmmarsunited/goformation/v7/cloudformation/evidently"
	"github.com/drmmarsunited/goformation/v7/cloudformation/finspace"
	"github.com/drmmarsunited/goformation/v7/cloudformation/fis"
	"github.com/drmmarsunited/goformation/v7/cloudformation/fms"
	"github.com/drmmarsunited/goformation/v7/cloudformation/forecast"
	"github.com/drmmarsunited/goformation/v7/cloudformation/frauddetector"
	"github.com/drmmarsunited/goformation/v7/cloudformation/fsx"
	"github.com/drmmarsunited/goformation/v7/cloudformation/gamelift"
	"github.com/drmmarsunited/goformation/v7/cloudformation/globalaccelerator"
	"github.com/drmmarsunited/goformation/v7/cloudformation/glue"
	"github.com/drmmarsunited/goformation/v7/cloudformation/grafana"
	"github.com/drmmarsunited/goformation/v7/cloudformation/greengrass"
	"github.com/drmmarsunited/goformation/v7/cloudformation/greengrassv2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/groundstation"
	"github.com/drmmarsunited/goformation/v7/cloudformation/guardduty"
	"github.com/drmmarsunited/goformation/v7/cloudformation/healthlake"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iam"
	"github.com/drmmarsunited/goformation/v7/cloudformation/identitystore"
	"github.com/drmmarsunited/goformation/v7/cloudformation/imagebuilder"
	"github.com/drmmarsunited/goformation/v7/cloudformation/inspector"
	"github.com/drmmarsunited/goformation/v7/cloudformation/inspectorv2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/internetmonitor"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iot"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iot1click"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotanalytics"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotcoredeviceadvisor"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotevents"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotfleethub"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotfleetwise"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotsitewise"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotthingsgraph"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iottwinmaker"
	"github.com/drmmarsunited/goformation/v7/cloudformation/iotwireless"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ivs"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ivschat"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kafkaconnect"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kendra"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kendraranking"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kinesis"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kinesisanalytics"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kinesisanalyticsv2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kinesisfirehose"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kinesisvideo"
	"github.com/drmmarsunited/goformation/v7/cloudformation/kms"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lakeformation"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lambda"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lex"
	"github.com/drmmarsunited/goformation/v7/cloudformation/licensemanager"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lightsail"
	"github.com/drmmarsunited/goformation/v7/cloudformation/location"
	"github.com/drmmarsunited/goformation/v7/cloudformation/logs"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lookoutequipment"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lookoutmetrics"
	"github.com/drmmarsunited/goformation/v7/cloudformation/lookoutvision"
	"github.com/drmmarsunited/goformation/v7/cloudformation/m2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/macie"
	"github.com/drmmarsunited/goformation/v7/cloudformation/managedblockchain"
	"github.com/drmmarsunited/goformation/v7/cloudformation/mediaconnect"
	"github.com/drmmarsunited/goformation/v7/cloudformation/mediaconvert"
	"github.com/drmmarsunited/goformation/v7/cloudformation/medialive"
	"github.com/drmmarsunited/goformation/v7/cloudformation/mediapackage"
	"github.com/drmmarsunited/goformation/v7/cloudformation/mediastore"
	"github.com/drmmarsunited/goformation/v7/cloudformation/mediatailor"
	"github.com/drmmarsunited/goformation/v7/cloudformation/memorydb"
	"github.com/drmmarsunited/goformation/v7/cloudformation/msk"
	"github.com/drmmarsunited/goformation/v7/cloudformation/mwaa"
	"github.com/drmmarsunited/goformation/v7/cloudformation/neptune"
	"github.com/drmmarsunited/goformation/v7/cloudformation/networkfirewall"
	"github.com/drmmarsunited/goformation/v7/cloudformation/networkmanager"
	"github.com/drmmarsunited/goformation/v7/cloudformation/nimblestudio"
	"github.com/drmmarsunited/goformation/v7/cloudformation/oam"
	"github.com/drmmarsunited/goformation/v7/cloudformation/omics"
	"github.com/drmmarsunited/goformation/v7/cloudformation/opensearchserverless"
	"github.com/drmmarsunited/goformation/v7/cloudformation/opensearchservice"
	"github.com/drmmarsunited/goformation/v7/cloudformation/opsworks"
	"github.com/drmmarsunited/goformation/v7/cloudformation/opsworkscm"
	"github.com/drmmarsunited/goformation/v7/cloudformation/organizations"
	"github.com/drmmarsunited/goformation/v7/cloudformation/osis"
	"github.com/drmmarsunited/goformation/v7/cloudformation/panorama"
	"github.com/drmmarsunited/goformation/v7/cloudformation/personalize"
	"github.com/drmmarsunited/goformation/v7/cloudformation/pinpoint"
	"github.com/drmmarsunited/goformation/v7/cloudformation/pinpointemail"
	"github.com/drmmarsunited/goformation/v7/cloudformation/pipes"
	"github.com/drmmarsunited/goformation/v7/cloudformation/proton"
	"github.com/drmmarsunited/goformation/v7/cloudformation/qldb"
	"github.com/drmmarsunited/goformation/v7/cloudformation/quicksight"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ram"
	"github.com/drmmarsunited/goformation/v7/cloudformation/rds"
	"github.com/drmmarsunited/goformation/v7/cloudformation/redshift"
	"github.com/drmmarsunited/goformation/v7/cloudformation/redshiftserverless"
	"github.com/drmmarsunited/goformation/v7/cloudformation/refactorspaces"
	"github.com/drmmarsunited/goformation/v7/cloudformation/rekognition"
	"github.com/drmmarsunited/goformation/v7/cloudformation/resiliencehub"
	"github.com/drmmarsunited/goformation/v7/cloudformation/resourceexplorer2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/resourcegroups"
	"github.com/drmmarsunited/goformation/v7/cloudformation/robomaker"
	"github.com/drmmarsunited/goformation/v7/cloudformation/rolesanywhere"
	"github.com/drmmarsunited/goformation/v7/cloudformation/route53"
	"github.com/drmmarsunited/goformation/v7/cloudformation/route53recoverycontrol"
	"github.com/drmmarsunited/goformation/v7/cloudformation/route53recoveryreadiness"
	"github.com/drmmarsunited/goformation/v7/cloudformation/route53resolver"
	"github.com/drmmarsunited/goformation/v7/cloudformation/rum"
	"github.com/drmmarsunited/goformation/v7/cloudformation/s3"
	"github.com/drmmarsunited/goformation/v7/cloudformation/s3objectlambda"
	"github.com/drmmarsunited/goformation/v7/cloudformation/s3outposts"
	"github.com/drmmarsunited/goformation/v7/cloudformation/sagemaker"
	"github.com/drmmarsunited/goformation/v7/cloudformation/scheduler"
	"github.com/drmmarsunited/goformation/v7/cloudformation/sdb"
	"github.com/drmmarsunited/goformation/v7/cloudformation/secretsmanager"
	"github.com/drmmarsunited/goformation/v7/cloudformation/securityhub"
	"github.com/drmmarsunited/goformation/v7/cloudformation/serverless"
	"github.com/drmmarsunited/goformation/v7/cloudformation/servicecatalog"
	"github.com/drmmarsunited/goformation/v7/cloudformation/servicecatalogappregistry"
	"github.com/drmmarsunited/goformation/v7/cloudformation/servicediscovery"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ses"
	"github.com/drmmarsunited/goformation/v7/cloudformation/shield"
	"github.com/drmmarsunited/goformation/v7/cloudformation/signer"
	"github.com/drmmarsunited/goformation/v7/cloudformation/simspaceweaver"
	"github.com/drmmarsunited/goformation/v7/cloudformation/sns"
	"github.com/drmmarsunited/goformation/v7/cloudformation/sqs"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ssm"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ssmcontacts"
	"github.com/drmmarsunited/goformation/v7/cloudformation/ssmincidents"
	"github.com/drmmarsunited/goformation/v7/cloudformation/sso"
	"github.com/drmmarsunited/goformation/v7/cloudformation/stepfunctions"
	"github.com/drmmarsunited/goformation/v7/cloudformation/supportapp"
	"github.com/drmmarsunited/goformation/v7/cloudformation/synthetics"
	"github.com/drmmarsunited/goformation/v7/cloudformation/systemsmanagersap"
	"github.com/drmmarsunited/goformation/v7/cloudformation/timestream"
	"github.com/drmmarsunited/goformation/v7/cloudformation/transfer"
	"github.com/drmmarsunited/goformation/v7/cloudformation/voiceid"
	"github.com/drmmarsunited/goformation/v7/cloudformation/vpclattice"
	"github.com/drmmarsunited/goformation/v7/cloudformation/waf"
	"github.com/drmmarsunited/goformation/v7/cloudformation/wafregional"
	"github.com/drmmarsunited/goformation/v7/cloudformation/wafv2"
	"github.com/drmmarsunited/goformation/v7/cloudformation/wisdom"
	"github.com/drmmarsunited/goformation/v7/cloudformation/workspaces"
	"github.com/drmmarsunited/goformation/v7/cloudformation/xray"

	"github.com/drmmarsunited/goformation/v7/cloudformation/global"
)

// AllResources fetches an iterable map all CloudFormation and SAM resources
func AllResources() map[string]Resource {
	return map[string]Resource{
		"AWS::ACMPCA::Certificate":                                         &acmpca.Certificate[any]{},
		"AWS::ACMPCA::CertificateAuthority":                                &acmpca.CertificateAuthority[any]{},
		"AWS::ACMPCA::CertificateAuthorityActivation":                      &acmpca.CertificateAuthorityActivation[any]{},
		"AWS::ACMPCA::Permission":                                          &acmpca.Permission[any]{},
		"AWS::APS::RuleGroupsNamespace":                                    &aps.RuleGroupsNamespace[any]{},
		"AWS::APS::Workspace":                                              &aps.Workspace[any]{},
		"AWS::AccessAnalyzer::Analyzer":                                    &accessanalyzer.Analyzer[any]{},
		"AWS::AmazonMQ::Broker":                                            &amazonmq.Broker[any]{},
		"AWS::AmazonMQ::Configuration":                                     &amazonmq.Configuration[any]{},
		"AWS::AmazonMQ::ConfigurationAssociation":                          &amazonmq.ConfigurationAssociation[any]{},
		"AWS::Amplify::App":                                                &amplify.App[any]{},
		"AWS::Amplify::Branch":                                             &amplify.Branch[any]{},
		"AWS::Amplify::Domain":                                             &amplify.Domain[any]{},
		"AWS::AmplifyUIBuilder::Component":                                 &amplifyuibuilder.Component[any]{},
		"AWS::AmplifyUIBuilder::Form":                                      &amplifyuibuilder.Form[any]{},
		"AWS::AmplifyUIBuilder::Theme":                                     &amplifyuibuilder.Theme[any]{},
		"AWS::ApiGateway::Account":                                         &apigateway.Account[any]{},
		"AWS::ApiGateway::ApiKey":                                          &apigateway.ApiKey[any]{},
		"AWS::ApiGateway::Authorizer":                                      &apigateway.Authorizer[any]{},
		"AWS::ApiGateway::BasePathMapping":                                 &apigateway.BasePathMapping[any]{},
		"AWS::ApiGateway::ClientCertificate":                               &apigateway.ClientCertificate[any]{},
		"AWS::ApiGateway::Deployment":                                      &apigateway.Deployment[any]{},
		"AWS::ApiGateway::DocumentationPart":                               &apigateway.DocumentationPart[any]{},
		"AWS::ApiGateway::DocumentationVersion":                            &apigateway.DocumentationVersion[any]{},
		"AWS::ApiGateway::DomainName":                                      &apigateway.DomainName[any]{},
		"AWS::ApiGateway::GatewayResponse":                                 &apigateway.GatewayResponse[any]{},
		"AWS::ApiGateway::Method":                                          &apigateway.Method[any]{},
		"AWS::ApiGateway::Model":                                           &apigateway.Model[any]{},
		"AWS::ApiGateway::RequestValidator":                                &apigateway.RequestValidator[any]{},
		"AWS::ApiGateway::Resource":                                        &apigateway.Resource[any]{},
		"AWS::ApiGateway::RestApi":                                         &apigateway.RestApi[any]{},
		"AWS::ApiGateway::Stage":                                           &apigateway.Stage[any]{},
		"AWS::ApiGateway::UsagePlan":                                       &apigateway.UsagePlan[any]{},
		"AWS::ApiGateway::UsagePlanKey":                                    &apigateway.UsagePlanKey[any]{},
		"AWS::ApiGateway::VpcLink":                                         &apigateway.VpcLink[any]{},
		"AWS::ApiGatewayV2::Api":                                           &apigatewayv2.Api[any]{},
		"AWS::ApiGatewayV2::ApiGatewayManagedOverrides":                    &apigatewayv2.ApiGatewayManagedOverrides[any]{},
		"AWS::ApiGatewayV2::ApiMapping":                                    &apigatewayv2.ApiMapping[any]{},
		"AWS::ApiGatewayV2::Authorizer":                                    &apigatewayv2.Authorizer[any]{},
		"AWS::ApiGatewayV2::Deployment":                                    &apigatewayv2.Deployment[any]{},
		"AWS::ApiGatewayV2::DomainName":                                    &apigatewayv2.DomainName[any]{},
		"AWS::ApiGatewayV2::Integration":                                   &apigatewayv2.Integration[any]{},
		"AWS::ApiGatewayV2::IntegrationResponse":                           &apigatewayv2.IntegrationResponse[any]{},
		"AWS::ApiGatewayV2::Model":                                         &apigatewayv2.Model[any]{},
		"AWS::ApiGatewayV2::Route":                                         &apigatewayv2.Route[any]{},
		"AWS::ApiGatewayV2::RouteResponse":                                 &apigatewayv2.RouteResponse[any]{},
		"AWS::ApiGatewayV2::Stage":                                         &apigatewayv2.Stage[any]{},
		"AWS::ApiGatewayV2::VpcLink":                                       &apigatewayv2.VpcLink[any]{},
		"AWS::AppConfig::Application":                                      &appconfig.Application[any]{},
		"AWS::AppConfig::ConfigurationProfile":                             &appconfig.ConfigurationProfile[any]{},
		"AWS::AppConfig::Deployment":                                       &appconfig.Deployment[any]{},
		"AWS::AppConfig::DeploymentStrategy":                               &appconfig.DeploymentStrategy[any]{},
		"AWS::AppConfig::Environment":                                      &appconfig.Environment[any]{},
		"AWS::AppConfig::Extension":                                        &appconfig.Extension[any]{},
		"AWS::AppConfig::ExtensionAssociation":                             &appconfig.ExtensionAssociation[any]{},
		"AWS::AppConfig::HostedConfigurationVersion":                       &appconfig.HostedConfigurationVersion[any]{},
		"AWS::AppFlow::Connector":                                          &appflow.Connector[any]{},
		"AWS::AppFlow::ConnectorProfile":                                   &appflow.ConnectorProfile[any]{},
		"AWS::AppFlow::Flow":                                               &appflow.Flow[any]{},
		"AWS::AppIntegrations::DataIntegration":                            &appintegrations.DataIntegration[any]{},
		"AWS::AppIntegrations::EventIntegration":                           &appintegrations.EventIntegration[any]{},
		"AWS::AppMesh::GatewayRoute":                                       &appmesh.GatewayRoute[any]{},
		"AWS::AppMesh::Mesh":                                               &appmesh.Mesh[any]{},
		"AWS::AppMesh::Route":                                              &appmesh.Route[any]{},
		"AWS::AppMesh::VirtualGateway":                                     &appmesh.VirtualGateway[any]{},
		"AWS::AppMesh::VirtualNode":                                        &appmesh.VirtualNode[any]{},
		"AWS::AppMesh::VirtualRouter":                                      &appmesh.VirtualRouter[any]{},
		"AWS::AppMesh::VirtualService":                                     &appmesh.VirtualService[any]{},
		"AWS::AppRunner::ObservabilityConfiguration":                       &apprunner.ObservabilityConfiguration[any]{},
		"AWS::AppRunner::Service":                                          &apprunner.Service[any]{},
		"AWS::AppRunner::VpcConnector":                                     &apprunner.VpcConnector[any]{},
		"AWS::AppRunner::VpcIngressConnection":                             &apprunner.VpcIngressConnection[any]{},
		"AWS::AppStream::AppBlock":                                         &appstream.AppBlock[any]{},
		"AWS::AppStream::Application":                                      &appstream.Application[any]{},
		"AWS::AppStream::ApplicationEntitlementAssociation":                &appstream.ApplicationEntitlementAssociation[any]{},
		"AWS::AppStream::ApplicationFleetAssociation":                      &appstream.ApplicationFleetAssociation[any]{},
		"AWS::AppStream::DirectoryConfig":                                  &appstream.DirectoryConfig[any]{},
		"AWS::AppStream::Entitlement":                                      &appstream.Entitlement[any]{},
		"AWS::AppStream::Fleet":                                            &appstream.Fleet[any]{},
		"AWS::AppStream::ImageBuilder":                                     &appstream.ImageBuilder[any]{},
		"AWS::AppStream::Stack":                                            &appstream.Stack[any]{},
		"AWS::AppStream::StackFleetAssociation":                            &appstream.StackFleetAssociation[any]{},
		"AWS::AppStream::StackUserAssociation":                             &appstream.StackUserAssociation[any]{},
		"AWS::AppStream::User":                                             &appstream.User[any]{},
		"AWS::AppSync::ApiCache":                                           &appsync.ApiCache[any]{},
		"AWS::AppSync::ApiKey":                                             &appsync.ApiKey[any]{},
		"AWS::AppSync::DataSource":                                         &appsync.DataSource[any]{},
		"AWS::AppSync::DomainName":                                         &appsync.DomainName[any]{},
		"AWS::AppSync::DomainNameApiAssociation":                           &appsync.DomainNameApiAssociation[any]{},
		"AWS::AppSync::FunctionConfiguration":                              &appsync.FunctionConfiguration[any]{},
		"AWS::AppSync::GraphQLApi":                                         &appsync.GraphQLApi[any]{},
		"AWS::AppSync::GraphQLSchema":                                      &appsync.GraphQLSchema[any]{},
		"AWS::AppSync::Resolver":                                           &appsync.Resolver[any]{},
		"AWS::AppSync::SourceApiAssociation":                               &appsync.SourceApiAssociation[any]{},
		"AWS::ApplicationAutoScaling::ScalableTarget":                      &applicationautoscaling.ScalableTarget[any]{},
		"AWS::ApplicationAutoScaling::ScalingPolicy":                       &applicationautoscaling.ScalingPolicy[any]{},
		"AWS::ApplicationInsights::Application":                            &applicationinsights.Application[any]{},
		"AWS::Athena::DataCatalog":                                         &athena.DataCatalog[any]{},
		"AWS::Athena::NamedQuery":                                          &athena.NamedQuery[any]{},
		"AWS::Athena::PreparedStatement":                                   &athena.PreparedStatement[any]{},
		"AWS::Athena::WorkGroup":                                           &athena.WorkGroup[any]{},
		"AWS::AuditManager::Assessment":                                    &auditmanager.Assessment[any]{},
		"AWS::AutoScaling::AutoScalingGroup":                               &autoscaling.AutoScalingGroup[any]{},
		"AWS::AutoScaling::LaunchConfiguration":                            &autoscaling.LaunchConfiguration[any]{},
		"AWS::AutoScaling::LifecycleHook":                                  &autoscaling.LifecycleHook[any]{},
		"AWS::AutoScaling::ScalingPolicy":                                  &autoscaling.ScalingPolicy[any]{},
		"AWS::AutoScaling::ScheduledAction":                                &autoscaling.ScheduledAction[any]{},
		"AWS::AutoScaling::WarmPool":                                       &autoscaling.WarmPool[any]{},
		"AWS::AutoScalingPlans::ScalingPlan":                               &autoscalingplans.ScalingPlan[any]{},
		"AWS::Backup::BackupPlan":                                          &backup.BackupPlan[any]{},
		"AWS::Backup::BackupSelection":                                     &backup.BackupSelection[any]{},
		"AWS::Backup::BackupVault":                                         &backup.BackupVault[any]{},
		"AWS::Backup::Framework":                                           &backup.Framework[any]{},
		"AWS::Backup::ReportPlan":                                          &backup.ReportPlan[any]{},
		"AWS::BackupGateway::Hypervisor":                                   &backupgateway.Hypervisor[any]{},
		"AWS::Batch::ComputeEnvironment":                                   &batch.ComputeEnvironment[any]{},
		"AWS::Batch::JobDefinition":                                        &batch.JobDefinition[any]{},
		"AWS::Batch::JobQueue":                                             &batch.JobQueue[any]{},
		"AWS::Batch::SchedulingPolicy":                                     &batch.SchedulingPolicy[any]{},
		"AWS::BillingConductor::BillingGroup":                              &billingconductor.BillingGroup[any]{},
		"AWS::BillingConductor::CustomLineItem":                            &billingconductor.CustomLineItem[any]{},
		"AWS::BillingConductor::PricingPlan":                               &billingconductor.PricingPlan[any]{},
		"AWS::BillingConductor::PricingRule":                               &billingconductor.PricingRule[any]{},
		"AWS::Budgets::Budget":                                             &budgets.Budget[any]{},
		"AWS::Budgets::BudgetsAction":                                      &budgets.BudgetsAction[any]{},
		"AWS::CDK::Metadata":                                               &cdk.Metadata[any]{},
		"AWS::CE::AnomalyMonitor":                                          &ce.AnomalyMonitor[any]{},
		"AWS::CE::AnomalySubscription":                                     &ce.AnomalySubscription[any]{},
		"AWS::CE::CostCategory":                                            &ce.CostCategory[any]{},
		"AWS::CUR::ReportDefinition":                                       &cur.ReportDefinition[any]{},
		"AWS::Cassandra::Keyspace":                                         &cassandra.Keyspace[any]{},
		"AWS::Cassandra::Table":                                            &cassandra.Table[any]{},
		"AWS::CertificateManager::Account":                                 &certificatemanager.Account[any]{},
		"AWS::CertificateManager::Certificate":                             &certificatemanager.Certificate[any]{},
		"AWS::Chatbot::MicrosoftTeamsChannelConfiguration":                 &chatbot.MicrosoftTeamsChannelConfiguration[any]{},
		"AWS::Chatbot::SlackChannelConfiguration":                          &chatbot.SlackChannelConfiguration[any]{},
		"AWS::Cloud9::EnvironmentEC2":                                      &cloud9.EnvironmentEC2[any]{},
		"AWS::CloudFormation::CustomResource":                              &cloudformation.CustomResource[any]{},
		"AWS::CloudFormation::HookDefaultVersion":                          &cloudformation.HookDefaultVersion[any]{},
		"AWS::CloudFormation::HookTypeConfig":                              &cloudformation.HookTypeConfig[any]{},
		"AWS::CloudFormation::HookVersion":                                 &cloudformation.HookVersion[any]{},
		"AWS::CloudFormation::Macro":                                       &cloudformation.Macro[any]{},
		"AWS::CloudFormation::ModuleDefaultVersion":                        &cloudformation.ModuleDefaultVersion[any]{},
		"AWS::CloudFormation::ModuleVersion":                               &cloudformation.ModuleVersion[any]{},
		"AWS::CloudFormation::PublicTypeVersion":                           &cloudformation.PublicTypeVersion[any]{},
		"AWS::CloudFormation::Publisher":                                   &cloudformation.Publisher[any]{},
		"AWS::CloudFormation::ResourceDefaultVersion":                      &cloudformation.ResourceDefaultVersion[any]{},
		"AWS::CloudFormation::ResourceVersion":                             &cloudformation.ResourceVersion[any]{},
		"AWS::CloudFormation::Stack":                                       &cloudformation.Stack[any]{},
		"AWS::CloudFormation::StackSet":                                    &cloudformation.StackSet[any]{},
		"AWS::CloudFormation::TypeActivation":                              &cloudformation.TypeActivation[any]{},
		"AWS::CloudFormation::WaitCondition":                               &cloudformation.WaitCondition[any]{},
		"AWS::CloudFormation::WaitConditionHandle":                         &cloudformation.WaitConditionHandle[any]{},
		"AWS::CloudFront::CachePolicy":                                     &cloudfront.CachePolicy[any]{},
		"AWS::CloudFront::CloudFrontOriginAccessIdentity":                  &cloudfront.CloudFrontOriginAccessIdentity[any]{},
		"AWS::CloudFront::ContinuousDeploymentPolicy":                      &cloudfront.ContinuousDeploymentPolicy[any]{},
		"AWS::CloudFront::Distribution":                                    &cloudfront.Distribution[any]{},
		"AWS::CloudFront::Function":                                        &cloudfront.Function[any]{},
		"AWS::CloudFront::KeyGroup":                                        &cloudfront.KeyGroup[any]{},
		"AWS::CloudFront::MonitoringSubscription":                          &cloudfront.MonitoringSubscription[any]{},
		"AWS::CloudFront::OriginAccessControl":                             &cloudfront.OriginAccessControl[any]{},
		"AWS::CloudFront::OriginRequestPolicy":                             &cloudfront.OriginRequestPolicy[any]{},
		"AWS::CloudFront::PublicKey":                                       &cloudfront.PublicKey[any]{},
		"AWS::CloudFront::RealtimeLogConfig":                               &cloudfront.RealtimeLogConfig[any]{},
		"AWS::CloudFront::ResponseHeadersPolicy":                           &cloudfront.ResponseHeadersPolicy[any]{},
		"AWS::CloudFront::StreamingDistribution":                           &cloudfront.StreamingDistribution[any]{},
		"AWS::CloudTrail::Channel":                                         &cloudtrail.Channel[any]{},
		"AWS::CloudTrail::EventDataStore":                                  &cloudtrail.EventDataStore[any]{},
		"AWS::CloudTrail::ResourcePolicy":                                  &cloudtrail.ResourcePolicy[any]{},
		"AWS::CloudTrail::Trail":                                           &cloudtrail.Trail[any]{},
		"AWS::CloudWatch::Alarm":                                           &cloudwatch.Alarm[any]{},
		"AWS::CloudWatch::AnomalyDetector":                                 &cloudwatch.AnomalyDetector[any]{},
		"AWS::CloudWatch::CompositeAlarm":                                  &cloudwatch.CompositeAlarm[any]{},
		"AWS::CloudWatch::Dashboard":                                       &cloudwatch.Dashboard[any]{},
		"AWS::CloudWatch::InsightRule":                                     &cloudwatch.InsightRule[any]{},
		"AWS::CloudWatch::MetricStream":                                    &cloudwatch.MetricStream[any]{},
		"AWS::CodeArtifact::Domain":                                        &codeartifact.Domain[any]{},
		"AWS::CodeArtifact::Repository":                                    &codeartifact.Repository[any]{},
		"AWS::CodeBuild::Project":                                          &codebuild.Project[any]{},
		"AWS::CodeBuild::ReportGroup":                                      &codebuild.ReportGroup[any]{},
		"AWS::CodeBuild::SourceCredential":                                 &codebuild.SourceCredential[any]{},
		"AWS::CodeCommit::Repository":                                      &codecommit.Repository[any]{},
		"AWS::CodeDeploy::Application":                                     &codedeploy.Application[any]{},
		"AWS::CodeDeploy::DeploymentConfig":                                &codedeploy.DeploymentConfig[any]{},
		"AWS::CodeDeploy::DeploymentGroup":                                 &codedeploy.DeploymentGroup[any]{},
		"AWS::CodeGuruProfiler::ProfilingGroup":                            &codeguruprofiler.ProfilingGroup[any]{},
		"AWS::CodeGuruReviewer::RepositoryAssociation":                     &codegurureviewer.RepositoryAssociation[any]{},
		"AWS::CodePipeline::CustomActionType":                              &codepipeline.CustomActionType[any]{},
		"AWS::CodePipeline::Pipeline":                                      &codepipeline.Pipeline[any]{},
		"AWS::CodePipeline::Webhook":                                       &codepipeline.Webhook[any]{},
		"AWS::CodeStar::GitHubRepository":                                  &codestar.GitHubRepository[any]{},
		"AWS::CodeStarConnections::Connection":                             &codestarconnections.Connection[any]{},
		"AWS::CodeStarNotifications::NotificationRule":                     &codestarnotifications.NotificationRule[any]{},
		"AWS::Cognito::IdentityPool":                                       &cognito.IdentityPool[any]{},
		"AWS::Cognito::IdentityPoolPrincipalTag":                           &cognito.IdentityPoolPrincipalTag[any]{},
		"AWS::Cognito::IdentityPoolRoleAttachment":                         &cognito.IdentityPoolRoleAttachment[any]{},
		"AWS::Cognito::UserPool":                                           &cognito.UserPool[any]{},
		"AWS::Cognito::UserPoolClient":                                     &cognito.UserPoolClient[any]{},
		"AWS::Cognito::UserPoolDomain":                                     &cognito.UserPoolDomain[any]{},
		"AWS::Cognito::UserPoolGroup":                                      &cognito.UserPoolGroup[any]{},
		"AWS::Cognito::UserPoolIdentityProvider":                           &cognito.UserPoolIdentityProvider[any]{},
		"AWS::Cognito::UserPoolResourceServer":                             &cognito.UserPoolResourceServer[any]{},
		"AWS::Cognito::UserPoolRiskConfigurationAttachment":                &cognito.UserPoolRiskConfigurationAttachment[any]{},
		"AWS::Cognito::UserPoolUICustomizationAttachment":                  &cognito.UserPoolUICustomizationAttachment[any]{},
		"AWS::Cognito::UserPoolUser":                                       &cognito.UserPoolUser[any]{},
		"AWS::Cognito::UserPoolUserToGroupAttachment":                      &cognito.UserPoolUserToGroupAttachment[any]{},
		"AWS::Comprehend::Flywheel":                                        &comprehend.Flywheel[any]{},
		"AWS::Config::AggregationAuthorization":                            &config.AggregationAuthorization[any]{},
		"AWS::Config::ConfigRule":                                          &config.ConfigRule[any]{},
		"AWS::Config::ConfigurationAggregator":                             &config.ConfigurationAggregator[any]{},
		"AWS::Config::ConfigurationRecorder":                               &config.ConfigurationRecorder[any]{},
		"AWS::Config::ConformancePack":                                     &config.ConformancePack[any]{},
		"AWS::Config::DeliveryChannel":                                     &config.DeliveryChannel[any]{},
		"AWS::Config::OrganizationConfigRule":                              &config.OrganizationConfigRule[any]{},
		"AWS::Config::OrganizationConformancePack":                         &config.OrganizationConformancePack[any]{},
		"AWS::Config::RemediationConfiguration":                            &config.RemediationConfiguration[any]{},
		"AWS::Config::StoredQuery":                                         &config.StoredQuery[any]{},
		"AWS::Connect::ApprovedOrigin":                                     &connect.ApprovedOrigin[any]{},
		"AWS::Connect::ContactFlow":                                        &connect.ContactFlow[any]{},
		"AWS::Connect::ContactFlowModule":                                  &connect.ContactFlowModule[any]{},
		"AWS::Connect::EvaluationForm":                                     &connect.EvaluationForm[any]{},
		"AWS::Connect::HoursOfOperation":                                   &connect.HoursOfOperation[any]{},
		"AWS::Connect::Instance":                                           &connect.Instance[any]{},
		"AWS::Connect::InstanceStorageConfig":                              &connect.InstanceStorageConfig[any]{},
		"AWS::Connect::IntegrationAssociation":                             &connect.IntegrationAssociation[any]{},
		"AWS::Connect::PhoneNumber":                                        &connect.PhoneNumber[any]{},
		"AWS::Connect::Prompt":                                             &connect.Prompt[any]{},
		"AWS::Connect::QuickConnect":                                       &connect.QuickConnect[any]{},
		"AWS::Connect::Rule":                                               &connect.Rule[any]{},
		"AWS::Connect::SecurityKey":                                        &connect.SecurityKey[any]{},
		"AWS::Connect::TaskTemplate":                                       &connect.TaskTemplate[any]{},
		"AWS::Connect::User":                                               &connect.User[any]{},
		"AWS::Connect::UserHierarchyGroup":                                 &connect.UserHierarchyGroup[any]{},
		"AWS::ConnectCampaigns::Campaign":                                  &connectcampaigns.Campaign[any]{},
		"AWS::ControlTower::EnabledControl":                                &controltower.EnabledControl[any]{},
		"AWS::CustomerProfiles::Domain":                                    &customerprofiles.Domain[any]{},
		"AWS::CustomerProfiles::Integration":                               &customerprofiles.Integration[any]{},
		"AWS::CustomerProfiles::ObjectType":                                &customerprofiles.ObjectType[any]{},
		"AWS::DAX::Cluster":                                                &dax.Cluster[any]{},
		"AWS::DAX::ParameterGroup":                                         &dax.ParameterGroup[any]{},
		"AWS::DAX::SubnetGroup":                                            &dax.SubnetGroup[any]{},
		"AWS::DLM::LifecyclePolicy":                                        &dlm.LifecyclePolicy[any]{},
		"AWS::DMS::Certificate":                                            &dms.Certificate[any]{},
		"AWS::DMS::Endpoint":                                               &dms.Endpoint[any]{},
		"AWS::DMS::EventSubscription":                                      &dms.EventSubscription[any]{},
		"AWS::DMS::ReplicationInstance":                                    &dms.ReplicationInstance[any]{},
		"AWS::DMS::ReplicationSubnetGroup":                                 &dms.ReplicationSubnetGroup[any]{},
		"AWS::DMS::ReplicationTask":                                        &dms.ReplicationTask[any]{},
		"AWS::DataBrew::Dataset":                                           &databrew.Dataset[any]{},
		"AWS::DataBrew::Job":                                               &databrew.Job[any]{},
		"AWS::DataBrew::Project":                                           &databrew.Project[any]{},
		"AWS::DataBrew::Recipe":                                            &databrew.Recipe[any]{},
		"AWS::DataBrew::Ruleset":                                           &databrew.Ruleset[any]{},
		"AWS::DataBrew::Schedule":                                          &databrew.Schedule[any]{},
		"AWS::DataPipeline::Pipeline":                                      &datapipeline.Pipeline[any]{},
		"AWS::DataSync::Agent":                                             &datasync.Agent[any]{},
		"AWS::DataSync::LocationEFS":                                       &datasync.LocationEFS[any]{},
		"AWS::DataSync::LocationFSxLustre":                                 &datasync.LocationFSxLustre[any]{},
		"AWS::DataSync::LocationFSxONTAP":                                  &datasync.LocationFSxONTAP[any]{},
		"AWS::DataSync::LocationFSxOpenZFS":                                &datasync.LocationFSxOpenZFS[any]{},
		"AWS::DataSync::LocationFSxWindows":                                &datasync.LocationFSxWindows[any]{},
		"AWS::DataSync::LocationHDFS":                                      &datasync.LocationHDFS[any]{},
		"AWS::DataSync::LocationNFS":                                       &datasync.LocationNFS[any]{},
		"AWS::DataSync::LocationObjectStorage":                             &datasync.LocationObjectStorage[any]{},
		"AWS::DataSync::LocationS3":                                        &datasync.LocationS3[any]{},
		"AWS::DataSync::LocationSMB":                                       &datasync.LocationSMB[any]{},
		"AWS::DataSync::StorageSystem":                                     &datasync.StorageSystem[any]{},
		"AWS::DataSync::Task":                                              &datasync.Task[any]{},
		"AWS::Detective::Graph":                                            &detective.Graph[any]{},
		"AWS::Detective::MemberInvitation":                                 &detective.MemberInvitation[any]{},
		"AWS::Detective::OrganizationAdmin":                                &detective.OrganizationAdmin[any]{},
		"AWS::DevOpsGuru::LogAnomalyDetectionIntegration":                  &devopsguru.LogAnomalyDetectionIntegration[any]{},
		"AWS::DevOpsGuru::NotificationChannel":                             &devopsguru.NotificationChannel[any]{},
		"AWS::DevOpsGuru::ResourceCollection":                              &devopsguru.ResourceCollection[any]{},
		"AWS::DirectoryService::MicrosoftAD":                               &directoryservice.MicrosoftAD[any]{},
		"AWS::DirectoryService::SimpleAD":                                  &directoryservice.SimpleAD[any]{},
		"AWS::DocDB::DBCluster":                                            &docdb.DBCluster[any]{},
		"AWS::DocDB::DBClusterParameterGroup":                              &docdb.DBClusterParameterGroup[any]{},
		"AWS::DocDB::DBInstance":                                           &docdb.DBInstance[any]{},
		"AWS::DocDB::DBSubnetGroup":                                        &docdb.DBSubnetGroup[any]{},
		"AWS::DocDBElastic::Cluster":                                       &docdbelastic.Cluster[any]{},
		"AWS::DynamoDB::GlobalTable":                                       &dynamodb.GlobalTable[any]{},
		"AWS::DynamoDB::Table":                                             &dynamodb.Table[any]{},
		"AWS::EC2::CapacityReservation":                                    &ec2.CapacityReservation[any]{},
		"AWS::EC2::CapacityReservationFleet":                               &ec2.CapacityReservationFleet[any]{},
		"AWS::EC2::CarrierGateway":                                         &ec2.CarrierGateway[any]{},
		"AWS::EC2::ClientVpnAuthorizationRule":                             &ec2.ClientVpnAuthorizationRule[any]{},
		"AWS::EC2::ClientVpnEndpoint":                                      &ec2.ClientVpnEndpoint[any]{},
		"AWS::EC2::ClientVpnRoute":                                         &ec2.ClientVpnRoute[any]{},
		"AWS::EC2::ClientVpnTargetNetworkAssociation":                      &ec2.ClientVpnTargetNetworkAssociation[any]{},
		"AWS::EC2::CustomerGateway":                                        &ec2.CustomerGateway[any]{},
		"AWS::EC2::DHCPOptions":                                            &ec2.DHCPOptions[any]{},
		"AWS::EC2::EC2Fleet":                                               &ec2.EC2Fleet[any]{},
		"AWS::EC2::EIP":                                                    &ec2.EIP[any]{},
		"AWS::EC2::EIPAssociation":                                         &ec2.EIPAssociation[any]{},
		"AWS::EC2::EgressOnlyInternetGateway":                              &ec2.EgressOnlyInternetGateway[any]{},
		"AWS::EC2::EnclaveCertificateIamRoleAssociation":                   &ec2.EnclaveCertificateIamRoleAssociation[any]{},
		"AWS::EC2::FlowLog":                                                &ec2.FlowLog[any]{},
		"AWS::EC2::GatewayRouteTableAssociation":                           &ec2.GatewayRouteTableAssociation[any]{},
		"AWS::EC2::Host":                                                   &ec2.Host[any]{},
		"AWS::EC2::IPAM":                                                   &ec2.IPAM[any]{},
		"AWS::EC2::IPAMAllocation":                                         &ec2.IPAMAllocation[any]{},
		"AWS::EC2::IPAMPool":                                               &ec2.IPAMPool[any]{},
		"AWS::EC2::IPAMPoolCidr":                                           &ec2.IPAMPoolCidr[any]{},
		"AWS::EC2::IPAMResourceDiscovery":                                  &ec2.IPAMResourceDiscovery[any]{},
		"AWS::EC2::IPAMResourceDiscoveryAssociation":                       &ec2.IPAMResourceDiscoveryAssociation[any]{},
		"AWS::EC2::IPAMScope":                                              &ec2.IPAMScope[any]{},
		"AWS::EC2::Instance":                                               &ec2.Instance[any]{},
		"AWS::EC2::InternetGateway":                                        &ec2.InternetGateway[any]{},
		"AWS::EC2::KeyPair":                                                &ec2.KeyPair[any]{},
		"AWS::EC2::LaunchTemplate":                                         &ec2.LaunchTemplate[any]{},
		"AWS::EC2::LocalGatewayRoute":                                      &ec2.LocalGatewayRoute[any]{},
		"AWS::EC2::LocalGatewayRouteTable":                                 &ec2.LocalGatewayRouteTable[any]{},
		"AWS::EC2::LocalGatewayRouteTableVPCAssociation":                   &ec2.LocalGatewayRouteTableVPCAssociation[any]{},
		"AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation": &ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation[any]{},
		"AWS::EC2::NatGateway":                                             &ec2.NatGateway[any]{},
		"AWS::EC2::NetworkAcl":                                             &ec2.NetworkAcl[any]{},
		"AWS::EC2::NetworkAclEntry":                                        &ec2.NetworkAclEntry[any]{},
		"AWS::EC2::NetworkInsightsAccessScope":                             &ec2.NetworkInsightsAccessScope[any]{},
		"AWS::EC2::NetworkInsightsAccessScopeAnalysis":                     &ec2.NetworkInsightsAccessScopeAnalysis[any]{},
		"AWS::EC2::NetworkInsightsAnalysis":                                &ec2.NetworkInsightsAnalysis[any]{},
		"AWS::EC2::NetworkInsightsPath":                                    &ec2.NetworkInsightsPath[any]{},
		"AWS::EC2::NetworkInterface":                                       &ec2.NetworkInterface[any]{},
		"AWS::EC2::NetworkInterfaceAttachment":                             &ec2.NetworkInterfaceAttachment[any]{},
		"AWS::EC2::NetworkInterfacePermission":                             &ec2.NetworkInterfacePermission[any]{},
		"AWS::EC2::NetworkPerformanceMetricSubscription":                   &ec2.NetworkPerformanceMetricSubscription[any]{},
		"AWS::EC2::PlacementGroup":                                         &ec2.PlacementGroup[any]{},
		"AWS::EC2::PrefixList":                                             &ec2.PrefixList[any]{},
		"AWS::EC2::Route":                                                  &ec2.Route[any]{},
		"AWS::EC2::RouteTable":                                             &ec2.RouteTable[any]{},
		"AWS::EC2::SecurityGroup":                                          &ec2.SecurityGroup[any]{},
		"AWS::EC2::SecurityGroupEgress":                                    &ec2.SecurityGroupEgress[any]{},
		"AWS::EC2::SecurityGroupIngress":                                   &ec2.SecurityGroupIngress[any]{},
		"AWS::EC2::SpotFleet":                                              &ec2.SpotFleet[any]{},
		"AWS::EC2::Subnet":                                                 &ec2.Subnet[any]{},
		"AWS::EC2::SubnetCidrBlock":                                        &ec2.SubnetCidrBlock[any]{},
		"AWS::EC2::SubnetNetworkAclAssociation":                            &ec2.SubnetNetworkAclAssociation[any]{},
		"AWS::EC2::SubnetRouteTableAssociation":                            &ec2.SubnetRouteTableAssociation[any]{},
		"AWS::EC2::TrafficMirrorFilter":                                    &ec2.TrafficMirrorFilter[any]{},
		"AWS::EC2::TrafficMirrorFilterRule":                                &ec2.TrafficMirrorFilterRule[any]{},
		"AWS::EC2::TrafficMirrorSession":                                   &ec2.TrafficMirrorSession[any]{},
		"AWS::EC2::TrafficMirrorTarget":                                    &ec2.TrafficMirrorTarget[any]{},
		"AWS::EC2::TransitGateway":                                         &ec2.TransitGateway[any]{},
		"AWS::EC2::TransitGatewayAttachment":                               &ec2.TransitGatewayAttachment[any]{},
		"AWS::EC2::TransitGatewayConnect":                                  &ec2.TransitGatewayConnect[any]{},
		"AWS::EC2::TransitGatewayMulticastDomain":                          &ec2.TransitGatewayMulticastDomain[any]{},
		"AWS::EC2::TransitGatewayMulticastDomainAssociation":               &ec2.TransitGatewayMulticastDomainAssociation[any]{},
		"AWS::EC2::TransitGatewayMulticastGroupMember":                     &ec2.TransitGatewayMulticastGroupMember[any]{},
		"AWS::EC2::TransitGatewayMulticastGroupSource":                     &ec2.TransitGatewayMulticastGroupSource[any]{},
		"AWS::EC2::TransitGatewayPeeringAttachment":                        &ec2.TransitGatewayPeeringAttachment[any]{},
		"AWS::EC2::TransitGatewayRoute":                                    &ec2.TransitGatewayRoute[any]{},
		"AWS::EC2::TransitGatewayRouteTable":                               &ec2.TransitGatewayRouteTable[any]{},
		"AWS::EC2::TransitGatewayRouteTableAssociation":                    &ec2.TransitGatewayRouteTableAssociation[any]{},
		"AWS::EC2::TransitGatewayRouteTablePropagation":                    &ec2.TransitGatewayRouteTablePropagation[any]{},
		"AWS::EC2::TransitGatewayVpcAttachment":                            &ec2.TransitGatewayVpcAttachment[any]{},
		"AWS::EC2::VPC":                                                    &ec2.VPC[any]{},
		"AWS::EC2::VPCCidrBlock":                                           &ec2.VPCCidrBlock[any]{},
		"AWS::EC2::VPCDHCPOptionsAssociation":                              &ec2.VPCDHCPOptionsAssociation[any]{},
		"AWS::EC2::VPCEndpoint":                                            &ec2.VPCEndpoint[any]{},
		"AWS::EC2::VPCEndpointConnectionNotification":                      &ec2.VPCEndpointConnectionNotification[any]{},
		"AWS::EC2::VPCEndpointService":                                     &ec2.VPCEndpointService[any]{},
		"AWS::EC2::VPCEndpointServicePermissions":                          &ec2.VPCEndpointServicePermissions[any]{},
		"AWS::EC2::VPCGatewayAttachment":                                   &ec2.VPCGatewayAttachment[any]{},
		"AWS::EC2::VPCPeeringConnection":                                   &ec2.VPCPeeringConnection[any]{},
		"AWS::EC2::VPNConnection":                                          &ec2.VPNConnection[any]{},
		"AWS::EC2::VPNConnectionRoute":                                     &ec2.VPNConnectionRoute[any]{},
		"AWS::EC2::VPNGateway":                                             &ec2.VPNGateway[any]{},
		"AWS::EC2::VPNGatewayRoutePropagation":                             &ec2.VPNGatewayRoutePropagation[any]{},
		"AWS::EC2::VerifiedAccessEndpoint":                                 &ec2.VerifiedAccessEndpoint[any]{},
		"AWS::EC2::VerifiedAccessGroup":                                    &ec2.VerifiedAccessGroup[any]{},
		"AWS::EC2::VerifiedAccessInstance":                                 &ec2.VerifiedAccessInstance[any]{},
		"AWS::EC2::VerifiedAccessTrustProvider":                            &ec2.VerifiedAccessTrustProvider[any]{},
		"AWS::EC2::Volume":                                                 &ec2.Volume[any]{},
		"AWS::EC2::VolumeAttachment":                                       &ec2.VolumeAttachment[any]{},
		"AWS::ECR::PublicRepository":                                       &ecr.PublicRepository[any]{},
		"AWS::ECR::PullThroughCacheRule":                                   &ecr.PullThroughCacheRule[any]{},
		"AWS::ECR::RegistryPolicy":                                         &ecr.RegistryPolicy[any]{},
		"AWS::ECR::ReplicationConfiguration":                               &ecr.ReplicationConfiguration[any]{},
		"AWS::ECR::Repository":                                             &ecr.Repository[any]{},
		"AWS::ECS::CapacityProvider":                                       &ecs.CapacityProvider[any]{},
		"AWS::ECS::Cluster":                                                &ecs.Cluster[any]{},
		"AWS::ECS::ClusterCapacityProviderAssociations":                    &ecs.ClusterCapacityProviderAssociations[any]{},
		"AWS::ECS::PrimaryTaskSet":                                         &ecs.PrimaryTaskSet[any]{},
		"AWS::ECS::Service":                                                &ecs.Service[any]{},
		"AWS::ECS::TaskDefinition":                                         &ecs.TaskDefinition[any]{},
		"AWS::ECS::TaskSet":                                                &ecs.TaskSet[any]{},
		"AWS::EFS::AccessPoint":                                            &efs.AccessPoint[any]{},
		"AWS::EFS::FileSystem":                                             &efs.FileSystem[any]{},
		"AWS::EFS::MountTarget":                                            &efs.MountTarget[any]{},
		"AWS::EKS::Addon":                                                  &eks.Addon[any]{},
		"AWS::EKS::Cluster":                                                &eks.Cluster[any]{},
		"AWS::EKS::FargateProfile":                                         &eks.FargateProfile[any]{},
		"AWS::EKS::IdentityProviderConfig":                                 &eks.IdentityProviderConfig[any]{},
		"AWS::EKS::Nodegroup":                                              &eks.Nodegroup[any]{},
		"AWS::EMR::Cluster":                                                &emr.Cluster[any]{},
		"AWS::EMR::InstanceFleetConfig":                                    &emr.InstanceFleetConfig[any]{},
		"AWS::EMR::InstanceGroupConfig":                                    &emr.InstanceGroupConfig[any]{},
		"AWS::EMR::SecurityConfiguration":                                  &emr.SecurityConfiguration[any]{},
		"AWS::EMR::Step":                                                   &emr.Step[any]{},
		"AWS::EMR::Studio":                                                 &emr.Studio[any]{},
		"AWS::EMR::StudioSessionMapping":                                   &emr.StudioSessionMapping[any]{},
		"AWS::EMRContainers::VirtualCluster":                               &emrcontainers.VirtualCluster[any]{},
		"AWS::EMRServerless::Application":                                  &emrserverless.Application[any]{},
		"AWS::ElastiCache::CacheCluster":                                   &elasticache.CacheCluster[any]{},
		"AWS::ElastiCache::GlobalReplicationGroup":                         &elasticache.GlobalReplicationGroup[any]{},
		"AWS::ElastiCache::ParameterGroup":                                 &elasticache.ParameterGroup[any]{},
		"AWS::ElastiCache::ReplicationGroup":                               &elasticache.ReplicationGroup[any]{},
		"AWS::ElastiCache::SecurityGroup":                                  &elasticache.SecurityGroup[any]{},
		"AWS::ElastiCache::SecurityGroupIngress":                           &elasticache.SecurityGroupIngress[any]{},
		"AWS::ElastiCache::SubnetGroup":                                    &elasticache.SubnetGroup[any]{},
		"AWS::ElastiCache::User":                                           &elasticache.User[any]{},
		"AWS::ElastiCache::UserGroup":                                      &elasticache.UserGroup[any]{},
		"AWS::ElasticBeanstalk::Application":                               &elasticbeanstalk.Application[any]{},
		"AWS::ElasticBeanstalk::ApplicationVersion":                        &elasticbeanstalk.ApplicationVersion[any]{},
		"AWS::ElasticBeanstalk::ConfigurationTemplate":                     &elasticbeanstalk.ConfigurationTemplate[any]{},
		"AWS::ElasticBeanstalk::Environment":                               &elasticbeanstalk.Environment[any]{},
		"AWS::ElasticLoadBalancing::LoadBalancer":                          &elasticloadbalancing.LoadBalancer[any]{},
		"AWS::ElasticLoadBalancingV2::Listener":                            &elasticloadbalancingv2.Listener[any]{},
		"AWS::ElasticLoadBalancingV2::ListenerCertificate":                 &elasticloadbalancingv2.ListenerCertificate[any]{},
		"AWS::ElasticLoadBalancingV2::ListenerRule":                        &elasticloadbalancingv2.ListenerRule[any]{},
		"AWS::ElasticLoadBalancingV2::LoadBalancer":                        &elasticloadbalancingv2.LoadBalancer[any]{},
		"AWS::ElasticLoadBalancingV2::TargetGroup":                         &elasticloadbalancingv2.TargetGroup[any]{},
		"AWS::Elasticsearch::Domain":                                       &elasticsearch.Domain[any]{},
		"AWS::EventSchemas::Discoverer":                                    &eventschemas.Discoverer[any]{},
		"AWS::EventSchemas::Registry":                                      &eventschemas.Registry[any]{},
		"AWS::EventSchemas::RegistryPolicy":                                &eventschemas.RegistryPolicy[any]{},
		"AWS::EventSchemas::Schema":                                        &eventschemas.Schema[any]{},
		"AWS::Events::ApiDestination":                                      &events.ApiDestination[any]{},
		"AWS::Events::Archive":                                             &events.Archive[any]{},
		"AWS::Events::Connection":                                          &events.Connection[any]{},
		"AWS::Events::Endpoint":                                            &events.Endpoint[any]{},
		"AWS::Events::EventBus":                                            &events.EventBus[any]{},
		"AWS::Events::EventBusPolicy":                                      &events.EventBusPolicy[any]{},
		"AWS::Events::Rule":                                                &events.Rule[any]{},
		"AWS::Evidently::Experiment":                                       &evidently.Experiment[any]{},
		"AWS::Evidently::Feature":                                          &evidently.Feature[any]{},
		"AWS::Evidently::Launch":                                           &evidently.Launch[any]{},
		"AWS::Evidently::Project":                                          &evidently.Project[any]{},
		"AWS::Evidently::Segment":                                          &evidently.Segment[any]{},
		"AWS::FIS::ExperimentTemplate":                                     &fis.ExperimentTemplate[any]{},
		"AWS::FMS::NotificationChannel":                                    &fms.NotificationChannel[any]{},
		"AWS::FMS::Policy":                                                 &fms.Policy[any]{},
		"AWS::FMS::ResourceSet":                                            &fms.ResourceSet[any]{},
		"AWS::FSx::DataRepositoryAssociation":                              &fsx.DataRepositoryAssociation[any]{},
		"AWS::FSx::FileSystem":                                             &fsx.FileSystem[any]{},
		"AWS::FSx::Snapshot":                                               &fsx.Snapshot[any]{},
		"AWS::FSx::StorageVirtualMachine":                                  &fsx.StorageVirtualMachine[any]{},
		"AWS::FSx::Volume":                                                 &fsx.Volume[any]{},
		"AWS::FinSpace::Environment":                                       &finspace.Environment[any]{},
		"AWS::Forecast::Dataset":                                           &forecast.Dataset[any]{},
		"AWS::Forecast::DatasetGroup":                                      &forecast.DatasetGroup[any]{},
		"AWS::FraudDetector::Detector":                                     &frauddetector.Detector[any]{},
		"AWS::FraudDetector::EntityType":                                   &frauddetector.EntityType[any]{},
		"AWS::FraudDetector::EventType":                                    &frauddetector.EventType[any]{},
		"AWS::FraudDetector::Label":                                        &frauddetector.Label[any]{},
		"AWS::FraudDetector::List":                                         &frauddetector.List[any]{},
		"AWS::FraudDetector::Outcome":                                      &frauddetector.Outcome[any]{},
		"AWS::FraudDetector::Variable":                                     &frauddetector.Variable[any]{},
		"AWS::GameLift::Alias":                                             &gamelift.Alias[any]{},
		"AWS::GameLift::Build":                                             &gamelift.Build[any]{},
		"AWS::GameLift::Fleet":                                             &gamelift.Fleet[any]{},
		"AWS::GameLift::GameServerGroup":                                   &gamelift.GameServerGroup[any]{},
		"AWS::GameLift::GameSessionQueue":                                  &gamelift.GameSessionQueue[any]{},
		"AWS::GameLift::Location":                                          &gamelift.Location[any]{},
		"AWS::GameLift::MatchmakingConfiguration":                          &gamelift.MatchmakingConfiguration[any]{},
		"AWS::GameLift::MatchmakingRuleSet":                                &gamelift.MatchmakingRuleSet[any]{},
		"AWS::GameLift::Script":                                            &gamelift.Script[any]{},
		"AWS::GlobalAccelerator::Accelerator":                              &globalaccelerator.Accelerator[any]{},
		"AWS::GlobalAccelerator::EndpointGroup":                            &globalaccelerator.EndpointGroup[any]{},
		"AWS::GlobalAccelerator::Listener":                                 &globalaccelerator.Listener[any]{},
		"AWS::Glue::Classifier":                                            &glue.Classifier[any]{},
		"AWS::Glue::Connection":                                            &glue.Connection[any]{},
		"AWS::Glue::Crawler":                                               &glue.Crawler[any]{},
		"AWS::Glue::DataCatalogEncryptionSettings":                         &glue.DataCatalogEncryptionSettings[any]{},
		"AWS::Glue::Database":                                              &glue.Database[any]{},
		"AWS::Glue::DevEndpoint":                                           &glue.DevEndpoint[any]{},
		"AWS::Glue::Job":                                                   &glue.Job[any]{},
		"AWS::Glue::MLTransform":                                           &glue.MLTransform[any]{},
		"AWS::Glue::Partition":                                             &glue.Partition[any]{},
		"AWS::Glue::Registry":                                              &glue.Registry[any]{},
		"AWS::Glue::Schema":                                                &glue.Schema[any]{},
		"AWS::Glue::SchemaVersion":                                         &glue.SchemaVersion[any]{},
		"AWS::Glue::SchemaVersionMetadata":                                 &glue.SchemaVersionMetadata[any]{},
		"AWS::Glue::SecurityConfiguration":                                 &glue.SecurityConfiguration[any]{},
		"AWS::Glue::Table":                                                 &glue.Table[any]{},
		"AWS::Glue::Trigger":                                               &glue.Trigger[any]{},
		"AWS::Glue::Workflow":                                              &glue.Workflow[any]{},
		"AWS::Grafana::Workspace":                                          &grafana.Workspace[any]{},
		"AWS::Greengrass::ConnectorDefinition":                             &greengrass.ConnectorDefinition[any]{},
		"AWS::Greengrass::ConnectorDefinitionVersion":                      &greengrass.ConnectorDefinitionVersion[any]{},
		"AWS::Greengrass::CoreDefinition":                                  &greengrass.CoreDefinition[any]{},
		"AWS::Greengrass::CoreDefinitionVersion":                           &greengrass.CoreDefinitionVersion[any]{},
		"AWS::Greengrass::DeviceDefinition":                                &greengrass.DeviceDefinition[any]{},
		"AWS::Greengrass::DeviceDefinitionVersion":                         &greengrass.DeviceDefinitionVersion[any]{},
		"AWS::Greengrass::FunctionDefinition":                              &greengrass.FunctionDefinition[any]{},
		"AWS::Greengrass::FunctionDefinitionVersion":                       &greengrass.FunctionDefinitionVersion[any]{},
		"AWS::Greengrass::Group":                                           &greengrass.Group[any]{},
		"AWS::Greengrass::GroupVersion":                                    &greengrass.GroupVersion[any]{},
		"AWS::Greengrass::LoggerDefinition":                                &greengrass.LoggerDefinition[any]{},
		"AWS::Greengrass::LoggerDefinitionVersion":                         &greengrass.LoggerDefinitionVersion[any]{},
		"AWS::Greengrass::ResourceDefinition":                              &greengrass.ResourceDefinition[any]{},
		"AWS::Greengrass::ResourceDefinitionVersion":                       &greengrass.ResourceDefinitionVersion[any]{},
		"AWS::Greengrass::SubscriptionDefinition":                          &greengrass.SubscriptionDefinition[any]{},
		"AWS::Greengrass::SubscriptionDefinitionVersion":                   &greengrass.SubscriptionDefinitionVersion[any]{},
		"AWS::GreengrassV2::ComponentVersion":                              &greengrassv2.ComponentVersion[any]{},
		"AWS::GreengrassV2::Deployment":                                    &greengrassv2.Deployment[any]{},
		"AWS::GroundStation::Config":                                       &groundstation.Config[any]{},
		"AWS::GroundStation::DataflowEndpointGroup":                        &groundstation.DataflowEndpointGroup[any]{},
		"AWS::GroundStation::MissionProfile":                               &groundstation.MissionProfile[any]{},
		"AWS::GuardDuty::Detector":                                         &guardduty.Detector[any]{},
		"AWS::GuardDuty::Filter":                                           &guardduty.Filter[any]{},
		"AWS::GuardDuty::IPSet":                                            &guardduty.IPSet[any]{},
		"AWS::GuardDuty::Master":                                           &guardduty.Master[any]{},
		"AWS::GuardDuty::Member":                                           &guardduty.Member[any]{},
		"AWS::GuardDuty::ThreatIntelSet":                                   &guardduty.ThreatIntelSet[any]{},
		"AWS::HealthLake::FHIRDatastore":                                   &healthlake.FHIRDatastore[any]{},
		"AWS::IAM::AccessKey":                                              &iam.AccessKey[any]{},
		"AWS::IAM::Group":                                                  &iam.Group[any]{},
		"AWS::IAM::InstanceProfile":                                        &iam.InstanceProfile[any]{},
		"AWS::IAM::ManagedPolicy":                                          &iam.ManagedPolicy[any]{},
		"AWS::IAM::OIDCProvider":                                           &iam.OIDCProvider[any]{},
		"AWS::IAM::Policy":                                                 &iam.Policy[any]{},
		"AWS::IAM::Role":                                                   &iam.Role[any]{},
		"AWS::IAM::SAMLProvider":                                           &iam.SAMLProvider[any]{},
		"AWS::IAM::ServerCertificate":                                      &iam.ServerCertificate[any]{},
		"AWS::IAM::ServiceLinkedRole":                                      &iam.ServiceLinkedRole[any]{},
		"AWS::IAM::User":                                                   &iam.User[any]{},
		"AWS::IAM::UserToGroupAddition":                                    &iam.UserToGroupAddition[any]{},
		"AWS::IAM::VirtualMFADevice":                                       &iam.VirtualMFADevice[any]{},
		"AWS::IVS::Channel":                                                &ivs.Channel[any]{},
		"AWS::IVS::PlaybackKeyPair":                                        &ivs.PlaybackKeyPair[any]{},
		"AWS::IVS::RecordingConfiguration":                                 &ivs.RecordingConfiguration[any]{},
		"AWS::IVS::StreamKey":                                              &ivs.StreamKey[any]{},
		"AWS::IVSChat::LoggingConfiguration":                               &ivschat.LoggingConfiguration[any]{},
		"AWS::IVSChat::Room":                                               &ivschat.Room[any]{},
		"AWS::IdentityStore::Group":                                        &identitystore.Group[any]{},
		"AWS::IdentityStore::GroupMembership":                              &identitystore.GroupMembership[any]{},
		"AWS::ImageBuilder::Component":                                     &imagebuilder.Component[any]{},
		"AWS::ImageBuilder::ContainerRecipe":                               &imagebuilder.ContainerRecipe[any]{},
		"AWS::ImageBuilder::DistributionConfiguration":                     &imagebuilder.DistributionConfiguration[any]{},
		"AWS::ImageBuilder::Image":                                         &imagebuilder.Image[any]{},
		"AWS::ImageBuilder::ImagePipeline":                                 &imagebuilder.ImagePipeline[any]{},
		"AWS::ImageBuilder::ImageRecipe":                                   &imagebuilder.ImageRecipe[any]{},
		"AWS::ImageBuilder::InfrastructureConfiguration":                   &imagebuilder.InfrastructureConfiguration[any]{},
		"AWS::Inspector::AssessmentTarget":                                 &inspector.AssessmentTarget[any]{},
		"AWS::Inspector::AssessmentTemplate":                               &inspector.AssessmentTemplate[any]{},
		"AWS::Inspector::ResourceGroup":                                    &inspector.ResourceGroup[any]{},
		"AWS::InspectorV2::Filter":                                         &inspectorv2.Filter[any]{},
		"AWS::InternetMonitor::Monitor":                                    &internetmonitor.Monitor[any]{},
		"AWS::IoT1Click::Device":                                           &iot1click.Device[any]{},
		"AWS::IoT1Click::Placement":                                        &iot1click.Placement[any]{},
		"AWS::IoT1Click::Project":                                          &iot1click.Project[any]{},
		"AWS::IoT::AccountAuditConfiguration":                              &iot.AccountAuditConfiguration[any]{},
		"AWS::IoT::Authorizer":                                             &iot.Authorizer[any]{},
		"AWS::IoT::BillingGroup":                                           &iot.BillingGroup[any]{},
		"AWS::IoT::CACertificate":                                          &iot.CACertificate[any]{},
		"AWS::IoT::Certificate":                                            &iot.Certificate[any]{},
		"AWS::IoT::CustomMetric":                                           &iot.CustomMetric[any]{},
		"AWS::IoT::Dimension":                                              &iot.Dimension[any]{},
		"AWS::IoT::DomainConfiguration":                                    &iot.DomainConfiguration[any]{},
		"AWS::IoT::FleetMetric":                                            &iot.FleetMetric[any]{},
		"AWS::IoT::JobTemplate":                                            &iot.JobTemplate[any]{},
		"AWS::IoT::Logging":                                                &iot.Logging[any]{},
		"AWS::IoT::MitigationAction":                                       &iot.MitigationAction[any]{},
		"AWS::IoT::Policy":                                                 &iot.Policy[any]{},
		"AWS::IoT::PolicyPrincipalAttachment":                              &iot.PolicyPrincipalAttachment[any]{},
		"AWS::IoT::ProvisioningTemplate":                                   &iot.ProvisioningTemplate[any]{},
		"AWS::IoT::ResourceSpecificLogging":                                &iot.ResourceSpecificLogging[any]{},
		"AWS::IoT::RoleAlias":                                              &iot.RoleAlias[any]{},
		"AWS::IoT::ScheduledAudit":                                         &iot.ScheduledAudit[any]{},
		"AWS::IoT::SecurityProfile":                                        &iot.SecurityProfile[any]{},
		"AWS::IoT::Thing":                                                  &iot.Thing[any]{},
		"AWS::IoT::ThingGroup":                                             &iot.ThingGroup[any]{},
		"AWS::IoT::ThingPrincipalAttachment":                               &iot.ThingPrincipalAttachment[any]{},
		"AWS::IoT::ThingType":                                              &iot.ThingType[any]{},
		"AWS::IoT::TopicRule":                                              &iot.TopicRule[any]{},
		"AWS::IoT::TopicRuleDestination":                                   &iot.TopicRuleDestination[any]{},
		"AWS::IoTAnalytics::Channel":                                       &iotanalytics.Channel[any]{},
		"AWS::IoTAnalytics::Dataset":                                       &iotanalytics.Dataset[any]{},
		"AWS::IoTAnalytics::Datastore":                                     &iotanalytics.Datastore[any]{},
		"AWS::IoTAnalytics::Pipeline":                                      &iotanalytics.Pipeline[any]{},
		"AWS::IoTCoreDeviceAdvisor::SuiteDefinition":                       &iotcoredeviceadvisor.SuiteDefinition[any]{},
		"AWS::IoTEvents::AlarmModel":                                       &iotevents.AlarmModel[any]{},
		"AWS::IoTEvents::DetectorModel":                                    &iotevents.DetectorModel[any]{},
		"AWS::IoTEvents::Input":                                            &iotevents.Input[any]{},
		"AWS::IoTFleetHub::Application":                                    &iotfleethub.Application[any]{},
		"AWS::IoTFleetWise::Campaign":                                      &iotfleetwise.Campaign[any]{},
		"AWS::IoTFleetWise::DecoderManifest":                               &iotfleetwise.DecoderManifest[any]{},
		"AWS::IoTFleetWise::Fleet":                                         &iotfleetwise.Fleet[any]{},
		"AWS::IoTFleetWise::ModelManifest":                                 &iotfleetwise.ModelManifest[any]{},
		"AWS::IoTFleetWise::SignalCatalog":                                 &iotfleetwise.SignalCatalog[any]{},
		"AWS::IoTFleetWise::Vehicle":                                       &iotfleetwise.Vehicle[any]{},
		"AWS::IoTSiteWise::AccessPolicy":                                   &iotsitewise.AccessPolicy[any]{},
		"AWS::IoTSiteWise::Asset":                                          &iotsitewise.Asset[any]{},
		"AWS::IoTSiteWise::AssetModel":                                     &iotsitewise.AssetModel[any]{},
		"AWS::IoTSiteWise::Dashboard":                                      &iotsitewise.Dashboard[any]{},
		"AWS::IoTSiteWise::Gateway":                                        &iotsitewise.Gateway[any]{},
		"AWS::IoTSiteWise::Portal":                                         &iotsitewise.Portal[any]{},
		"AWS::IoTSiteWise::Project":                                        &iotsitewise.Project[any]{},
		"AWS::IoTThingsGraph::FlowTemplate":                                &iotthingsgraph.FlowTemplate[any]{},
		"AWS::IoTTwinMaker::ComponentType":                                 &iottwinmaker.ComponentType[any]{},
		"AWS::IoTTwinMaker::Entity":                                        &iottwinmaker.Entity[any]{},
		"AWS::IoTTwinMaker::Scene":                                         &iottwinmaker.Scene[any]{},
		"AWS::IoTTwinMaker::SyncJob":                                       &iottwinmaker.SyncJob[any]{},
		"AWS::IoTTwinMaker::Workspace":                                     &iottwinmaker.Workspace[any]{},
		"AWS::IoTWireless::Destination":                                    &iotwireless.Destination[any]{},
		"AWS::IoTWireless::DeviceProfile":                                  &iotwireless.DeviceProfile[any]{},
		"AWS::IoTWireless::FuotaTask":                                      &iotwireless.FuotaTask[any]{},
		"AWS::IoTWireless::MulticastGroup":                                 &iotwireless.MulticastGroup[any]{},
		"AWS::IoTWireless::NetworkAnalyzerConfiguration":                   &iotwireless.NetworkAnalyzerConfiguration[any]{},
		"AWS::IoTWireless::PartnerAccount":                                 &iotwireless.PartnerAccount[any]{},
		"AWS::IoTWireless::ServiceProfile":                                 &iotwireless.ServiceProfile[any]{},
		"AWS::IoTWireless::TaskDefinition":                                 &iotwireless.TaskDefinition[any]{},
		"AWS::IoTWireless::WirelessDevice":                                 &iotwireless.WirelessDevice[any]{},
		"AWS::IoTWireless::WirelessDeviceImportTask":                       &iotwireless.WirelessDeviceImportTask[any]{},
		"AWS::IoTWireless::WirelessGateway":                                &iotwireless.WirelessGateway[any]{},
		"AWS::KMS::Alias":                                                  &kms.Alias[any]{},
		"AWS::KMS::Key":                                                    &kms.Key[any]{},
		"AWS::KMS::ReplicaKey":                                             &kms.ReplicaKey[any]{},
		"AWS::KafkaConnect::Connector":                                     &kafkaconnect.Connector[any]{},
		"AWS::Kendra::DataSource":                                          &kendra.DataSource[any]{},
		"AWS::Kendra::Faq":                                                 &kendra.Faq[any]{},
		"AWS::Kendra::Index":                                               &kendra.Index[any]{},
		"AWS::KendraRanking::ExecutionPlan":                                &kendraranking.ExecutionPlan[any]{},
		"AWS::Kinesis::Stream":                                             &kinesis.Stream[any]{},
		"AWS::Kinesis::StreamConsumer":                                     &kinesis.StreamConsumer[any]{},
		"AWS::KinesisAnalytics::Application":                               &kinesisanalytics.Application[any]{},
		"AWS::KinesisAnalytics::ApplicationOutput":                         &kinesisanalytics.ApplicationOutput[any]{},
		"AWS::KinesisAnalytics::ApplicationReferenceDataSource":            &kinesisanalytics.ApplicationReferenceDataSource[any]{},
		"AWS::KinesisAnalyticsV2::Application":                             &kinesisanalyticsv2.Application[any]{},
		"AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption":      &kinesisanalyticsv2.ApplicationCloudWatchLoggingOption[any]{},
		"AWS::KinesisAnalyticsV2::ApplicationOutput":                       &kinesisanalyticsv2.ApplicationOutput[any]{},
		"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource":          &kinesisanalyticsv2.ApplicationReferenceDataSource[any]{},
		"AWS::KinesisFirehose::DeliveryStream":                             &kinesisfirehose.DeliveryStream[any]{},
		"AWS::KinesisVideo::SignalingChannel":                              &kinesisvideo.SignalingChannel[any]{},
		"AWS::KinesisVideo::Stream":                                        &kinesisvideo.Stream[any]{},
		"AWS::LakeFormation::DataCellsFilter":                              &lakeformation.DataCellsFilter[any]{},
		"AWS::LakeFormation::DataLakeSettings":                             &lakeformation.DataLakeSettings[any]{},
		"AWS::LakeFormation::Permissions":                                  &lakeformation.Permissions[any]{},
		"AWS::LakeFormation::PrincipalPermissions":                         &lakeformation.PrincipalPermissions[any]{},
		"AWS::LakeFormation::Resource":                                     &lakeformation.Resource[any]{},
		"AWS::LakeFormation::Tag":                                          &lakeformation.Tag[any]{},
		"AWS::LakeFormation::TagAssociation":                               &lakeformation.TagAssociation[any]{},
		"AWS::Lambda::Alias":                                               &lambda.Alias[any]{},
		"AWS::Lambda::CodeSigningConfig":                                   &lambda.CodeSigningConfig[any]{},
		"AWS::Lambda::EventInvokeConfig":                                   &lambda.EventInvokeConfig[any]{},
		"AWS::Lambda::EventSourceMapping":                                  &lambda.EventSourceMapping[any]{},
		"AWS::Lambda::Function":                                            &lambda.Function[any]{},
		"AWS::Lambda::LayerVersion":                                        &lambda.LayerVersion[any]{},
		"AWS::Lambda::LayerVersionPermission":                              &lambda.LayerVersionPermission[any]{},
		"AWS::Lambda::Permission":                                          &lambda.Permission[any]{},
		"AWS::Lambda::Url":                                                 &lambda.Url[any]{},
		"AWS::Lambda::Version":                                             &lambda.Version[any]{},
		"AWS::Lex::Bot":                                                    &lex.Bot[any]{},
		"AWS::Lex::BotAlias":                                               &lex.BotAlias[any]{},
		"AWS::Lex::BotVersion":                                             &lex.BotVersion[any]{},
		"AWS::Lex::ResourcePolicy":                                         &lex.ResourcePolicy[any]{},
		"AWS::LicenseManager::Grant":                                       &licensemanager.Grant[any]{},
		"AWS::LicenseManager::License":                                     &licensemanager.License[any]{},
		"AWS::Lightsail::Alarm":                                            &lightsail.Alarm[any]{},
		"AWS::Lightsail::Bucket":                                           &lightsail.Bucket[any]{},
		"AWS::Lightsail::Certificate":                                      &lightsail.Certificate[any]{},
		"AWS::Lightsail::Container":                                        &lightsail.Container[any]{},
		"AWS::Lightsail::Database":                                         &lightsail.Database[any]{},
		"AWS::Lightsail::Disk":                                             &lightsail.Disk[any]{},
		"AWS::Lightsail::Distribution":                                     &lightsail.Distribution[any]{},
		"AWS::Lightsail::Instance":                                         &lightsail.Instance[any]{},
		"AWS::Lightsail::LoadBalancer":                                     &lightsail.LoadBalancer[any]{},
		"AWS::Lightsail::LoadBalancerTlsCertificate":                       &lightsail.LoadBalancerTlsCertificate[any]{},
		"AWS::Lightsail::StaticIp":                                         &lightsail.StaticIp[any]{},
		"AWS::Location::GeofenceCollection":                                &location.GeofenceCollection[any]{},
		"AWS::Location::Map":                                               &location.Map[any]{},
		"AWS::Location::PlaceIndex":                                        &location.PlaceIndex[any]{},
		"AWS::Location::RouteCalculator":                                   &location.RouteCalculator[any]{},
		"AWS::Location::Tracker":                                           &location.Tracker[any]{},
		"AWS::Location::TrackerConsumer":                                   &location.TrackerConsumer[any]{},
		"AWS::Logs::Destination":                                           &logs.Destination[any]{},
		"AWS::Logs::LogGroup":                                              &logs.LogGroup[any]{},
		"AWS::Logs::LogStream":                                             &logs.LogStream[any]{},
		"AWS::Logs::MetricFilter":                                          &logs.MetricFilter[any]{},
		"AWS::Logs::QueryDefinition":                                       &logs.QueryDefinition[any]{},
		"AWS::Logs::ResourcePolicy":                                        &logs.ResourcePolicy[any]{},
		"AWS::Logs::SubscriptionFilter":                                    &logs.SubscriptionFilter[any]{},
		"AWS::LookoutEquipment::InferenceScheduler":                        &lookoutequipment.InferenceScheduler[any]{},
		"AWS::LookoutMetrics::Alert":                                       &lookoutmetrics.Alert[any]{},
		"AWS::LookoutMetrics::AnomalyDetector":                             &lookoutmetrics.AnomalyDetector[any]{},
		"AWS::LookoutVision::Project":                                      &lookoutvision.Project[any]{},
		"AWS::M2::Application":                                             &m2.Application[any]{},
		"AWS::M2::Environment":                                             &m2.Environment[any]{},
		"AWS::MSK::BatchScramSecret":                                       &msk.BatchScramSecret[any]{},
		"AWS::MSK::Cluster":                                                &msk.Cluster[any]{},
		"AWS::MSK::ClusterPolicy":                                          &msk.ClusterPolicy[any]{},
		"AWS::MSK::Configuration":                                          &msk.Configuration[any]{},
		"AWS::MSK::ServerlessCluster":                                      &msk.ServerlessCluster[any]{},
		"AWS::MSK::VpcConnection":                                          &msk.VpcConnection[any]{},
		"AWS::MWAA::Environment":                                           &mwaa.Environment[any]{},
		"AWS::Macie::AllowList":                                            &macie.AllowList[any]{},
		"AWS::Macie::CustomDataIdentifier":                                 &macie.CustomDataIdentifier[any]{},
		"AWS::Macie::FindingsFilter":                                       &macie.FindingsFilter[any]{},
		"AWS::Macie::Session":                                              &macie.Session[any]{},
		"AWS::ManagedBlockchain::Accessor":                                 &managedblockchain.Accessor[any]{},
		"AWS::ManagedBlockchain::Member":                                   &managedblockchain.Member[any]{},
		"AWS::ManagedBlockchain::Node":                                     &managedblockchain.Node[any]{},
		"AWS::MediaConnect::Flow":                                          &mediaconnect.Flow[any]{},
		"AWS::MediaConnect::FlowEntitlement":                               &mediaconnect.FlowEntitlement[any]{},
		"AWS::MediaConnect::FlowOutput":                                    &mediaconnect.FlowOutput[any]{},
		"AWS::MediaConnect::FlowSource":                                    &mediaconnect.FlowSource[any]{},
		"AWS::MediaConnect::FlowVpcInterface":                              &mediaconnect.FlowVpcInterface[any]{},
		"AWS::MediaConvert::JobTemplate":                                   &mediaconvert.JobTemplate[any]{},
		"AWS::MediaConvert::Preset":                                        &mediaconvert.Preset[any]{},
		"AWS::MediaConvert::Queue":                                         &mediaconvert.Queue[any]{},
		"AWS::MediaLive::Channel":                                          &medialive.Channel[any]{},
		"AWS::MediaLive::Input":                                            &medialive.Input[any]{},
		"AWS::MediaLive::InputSecurityGroup":                               &medialive.InputSecurityGroup[any]{},
		"AWS::MediaPackage::Asset":                                         &mediapackage.Asset[any]{},
		"AWS::MediaPackage::Channel":                                       &mediapackage.Channel[any]{},
		"AWS::MediaPackage::OriginEndpoint":                                &mediapackage.OriginEndpoint[any]{},
		"AWS::MediaPackage::PackagingConfiguration":                        &mediapackage.PackagingConfiguration[any]{},
		"AWS::MediaPackage::PackagingGroup":                                &mediapackage.PackagingGroup[any]{},
		"AWS::MediaStore::Container":                                       &mediastore.Container[any]{},
		"AWS::MediaTailor::PlaybackConfiguration":                          &mediatailor.PlaybackConfiguration[any]{},
		"AWS::MemoryDB::ACL":                                               &memorydb.ACL[any]{},
		"AWS::MemoryDB::Cluster":                                           &memorydb.Cluster[any]{},
		"AWS::MemoryDB::ParameterGroup":                                    &memorydb.ParameterGroup[any]{},
		"AWS::MemoryDB::SubnetGroup":                                       &memorydb.SubnetGroup[any]{},
		"AWS::MemoryDB::User":                                              &memorydb.User[any]{},
		"AWS::Neptune::DBCluster":                                          &neptune.DBCluster[any]{},
		"AWS::Neptune::DBClusterParameterGroup":                            &neptune.DBClusterParameterGroup[any]{},
		"AWS::Neptune::DBInstance":                                         &neptune.DBInstance[any]{},
		"AWS::Neptune::DBParameterGroup":                                   &neptune.DBParameterGroup[any]{},
		"AWS::Neptune::DBSubnetGroup":                                      &neptune.DBSubnetGroup[any]{},
		"AWS::NetworkFirewall::Firewall":                                   &networkfirewall.Firewall[any]{},
		"AWS::NetworkFirewall::FirewallPolicy":                             &networkfirewall.FirewallPolicy[any]{},
		"AWS::NetworkFirewall::LoggingConfiguration":                       &networkfirewall.LoggingConfiguration[any]{},
		"AWS::NetworkFirewall::RuleGroup":                                  &networkfirewall.RuleGroup[any]{},
		"AWS::NetworkManager::ConnectAttachment":                           &networkmanager.ConnectAttachment[any]{},
		"AWS::NetworkManager::ConnectPeer":                                 &networkmanager.ConnectPeer[any]{},
		"AWS::NetworkManager::CoreNetwork":                                 &networkmanager.CoreNetwork[any]{},
		"AWS::NetworkManager::CustomerGatewayAssociation":                  &networkmanager.CustomerGatewayAssociation[any]{},
		"AWS::NetworkManager::Device":                                      &networkmanager.Device[any]{},
		"AWS::NetworkManager::GlobalNetwork":                               &networkmanager.GlobalNetwork[any]{},
		"AWS::NetworkManager::Link":                                        &networkmanager.Link[any]{},
		"AWS::NetworkManager::LinkAssociation":                             &networkmanager.LinkAssociation[any]{},
		"AWS::NetworkManager::Site":                                        &networkmanager.Site[any]{},
		"AWS::NetworkManager::SiteToSiteVpnAttachment":                     &networkmanager.SiteToSiteVpnAttachment[any]{},
		"AWS::NetworkManager::TransitGatewayPeering":                       &networkmanager.TransitGatewayPeering[any]{},
		"AWS::NetworkManager::TransitGatewayRegistration":                  &networkmanager.TransitGatewayRegistration[any]{},
		"AWS::NetworkManager::TransitGatewayRouteTableAttachment":          &networkmanager.TransitGatewayRouteTableAttachment[any]{},
		"AWS::NetworkManager::VpcAttachment":                               &networkmanager.VpcAttachment[any]{},
		"AWS::NimbleStudio::LaunchProfile":                                 &nimblestudio.LaunchProfile[any]{},
		"AWS::NimbleStudio::StreamingImage":                                &nimblestudio.StreamingImage[any]{},
		"AWS::NimbleStudio::Studio":                                        &nimblestudio.Studio[any]{},
		"AWS::NimbleStudio::StudioComponent":                               &nimblestudio.StudioComponent[any]{},
		"AWS::OSIS::Pipeline":                                              &osis.Pipeline[any]{},
		"AWS::Oam::Link":                                                   &oam.Link[any]{},
		"AWS::Oam::Sink":                                                   &oam.Sink[any]{},
		"AWS::Omics::AnnotationStore":                                      &omics.AnnotationStore[any]{},
		"AWS::Omics::ReferenceStore":                                       &omics.ReferenceStore[any]{},
		"AWS::Omics::RunGroup":                                             &omics.RunGroup[any]{},
		"AWS::Omics::SequenceStore":                                        &omics.SequenceStore[any]{},
		"AWS::Omics::VariantStore":                                         &omics.VariantStore[any]{},
		"AWS::Omics::Workflow":                                             &omics.Workflow[any]{},
		"AWS::OpenSearchServerless::AccessPolicy":                          &opensearchserverless.AccessPolicy[any]{},
		"AWS::OpenSearchServerless::Collection":                            &opensearchserverless.Collection[any]{},
		"AWS::OpenSearchServerless::SecurityConfig":                        &opensearchserverless.SecurityConfig[any]{},
		"AWS::OpenSearchServerless::SecurityPolicy":                        &opensearchserverless.SecurityPolicy[any]{},
		"AWS::OpenSearchServerless::VpcEndpoint":                           &opensearchserverless.VpcEndpoint[any]{},
		"AWS::OpenSearchService::Domain":                                   &opensearchservice.Domain[any]{},
		"AWS::OpsWorks::App":                                               &opsworks.App[any]{},
		"AWS::OpsWorks::ElasticLoadBalancerAttachment":                     &opsworks.ElasticLoadBalancerAttachment[any]{},
		"AWS::OpsWorks::Instance":                                          &opsworks.Instance[any]{},
		"AWS::OpsWorks::Layer":                                             &opsworks.Layer[any]{},
		"AWS::OpsWorks::Stack":                                             &opsworks.Stack[any]{},
		"AWS::OpsWorks::UserProfile":                                       &opsworks.UserProfile[any]{},
		"AWS::OpsWorks::Volume":                                            &opsworks.Volume[any]{},
		"AWS::OpsWorksCM::Server":                                          &opsworkscm.Server[any]{},
		"AWS::Organizations::Account":                                      &organizations.Account[any]{},
		"AWS::Organizations::OrganizationalUnit":                           &organizations.OrganizationalUnit[any]{},
		"AWS::Organizations::Policy":                                       &organizations.Policy[any]{},
		"AWS::Organizations::ResourcePolicy":                               &organizations.ResourcePolicy[any]{},
		"AWS::Panorama::ApplicationInstance":                               &panorama.ApplicationInstance[any]{},
		"AWS::Panorama::Package":                                           &panorama.Package[any]{},
		"AWS::Panorama::PackageVersion":                                    &panorama.PackageVersion[any]{},
		"AWS::Personalize::Dataset":                                        &personalize.Dataset[any]{},
		"AWS::Personalize::DatasetGroup":                                   &personalize.DatasetGroup[any]{},
		"AWS::Personalize::Schema":                                         &personalize.Schema[any]{},
		"AWS::Personalize::Solution":                                       &personalize.Solution[any]{},
		"AWS::Pinpoint::ADMChannel":                                        &pinpoint.ADMChannel[any]{},
		"AWS::Pinpoint::APNSChannel":                                       &pinpoint.APNSChannel[any]{},
		"AWS::Pinpoint::APNSSandboxChannel":                                &pinpoint.APNSSandboxChannel[any]{},
		"AWS::Pinpoint::APNSVoipChannel":                                   &pinpoint.APNSVoipChannel[any]{},
		"AWS::Pinpoint::APNSVoipSandboxChannel":                            &pinpoint.APNSVoipSandboxChannel[any]{},
		"AWS::Pinpoint::App":                                               &pinpoint.App[any]{},
		"AWS::Pinpoint::ApplicationSettings":                               &pinpoint.ApplicationSettings[any]{},
		"AWS::Pinpoint::BaiduChannel":                                      &pinpoint.BaiduChannel[any]{},
		"AWS::Pinpoint::Campaign":                                          &pinpoint.Campaign[any]{},
		"AWS::Pinpoint::EmailChannel":                                      &pinpoint.EmailChannel[any]{},
		"AWS::Pinpoint::EmailTemplate":                                     &pinpoint.EmailTemplate[any]{},
		"AWS::Pinpoint::EventStream":                                       &pinpoint.EventStream[any]{},
		"AWS::Pinpoint::GCMChannel":                                        &pinpoint.GCMChannel[any]{},
		"AWS::Pinpoint::InAppTemplate":                                     &pinpoint.InAppTemplate[any]{},
		"AWS::Pinpoint::PushTemplate":                                      &pinpoint.PushTemplate[any]{},
		"AWS::Pinpoint::SMSChannel":                                        &pinpoint.SMSChannel[any]{},
		"AWS::Pinpoint::Segment":                                           &pinpoint.Segment[any]{},
		"AWS::Pinpoint::SmsTemplate":                                       &pinpoint.SmsTemplate[any]{},
		"AWS::Pinpoint::VoiceChannel":                                      &pinpoint.VoiceChannel[any]{},
		"AWS::PinpointEmail::ConfigurationSet":                             &pinpointemail.ConfigurationSet[any]{},
		"AWS::PinpointEmail::ConfigurationSetEventDestination":             &pinpointemail.ConfigurationSetEventDestination[any]{},
		"AWS::PinpointEmail::DedicatedIpPool":                              &pinpointemail.DedicatedIpPool[any]{},
		"AWS::PinpointEmail::Identity":                                     &pinpointemail.Identity[any]{},
		"AWS::Pipes::Pipe":                                                 &pipes.Pipe[any]{},
		"AWS::Proton::EnvironmentAccountConnection":                        &proton.EnvironmentAccountConnection[any]{},
		"AWS::Proton::EnvironmentTemplate":                                 &proton.EnvironmentTemplate[any]{},
		"AWS::Proton::ServiceTemplate":                                     &proton.ServiceTemplate[any]{},
		"AWS::QLDB::Ledger":                                                &qldb.Ledger[any]{},
		"AWS::QLDB::Stream":                                                &qldb.Stream[any]{},
		"AWS::QuickSight::Analysis":                                        &quicksight.Analysis[any]{},
		"AWS::QuickSight::Dashboard":                                       &quicksight.Dashboard[any]{},
		"AWS::QuickSight::DataSet":                                         &quicksight.DataSet[any]{},
		"AWS::QuickSight::DataSource":                                      &quicksight.DataSource[any]{},
		"AWS::QuickSight::RefreshSchedule":                                 &quicksight.RefreshSchedule[any]{},
		"AWS::QuickSight::Template":                                        &quicksight.Template[any]{},
		"AWS::QuickSight::Theme":                                           &quicksight.Theme[any]{},
		"AWS::QuickSight::Topic":                                           &quicksight.Topic[any]{},
		"AWS::QuickSight::VPCConnection":                                   &quicksight.VPCConnection[any]{},
		"AWS::RAM::Permission":                                             &ram.Permission[any]{},
		"AWS::RAM::ResourceShare":                                          &ram.ResourceShare[any]{},
		"AWS::RDS::DBCluster":                                              &rds.DBCluster[any]{},
		"AWS::RDS::DBClusterParameterGroup":                                &rds.DBClusterParameterGroup[any]{},
		"AWS::RDS::DBInstance":                                             &rds.DBInstance[any]{},
		"AWS::RDS::DBParameterGroup":                                       &rds.DBParameterGroup[any]{},
		"AWS::RDS::DBProxy":                                                &rds.DBProxy[any]{},
		"AWS::RDS::DBProxyEndpoint":                                        &rds.DBProxyEndpoint[any]{},
		"AWS::RDS::DBProxyTargetGroup":                                     &rds.DBProxyTargetGroup[any]{},
		"AWS::RDS::DBSecurityGroup":                                        &rds.DBSecurityGroup[any]{},
		"AWS::RDS::DBSecurityGroupIngress":                                 &rds.DBSecurityGroupIngress[any]{},
		"AWS::RDS::DBSubnetGroup":                                          &rds.DBSubnetGroup[any]{},
		"AWS::RDS::EventSubscription":                                      &rds.EventSubscription[any]{},
		"AWS::RDS::GlobalCluster":                                          &rds.GlobalCluster[any]{},
		"AWS::RDS::OptionGroup":                                            &rds.OptionGroup[any]{},
		"AWS::RUM::AppMonitor":                                             &rum.AppMonitor[any]{},
		"AWS::Redshift::Cluster":                                           &redshift.Cluster[any]{},
		"AWS::Redshift::ClusterParameterGroup":                             &redshift.ClusterParameterGroup[any]{},
		"AWS::Redshift::ClusterSecurityGroup":                              &redshift.ClusterSecurityGroup[any]{},
		"AWS::Redshift::ClusterSecurityGroupIngress":                       &redshift.ClusterSecurityGroupIngress[any]{},
		"AWS::Redshift::ClusterSubnetGroup":                                &redshift.ClusterSubnetGroup[any]{},
		"AWS::Redshift::EndpointAccess":                                    &redshift.EndpointAccess[any]{},
		"AWS::Redshift::EndpointAuthorization":                             &redshift.EndpointAuthorization[any]{},
		"AWS::Redshift::EventSubscription":                                 &redshift.EventSubscription[any]{},
		"AWS::Redshift::ScheduledAction":                                   &redshift.ScheduledAction[any]{},
		"AWS::RedshiftServerless::Namespace":                               &redshiftserverless.Namespace[any]{},
		"AWS::RedshiftServerless::Workgroup":                               &redshiftserverless.Workgroup[any]{},
		"AWS::RefactorSpaces::Application":                                 &refactorspaces.Application[any]{},
		"AWS::RefactorSpaces::Environment":                                 &refactorspaces.Environment[any]{},
		"AWS::RefactorSpaces::Route":                                       &refactorspaces.Route[any]{},
		"AWS::RefactorSpaces::Service":                                     &refactorspaces.Service[any]{},
		"AWS::Rekognition::Collection":                                     &rekognition.Collection[any]{},
		"AWS::Rekognition::Project":                                        &rekognition.Project[any]{},
		"AWS::Rekognition::StreamProcessor":                                &rekognition.StreamProcessor[any]{},
		"AWS::ResilienceHub::App":                                          &resiliencehub.App[any]{},
		"AWS::ResilienceHub::ResiliencyPolicy":                             &resiliencehub.ResiliencyPolicy[any]{},
		"AWS::ResourceExplorer2::DefaultViewAssociation":                   &resourceexplorer2.DefaultViewAssociation[any]{},
		"AWS::ResourceExplorer2::Index":                                    &resourceexplorer2.Index[any]{},
		"AWS::ResourceExplorer2::View":                                     &resourceexplorer2.View[any]{},
		"AWS::ResourceGroups::Group":                                       &resourcegroups.Group[any]{},
		"AWS::RoboMaker::Fleet":                                            &robomaker.Fleet[any]{},
		"AWS::RoboMaker::Robot":                                            &robomaker.Robot[any]{},
		"AWS::RoboMaker::RobotApplication":                                 &robomaker.RobotApplication[any]{},
		"AWS::RoboMaker::RobotApplicationVersion":                          &robomaker.RobotApplicationVersion[any]{},
		"AWS::RoboMaker::SimulationApplication":                            &robomaker.SimulationApplication[any]{},
		"AWS::RoboMaker::SimulationApplicationVersion":                     &robomaker.SimulationApplicationVersion[any]{},
		"AWS::RolesAnywhere::CRL":                                          &rolesanywhere.CRL[any]{},
		"AWS::RolesAnywhere::Profile":                                      &rolesanywhere.Profile[any]{},
		"AWS::RolesAnywhere::TrustAnchor":                                  &rolesanywhere.TrustAnchor[any]{},
		"AWS::Route53::CidrCollection":                                     &route53.CidrCollection[any]{},
		"AWS::Route53::DNSSEC":                                             &route53.DNSSEC[any]{},
		"AWS::Route53::HealthCheck":                                        &route53.HealthCheck[any]{},
		"AWS::Route53::HostedZone":                                         &route53.HostedZone[any]{},
		"AWS::Route53::KeySigningKey":                                      &route53.KeySigningKey[any]{},
		"AWS::Route53::RecordSet":                                          &route53.RecordSet[any]{},
		"AWS::Route53::RecordSetGroup":                                     &route53.RecordSetGroup[any]{},
		"AWS::Route53RecoveryControl::Cluster":                             &route53recoverycontrol.Cluster[any]{},
		"AWS::Route53RecoveryControl::ControlPanel":                        &route53recoverycontrol.ControlPanel[any]{},
		"AWS::Route53RecoveryControl::RoutingControl":                      &route53recoverycontrol.RoutingControl[any]{},
		"AWS::Route53RecoveryControl::SafetyRule":                          &route53recoverycontrol.SafetyRule[any]{},
		"AWS::Route53RecoveryReadiness::Cell":                              &route53recoveryreadiness.Cell[any]{},
		"AWS::Route53RecoveryReadiness::ReadinessCheck":                    &route53recoveryreadiness.ReadinessCheck[any]{},
		"AWS::Route53RecoveryReadiness::RecoveryGroup":                     &route53recoveryreadiness.RecoveryGroup[any]{},
		"AWS::Route53RecoveryReadiness::ResourceSet":                       &route53recoveryreadiness.ResourceSet[any]{},
		"AWS::Route53Resolver::FirewallDomainList":                         &route53resolver.FirewallDomainList[any]{},
		"AWS::Route53Resolver::FirewallRuleGroup":                          &route53resolver.FirewallRuleGroup[any]{},
		"AWS::Route53Resolver::FirewallRuleGroupAssociation":               &route53resolver.FirewallRuleGroupAssociation[any]{},
		"AWS::Route53Resolver::ResolverConfig":                             &route53resolver.ResolverConfig[any]{},
		"AWS::Route53Resolver::ResolverDNSSECConfig":                       &route53resolver.ResolverDNSSECConfig[any]{},
		"AWS::Route53Resolver::ResolverEndpoint":                           &route53resolver.ResolverEndpoint[any]{},
		"AWS::Route53Resolver::ResolverQueryLoggingConfig":                 &route53resolver.ResolverQueryLoggingConfig[any]{},
		"AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation":      &route53resolver.ResolverQueryLoggingConfigAssociation[any]{},
		"AWS::Route53Resolver::ResolverRule":                               &route53resolver.ResolverRule[any]{},
		"AWS::Route53Resolver::ResolverRuleAssociation":                    &route53resolver.ResolverRuleAssociation[any]{},
		"AWS::S3::AccessPoint":                                             &s3.AccessPoint[any]{},
		"AWS::S3::Bucket":                                                  &s3.Bucket[any]{},
		"AWS::S3::BucketPolicy":                                            &s3.BucketPolicy[any]{},
		"AWS::S3::MultiRegionAccessPoint":                                  &s3.MultiRegionAccessPoint[any]{},
		"AWS::S3::MultiRegionAccessPointPolicy":                            &s3.MultiRegionAccessPointPolicy[any]{},
		"AWS::S3::StorageLens":                                             &s3.StorageLens[any]{},
		"AWS::S3ObjectLambda::AccessPoint":                                 &s3objectlambda.AccessPoint[any]{},
		"AWS::S3ObjectLambda::AccessPointPolicy":                           &s3objectlambda.AccessPointPolicy[any]{},
		"AWS::S3Outposts::AccessPoint":                                     &s3outposts.AccessPoint[any]{},
		"AWS::S3Outposts::Bucket":                                          &s3outposts.Bucket[any]{},
		"AWS::S3Outposts::BucketPolicy":                                    &s3outposts.BucketPolicy[any]{},
		"AWS::S3Outposts::Endpoint":                                        &s3outposts.Endpoint[any]{},
		"AWS::SDB::Domain":                                                 &sdb.Domain[any]{},
		"AWS::SES::ConfigurationSet":                                       &ses.ConfigurationSet[any]{},
		"AWS::SES::ConfigurationSetEventDestination":                       &ses.ConfigurationSetEventDestination[any]{},
		"AWS::SES::ContactList":                                            &ses.ContactList[any]{},
		"AWS::SES::DedicatedIpPool":                                        &ses.DedicatedIpPool[any]{},
		"AWS::SES::EmailIdentity":                                          &ses.EmailIdentity[any]{},
		"AWS::SES::ReceiptFilter":                                          &ses.ReceiptFilter[any]{},
		"AWS::SES::ReceiptRule":                                            &ses.ReceiptRule[any]{},
		"AWS::SES::ReceiptRuleSet":                                         &ses.ReceiptRuleSet[any]{},
		"AWS::SES::Template":                                               &ses.Template[any]{},
		"AWS::SES::VdmAttributes":                                          &ses.VdmAttributes[any]{},
		"AWS::SNS::Subscription":                                           &sns.Subscription[any]{},
		"AWS::SNS::Topic":                                                  &sns.Topic[any]{},
		"AWS::SNS::TopicPolicy":                                            &sns.TopicPolicy[any]{},
		"AWS::SQS::Queue":                                                  &sqs.Queue[any]{},
		"AWS::SQS::QueuePolicy":                                            &sqs.QueuePolicy[any]{},
		"AWS::SSM::Association":                                            &ssm.Association[any]{},
		"AWS::SSM::Document":                                               &ssm.Document[any]{},
		"AWS::SSM::MaintenanceWindow":                                      &ssm.MaintenanceWindow[any]{},
		"AWS::SSM::MaintenanceWindowTarget":                                &ssm.MaintenanceWindowTarget[any]{},
		"AWS::SSM::MaintenanceWindowTask":                                  &ssm.MaintenanceWindowTask[any]{},
		"AWS::SSM::Parameter":                                              &ssm.Parameter[any]{},
		"AWS::SSM::PatchBaseline":                                          &ssm.PatchBaseline[any]{},
		"AWS::SSM::ResourceDataSync":                                       &ssm.ResourceDataSync[any]{},
		"AWS::SSM::ResourcePolicy":                                         &ssm.ResourcePolicy[any]{},
		"AWS::SSMContacts::Contact":                                        &ssmcontacts.Contact[any]{},
		"AWS::SSMContacts::ContactChannel":                                 &ssmcontacts.ContactChannel[any]{},
		"AWS::SSMContacts::Plan":                                           &ssmcontacts.Plan[any]{},
		"AWS::SSMContacts::Rotation":                                       &ssmcontacts.Rotation[any]{},
		"AWS::SSMIncidents::ReplicationSet":                                &ssmincidents.ReplicationSet[any]{},
		"AWS::SSMIncidents::ResponsePlan":                                  &ssmincidents.ResponsePlan[any]{},
		"AWS::SSO::Assignment":                                             &sso.Assignment[any]{},
		"AWS::SSO::InstanceAccessControlAttributeConfiguration":            &sso.InstanceAccessControlAttributeConfiguration[any]{},
		"AWS::SSO::PermissionSet":                                          &sso.PermissionSet[any]{},
		"AWS::SageMaker::App":                                              &sagemaker.App[any]{},
		"AWS::SageMaker::AppImageConfig":                                   &sagemaker.AppImageConfig[any]{},
		"AWS::SageMaker::CodeRepository":                                   &sagemaker.CodeRepository[any]{},
		"AWS::SageMaker::DataQualityJobDefinition":                         &sagemaker.DataQualityJobDefinition[any]{},
		"AWS::SageMaker::Device":                                           &sagemaker.Device[any]{},
		"AWS::SageMaker::DeviceFleet":                                      &sagemaker.DeviceFleet[any]{},
		"AWS::SageMaker::Domain":                                           &sagemaker.Domain[any]{},
		"AWS::SageMaker::Endpoint":                                         &sagemaker.Endpoint[any]{},
		"AWS::SageMaker::EndpointConfig":                                   &sagemaker.EndpointConfig[any]{},
		"AWS::SageMaker::FeatureGroup":                                     &sagemaker.FeatureGroup[any]{},
		"AWS::SageMaker::Image":                                            &sagemaker.Image[any]{},
		"AWS::SageMaker::ImageVersion":                                     &sagemaker.ImageVersion[any]{},
		"AWS::SageMaker::InferenceExperiment":                              &sagemaker.InferenceExperiment[any]{},
		"AWS::SageMaker::Model":                                            &sagemaker.Model[any]{},
		"AWS::SageMaker::ModelBiasJobDefinition":                           &sagemaker.ModelBiasJobDefinition[any]{},
		"AWS::SageMaker::ModelCard":                                        &sagemaker.ModelCard[any]{},
		"AWS::SageMaker::ModelExplainabilityJobDefinition":                 &sagemaker.ModelExplainabilityJobDefinition[any]{},
		"AWS::SageMaker::ModelPackage":                                     &sagemaker.ModelPackage[any]{},
		"AWS::SageMaker::ModelPackageGroup":                                &sagemaker.ModelPackageGroup[any]{},
		"AWS::SageMaker::ModelQualityJobDefinition":                        &sagemaker.ModelQualityJobDefinition[any]{},
		"AWS::SageMaker::MonitoringSchedule":                               &sagemaker.MonitoringSchedule[any]{},
		"AWS::SageMaker::NotebookInstance":                                 &sagemaker.NotebookInstance[any]{},
		"AWS::SageMaker::NotebookInstanceLifecycleConfig":                  &sagemaker.NotebookInstanceLifecycleConfig[any]{},
		"AWS::SageMaker::Pipeline":                                         &sagemaker.Pipeline[any]{},
		"AWS::SageMaker::Project":                                          &sagemaker.Project[any]{},
		"AWS::SageMaker::Space":                                            &sagemaker.Space[any]{},
		"AWS::SageMaker::UserProfile":                                      &sagemaker.UserProfile[any]{},
		"AWS::SageMaker::Workteam":                                         &sagemaker.Workteam[any]{},
		"AWS::Scheduler::Schedule":                                         &scheduler.Schedule[any]{},
		"AWS::Scheduler::ScheduleGroup":                                    &scheduler.ScheduleGroup[any]{},
		"AWS::SecretsManager::ResourcePolicy":                              &secretsmanager.ResourcePolicy[any]{},
		"AWS::SecretsManager::RotationSchedule":                            &secretsmanager.RotationSchedule[any]{},
		"AWS::SecretsManager::Secret":                                      &secretsmanager.Secret[any]{},
		"AWS::SecretsManager::SecretTargetAttachment":                      &secretsmanager.SecretTargetAttachment[any]{},
		"AWS::SecurityHub::Hub":                                            &securityhub.Hub[any]{},
		"AWS::Serverless::Api":                                             &serverless.Api[any]{},
		"AWS::Serverless::Application":                                     &serverless.Application[any]{},
		"AWS::Serverless::Function":                                        &serverless.Function[any]{},
		"AWS::Serverless::HttpApi":                                         &serverless.HttpApi[any]{},
		"AWS::Serverless::LayerVersion":                                    &serverless.LayerVersion[any]{},
		"AWS::Serverless::SimpleTable":                                     &serverless.SimpleTable[any]{},
		"AWS::Serverless::StateMachine":                                    &serverless.StateMachine[any]{},
		"AWS::ServiceCatalog::AcceptedPortfolioShare":                      &servicecatalog.AcceptedPortfolioShare[any]{},
		"AWS::ServiceCatalog::CloudFormationProduct":                       &servicecatalog.CloudFormationProduct[any]{},
		"AWS::ServiceCatalog::CloudFormationProvisionedProduct":            &servicecatalog.CloudFormationProvisionedProduct[any]{},
		"AWS::ServiceCatalog::LaunchNotificationConstraint":                &servicecatalog.LaunchNotificationConstraint[any]{},
		"AWS::ServiceCatalog::LaunchRoleConstraint":                        &servicecatalog.LaunchRoleConstraint[any]{},
		"AWS::ServiceCatalog::LaunchTemplateConstraint":                    &servicecatalog.LaunchTemplateConstraint[any]{},
		"AWS::ServiceCatalog::Portfolio":                                   &servicecatalog.Portfolio[any]{},
		"AWS::ServiceCatalog::PortfolioPrincipalAssociation":               &servicecatalog.PortfolioPrincipalAssociation[any]{},
		"AWS::ServiceCatalog::PortfolioProductAssociation":                 &servicecatalog.PortfolioProductAssociation[any]{},
		"AWS::ServiceCatalog::PortfolioShare":                              &servicecatalog.PortfolioShare[any]{},
		"AWS::ServiceCatalog::ResourceUpdateConstraint":                    &servicecatalog.ResourceUpdateConstraint[any]{},
		"AWS::ServiceCatalog::ServiceAction":                               &servicecatalog.ServiceAction[any]{},
		"AWS::ServiceCatalog::ServiceActionAssociation":                    &servicecatalog.ServiceActionAssociation[any]{},
		"AWS::ServiceCatalog::StackSetConstraint":                          &servicecatalog.StackSetConstraint[any]{},
		"AWS::ServiceCatalog::TagOption":                                   &servicecatalog.TagOption[any]{},
		"AWS::ServiceCatalog::TagOptionAssociation":                        &servicecatalog.TagOptionAssociation[any]{},
		"AWS::ServiceCatalogAppRegistry::Application":                      &servicecatalogappregistry.Application[any]{},
		"AWS::ServiceCatalogAppRegistry::AttributeGroup":                   &servicecatalogappregistry.AttributeGroup[any]{},
		"AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation":        &servicecatalogappregistry.AttributeGroupAssociation[any]{},
		"AWS::ServiceCatalogAppRegistry::ResourceAssociation":              &servicecatalogappregistry.ResourceAssociation[any]{},
		"AWS::ServiceDiscovery::HttpNamespace":                             &servicediscovery.HttpNamespace[any]{},
		"AWS::ServiceDiscovery::Instance":                                  &servicediscovery.Instance[any]{},
		"AWS::ServiceDiscovery::PrivateDnsNamespace":                       &servicediscovery.PrivateDnsNamespace[any]{},
		"AWS::ServiceDiscovery::PublicDnsNamespace":                        &servicediscovery.PublicDnsNamespace[any]{},
		"AWS::ServiceDiscovery::Service":                                   &servicediscovery.Service[any]{},
		"AWS::Shield::DRTAccess":                                           &shield.DRTAccess[any]{},
		"AWS::Shield::ProactiveEngagement":                                 &shield.ProactiveEngagement[any]{},
		"AWS::Shield::Protection":                                          &shield.Protection[any]{},
		"AWS::Shield::ProtectionGroup":                                     &shield.ProtectionGroup[any]{},
		"AWS::Signer::ProfilePermission":                                   &signer.ProfilePermission[any]{},
		"AWS::Signer::SigningProfile":                                      &signer.SigningProfile[any]{},
		"AWS::SimSpaceWeaver::Simulation":                                  &simspaceweaver.Simulation[any]{},
		"AWS::StepFunctions::Activity":                                     &stepfunctions.Activity[any]{},
		"AWS::StepFunctions::StateMachine":                                 &stepfunctions.StateMachine[any]{},
		"AWS::SupportApp::AccountAlias":                                    &supportapp.AccountAlias[any]{},
		"AWS::SupportApp::SlackChannelConfiguration":                       &supportapp.SlackChannelConfiguration[any]{},
		"AWS::SupportApp::SlackWorkspaceConfiguration":                     &supportapp.SlackWorkspaceConfiguration[any]{},
		"AWS::Synthetics::Canary":                                          &synthetics.Canary[any]{},
		"AWS::Synthetics::Group":                                           &synthetics.Group[any]{},
		"AWS::SystemsManagerSAP::Application":                              &systemsmanagersap.Application[any]{},
		"AWS::Timestream::Database":                                        &timestream.Database[any]{},
		"AWS::Timestream::ScheduledQuery":                                  &timestream.ScheduledQuery[any]{},
		"AWS::Timestream::Table":                                           &timestream.Table[any]{},
		"AWS::Transfer::Agreement":                                         &transfer.Agreement[any]{},
		"AWS::Transfer::Certificate":                                       &transfer.Certificate[any]{},
		"AWS::Transfer::Connector":                                         &transfer.Connector[any]{},
		"AWS::Transfer::Profile":                                           &transfer.Profile[any]{},
		"AWS::Transfer::Server":                                            &transfer.Server[any]{},
		"AWS::Transfer::User":                                              &transfer.User[any]{},
		"AWS::Transfer::Workflow":                                          &transfer.Workflow[any]{},
		"AWS::VoiceID::Domain":                                             &voiceid.Domain[any]{},
		"AWS::VpcLattice::AccessLogSubscription":                           &vpclattice.AccessLogSubscription[any]{},
		"AWS::VpcLattice::AuthPolicy":                                      &vpclattice.AuthPolicy[any]{},
		"AWS::VpcLattice::Listener":                                        &vpclattice.Listener[any]{},
		"AWS::VpcLattice::ResourcePolicy":                                  &vpclattice.ResourcePolicy[any]{},
		"AWS::VpcLattice::Rule":                                            &vpclattice.Rule[any]{},
		"AWS::VpcLattice::Service":                                         &vpclattice.Service[any]{},
		"AWS::VpcLattice::ServiceNetwork":                                  &vpclattice.ServiceNetwork[any]{},
		"AWS::VpcLattice::ServiceNetworkServiceAssociation":                &vpclattice.ServiceNetworkServiceAssociation[any]{},
		"AWS::VpcLattice::ServiceNetworkVpcAssociation":                    &vpclattice.ServiceNetworkVpcAssociation[any]{},
		"AWS::VpcLattice::TargetGroup":                                     &vpclattice.TargetGroup[any]{},
		"AWS::WAF::ByteMatchSet":                                           &waf.ByteMatchSet[any]{},
		"AWS::WAF::IPSet":                                                  &waf.IPSet[any]{},
		"AWS::WAF::Rule":                                                   &waf.Rule[any]{},
		"AWS::WAF::SizeConstraintSet":                                      &waf.SizeConstraintSet[any]{},
		"AWS::WAF::SqlInjectionMatchSet":                                   &waf.SqlInjectionMatchSet[any]{},
		"AWS::WAF::WebACL":                                                 &waf.WebACL[any]{},
		"AWS::WAF::XssMatchSet":                                            &waf.XssMatchSet[any]{},
		"AWS::WAFRegional::ByteMatchSet":                                   &wafregional.ByteMatchSet[any]{},
		"AWS::WAFRegional::GeoMatchSet":                                    &wafregional.GeoMatchSet[any]{},
		"AWS::WAFRegional::IPSet":                                          &wafregional.IPSet[any]{},
		"AWS::WAFRegional::RateBasedRule":                                  &wafregional.RateBasedRule[any]{},
		"AWS::WAFRegional::RegexPatternSet":                                &wafregional.RegexPatternSet[any]{},
		"AWS::WAFRegional::Rule":                                           &wafregional.Rule[any]{},
		"AWS::WAFRegional::SizeConstraintSet":                              &wafregional.SizeConstraintSet[any]{},
		"AWS::WAFRegional::SqlInjectionMatchSet":                           &wafregional.SqlInjectionMatchSet[any]{},
		"AWS::WAFRegional::WebACL":                                         &wafregional.WebACL[any]{},
		"AWS::WAFRegional::WebACLAssociation":                              &wafregional.WebACLAssociation[any]{},
		"AWS::WAFRegional::XssMatchSet":                                    &wafregional.XssMatchSet[any]{},
		"AWS::WAFv2::IPSet":                                                &wafv2.IPSet[any]{},
		"AWS::WAFv2::LoggingConfiguration":                                 &wafv2.LoggingConfiguration[any]{},
		"AWS::WAFv2::RegexPatternSet":                                      &wafv2.RegexPatternSet[any]{},
		"AWS::WAFv2::RuleGroup":                                            &wafv2.RuleGroup[any]{},
		"AWS::WAFv2::WebACL":                                               &wafv2.WebACL[any]{},
		"AWS::WAFv2::WebACLAssociation":                                    &wafv2.WebACLAssociation[any]{},
		"AWS::Wisdom::Assistant":                                           &wisdom.Assistant[any]{},
		"AWS::Wisdom::AssistantAssociation":                                &wisdom.AssistantAssociation[any]{},
		"AWS::Wisdom::KnowledgeBase":                                       &wisdom.KnowledgeBase[any]{},
		"AWS::WorkSpaces::ConnectionAlias":                                 &workspaces.ConnectionAlias[any]{},
		"AWS::WorkSpaces::Workspace":                                       &workspaces.Workspace[any]{},
		"AWS::XRay::Group":                                                 &xray.Group[any]{},
		"AWS::XRay::ResourcePolicy":                                        &xray.ResourcePolicy[any]{},
		"AWS::XRay::SamplingRule":                                          &xray.SamplingRule[any]{},
		"Alexa::ASK::Skill":                                                &ask.Skill[any]{},
		"Api":                                                              &global.Api[any]{},
		"Function":                                                         &global.Function[any]{},
		"HttpApi":                                                          &global.HttpApi[any]{},
		"SimpleTable":                                                      &global.SimpleTable[any]{},
	}
}

// GetAllACMPCACertificateResources retrieves all acmpca.Certificate items from an AWS CloudFormation template
func (t *Template) GetAllACMPCACertificateResources() map[string]*acmpca.Certificate[any] {
	results := map[string]*acmpca.Certificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *acmpca.Certificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetACMPCACertificateWithName retrieves all acmpca.Certificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetACMPCACertificateWithName(name string) (*acmpca.Certificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *acmpca.Certificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type acmpca.Certificate not found", name)
}

// GetAllACMPCACertificateAuthorityResources retrieves all acmpca.CertificateAuthority items from an AWS CloudFormation template
func (t *Template) GetAllACMPCACertificateAuthorityResources() map[string]*acmpca.CertificateAuthority[any] {
	results := map[string]*acmpca.CertificateAuthority[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *acmpca.CertificateAuthority[any]:
			results[name] = resource
		}
	}
	return results
}

// GetACMPCACertificateAuthorityWithName retrieves all acmpca.CertificateAuthority items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetACMPCACertificateAuthorityWithName(name string) (*acmpca.CertificateAuthority[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *acmpca.CertificateAuthority[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type acmpca.CertificateAuthority not found", name)
}

// GetAllACMPCACertificateAuthorityActivationResources retrieves all acmpca.CertificateAuthorityActivation items from an AWS CloudFormation template
func (t *Template) GetAllACMPCACertificateAuthorityActivationResources() map[string]*acmpca.CertificateAuthorityActivation[any] {
	results := map[string]*acmpca.CertificateAuthorityActivation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *acmpca.CertificateAuthorityActivation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetACMPCACertificateAuthorityActivationWithName retrieves all acmpca.CertificateAuthorityActivation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetACMPCACertificateAuthorityActivationWithName(name string) (*acmpca.CertificateAuthorityActivation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *acmpca.CertificateAuthorityActivation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type acmpca.CertificateAuthorityActivation not found", name)
}

// GetAllACMPCAPermissionResources retrieves all acmpca.Permission items from an AWS CloudFormation template
func (t *Template) GetAllACMPCAPermissionResources() map[string]*acmpca.Permission[any] {
	results := map[string]*acmpca.Permission[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *acmpca.Permission[any]:
			results[name] = resource
		}
	}
	return results
}

// GetACMPCAPermissionWithName retrieves all acmpca.Permission items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetACMPCAPermissionWithName(name string) (*acmpca.Permission[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *acmpca.Permission[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type acmpca.Permission not found", name)
}

// GetAllAPSRuleGroupsNamespaceResources retrieves all aps.RuleGroupsNamespace items from an AWS CloudFormation template
func (t *Template) GetAllAPSRuleGroupsNamespaceResources() map[string]*aps.RuleGroupsNamespace[any] {
	results := map[string]*aps.RuleGroupsNamespace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *aps.RuleGroupsNamespace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAPSRuleGroupsNamespaceWithName retrieves all aps.RuleGroupsNamespace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAPSRuleGroupsNamespaceWithName(name string) (*aps.RuleGroupsNamespace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *aps.RuleGroupsNamespace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type aps.RuleGroupsNamespace not found", name)
}

// GetAllAPSWorkspaceResources retrieves all aps.Workspace items from an AWS CloudFormation template
func (t *Template) GetAllAPSWorkspaceResources() map[string]*aps.Workspace[any] {
	results := map[string]*aps.Workspace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *aps.Workspace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAPSWorkspaceWithName retrieves all aps.Workspace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAPSWorkspaceWithName(name string) (*aps.Workspace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *aps.Workspace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type aps.Workspace not found", name)
}

// GetAllAccessAnalyzerAnalyzerResources retrieves all accessanalyzer.Analyzer items from an AWS CloudFormation template
func (t *Template) GetAllAccessAnalyzerAnalyzerResources() map[string]*accessanalyzer.Analyzer[any] {
	results := map[string]*accessanalyzer.Analyzer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *accessanalyzer.Analyzer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAccessAnalyzerAnalyzerWithName retrieves all accessanalyzer.Analyzer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAccessAnalyzerAnalyzerWithName(name string) (*accessanalyzer.Analyzer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *accessanalyzer.Analyzer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type accessanalyzer.Analyzer not found", name)
}

// GetAllAmazonMQBrokerResources retrieves all amazonmq.Broker items from an AWS CloudFormation template
func (t *Template) GetAllAmazonMQBrokerResources() map[string]*amazonmq.Broker[any] {
	results := map[string]*amazonmq.Broker[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amazonmq.Broker[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmazonMQBrokerWithName retrieves all amazonmq.Broker items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmazonMQBrokerWithName(name string) (*amazonmq.Broker[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amazonmq.Broker[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amazonmq.Broker not found", name)
}

// GetAllAmazonMQConfigurationResources retrieves all amazonmq.Configuration items from an AWS CloudFormation template
func (t *Template) GetAllAmazonMQConfigurationResources() map[string]*amazonmq.Configuration[any] {
	results := map[string]*amazonmq.Configuration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amazonmq.Configuration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmazonMQConfigurationWithName retrieves all amazonmq.Configuration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmazonMQConfigurationWithName(name string) (*amazonmq.Configuration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amazonmq.Configuration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amazonmq.Configuration not found", name)
}

// GetAllAmazonMQConfigurationAssociationResources retrieves all amazonmq.ConfigurationAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAmazonMQConfigurationAssociationResources() map[string]*amazonmq.ConfigurationAssociation[any] {
	results := map[string]*amazonmq.ConfigurationAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amazonmq.ConfigurationAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmazonMQConfigurationAssociationWithName retrieves all amazonmq.ConfigurationAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmazonMQConfigurationAssociationWithName(name string) (*amazonmq.ConfigurationAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amazonmq.ConfigurationAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amazonmq.ConfigurationAssociation not found", name)
}

// GetAllAmplifyAppResources retrieves all amplify.App items from an AWS CloudFormation template
func (t *Template) GetAllAmplifyAppResources() map[string]*amplify.App[any] {
	results := map[string]*amplify.App[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amplify.App[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmplifyAppWithName retrieves all amplify.App items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmplifyAppWithName(name string) (*amplify.App[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amplify.App[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amplify.App not found", name)
}

// GetAllAmplifyBranchResources retrieves all amplify.Branch items from an AWS CloudFormation template
func (t *Template) GetAllAmplifyBranchResources() map[string]*amplify.Branch[any] {
	results := map[string]*amplify.Branch[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amplify.Branch[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmplifyBranchWithName retrieves all amplify.Branch items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmplifyBranchWithName(name string) (*amplify.Branch[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amplify.Branch[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amplify.Branch not found", name)
}

// GetAllAmplifyDomainResources retrieves all amplify.Domain items from an AWS CloudFormation template
func (t *Template) GetAllAmplifyDomainResources() map[string]*amplify.Domain[any] {
	results := map[string]*amplify.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amplify.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmplifyDomainWithName retrieves all amplify.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmplifyDomainWithName(name string) (*amplify.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amplify.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amplify.Domain not found", name)
}

// GetAllAmplifyUIBuilderComponentResources retrieves all amplifyuibuilder.Component items from an AWS CloudFormation template
func (t *Template) GetAllAmplifyUIBuilderComponentResources() map[string]*amplifyuibuilder.Component[any] {
	results := map[string]*amplifyuibuilder.Component[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amplifyuibuilder.Component[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmplifyUIBuilderComponentWithName retrieves all amplifyuibuilder.Component items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmplifyUIBuilderComponentWithName(name string) (*amplifyuibuilder.Component[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amplifyuibuilder.Component[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amplifyuibuilder.Component not found", name)
}

// GetAllAmplifyUIBuilderFormResources retrieves all amplifyuibuilder.Form items from an AWS CloudFormation template
func (t *Template) GetAllAmplifyUIBuilderFormResources() map[string]*amplifyuibuilder.Form[any] {
	results := map[string]*amplifyuibuilder.Form[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amplifyuibuilder.Form[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmplifyUIBuilderFormWithName retrieves all amplifyuibuilder.Form items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmplifyUIBuilderFormWithName(name string) (*amplifyuibuilder.Form[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amplifyuibuilder.Form[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amplifyuibuilder.Form not found", name)
}

// GetAllAmplifyUIBuilderThemeResources retrieves all amplifyuibuilder.Theme items from an AWS CloudFormation template
func (t *Template) GetAllAmplifyUIBuilderThemeResources() map[string]*amplifyuibuilder.Theme[any] {
	results := map[string]*amplifyuibuilder.Theme[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *amplifyuibuilder.Theme[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAmplifyUIBuilderThemeWithName retrieves all amplifyuibuilder.Theme items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAmplifyUIBuilderThemeWithName(name string) (*amplifyuibuilder.Theme[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *amplifyuibuilder.Theme[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type amplifyuibuilder.Theme not found", name)
}

// GetAllApiGatewayAccountResources retrieves all apigateway.Account items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayAccountResources() map[string]*apigateway.Account[any] {
	results := map[string]*apigateway.Account[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Account[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayAccountWithName retrieves all apigateway.Account items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayAccountWithName(name string) (*apigateway.Account[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Account[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Account not found", name)
}

// GetAllApiGatewayApiKeyResources retrieves all apigateway.ApiKey items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayApiKeyResources() map[string]*apigateway.ApiKey[any] {
	results := map[string]*apigateway.ApiKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.ApiKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayApiKeyWithName retrieves all apigateway.ApiKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayApiKeyWithName(name string) (*apigateway.ApiKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.ApiKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.ApiKey not found", name)
}

// GetAllApiGatewayAuthorizerResources retrieves all apigateway.Authorizer items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayAuthorizerResources() map[string]*apigateway.Authorizer[any] {
	results := map[string]*apigateway.Authorizer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Authorizer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayAuthorizerWithName retrieves all apigateway.Authorizer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayAuthorizerWithName(name string) (*apigateway.Authorizer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Authorizer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Authorizer not found", name)
}

// GetAllApiGatewayBasePathMappingResources retrieves all apigateway.BasePathMapping items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayBasePathMappingResources() map[string]*apigateway.BasePathMapping[any] {
	results := map[string]*apigateway.BasePathMapping[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.BasePathMapping[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayBasePathMappingWithName retrieves all apigateway.BasePathMapping items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayBasePathMappingWithName(name string) (*apigateway.BasePathMapping[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.BasePathMapping[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.BasePathMapping not found", name)
}

// GetAllApiGatewayClientCertificateResources retrieves all apigateway.ClientCertificate items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayClientCertificateResources() map[string]*apigateway.ClientCertificate[any] {
	results := map[string]*apigateway.ClientCertificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.ClientCertificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayClientCertificateWithName retrieves all apigateway.ClientCertificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayClientCertificateWithName(name string) (*apigateway.ClientCertificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.ClientCertificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.ClientCertificate not found", name)
}

// GetAllApiGatewayDeploymentResources retrieves all apigateway.Deployment items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayDeploymentResources() map[string]*apigateway.Deployment[any] {
	results := map[string]*apigateway.Deployment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Deployment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayDeploymentWithName retrieves all apigateway.Deployment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayDeploymentWithName(name string) (*apigateway.Deployment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Deployment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Deployment not found", name)
}

// GetAllApiGatewayDocumentationPartResources retrieves all apigateway.DocumentationPart items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayDocumentationPartResources() map[string]*apigateway.DocumentationPart[any] {
	results := map[string]*apigateway.DocumentationPart[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.DocumentationPart[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayDocumentationPartWithName retrieves all apigateway.DocumentationPart items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayDocumentationPartWithName(name string) (*apigateway.DocumentationPart[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.DocumentationPart[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.DocumentationPart not found", name)
}

// GetAllApiGatewayDocumentationVersionResources retrieves all apigateway.DocumentationVersion items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayDocumentationVersionResources() map[string]*apigateway.DocumentationVersion[any] {
	results := map[string]*apigateway.DocumentationVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.DocumentationVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayDocumentationVersionWithName retrieves all apigateway.DocumentationVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayDocumentationVersionWithName(name string) (*apigateway.DocumentationVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.DocumentationVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.DocumentationVersion not found", name)
}

// GetAllApiGatewayDomainNameResources retrieves all apigateway.DomainName items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayDomainNameResources() map[string]*apigateway.DomainName[any] {
	results := map[string]*apigateway.DomainName[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.DomainName[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayDomainNameWithName retrieves all apigateway.DomainName items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayDomainNameWithName(name string) (*apigateway.DomainName[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.DomainName[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.DomainName not found", name)
}

// GetAllApiGatewayGatewayResponseResources retrieves all apigateway.GatewayResponse items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayGatewayResponseResources() map[string]*apigateway.GatewayResponse[any] {
	results := map[string]*apigateway.GatewayResponse[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.GatewayResponse[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayGatewayResponseWithName retrieves all apigateway.GatewayResponse items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayGatewayResponseWithName(name string) (*apigateway.GatewayResponse[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.GatewayResponse[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.GatewayResponse not found", name)
}

// GetAllApiGatewayMethodResources retrieves all apigateway.Method items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayMethodResources() map[string]*apigateway.Method[any] {
	results := map[string]*apigateway.Method[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Method[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayMethodWithName retrieves all apigateway.Method items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayMethodWithName(name string) (*apigateway.Method[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Method[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Method not found", name)
}

// GetAllApiGatewayModelResources retrieves all apigateway.Model items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayModelResources() map[string]*apigateway.Model[any] {
	results := map[string]*apigateway.Model[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Model[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayModelWithName retrieves all apigateway.Model items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayModelWithName(name string) (*apigateway.Model[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Model[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Model not found", name)
}

// GetAllApiGatewayRequestValidatorResources retrieves all apigateway.RequestValidator items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayRequestValidatorResources() map[string]*apigateway.RequestValidator[any] {
	results := map[string]*apigateway.RequestValidator[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.RequestValidator[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayRequestValidatorWithName retrieves all apigateway.RequestValidator items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayRequestValidatorWithName(name string) (*apigateway.RequestValidator[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.RequestValidator[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.RequestValidator not found", name)
}

// GetAllApiGatewayResourceResources retrieves all apigateway.Resource items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayResourceResources() map[string]*apigateway.Resource[any] {
	results := map[string]*apigateway.Resource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Resource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayResourceWithName retrieves all apigateway.Resource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayResourceWithName(name string) (*apigateway.Resource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Resource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Resource not found", name)
}

// GetAllApiGatewayRestApiResources retrieves all apigateway.RestApi items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayRestApiResources() map[string]*apigateway.RestApi[any] {
	results := map[string]*apigateway.RestApi[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.RestApi[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayRestApiWithName retrieves all apigateway.RestApi items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayRestApiWithName(name string) (*apigateway.RestApi[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.RestApi[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.RestApi not found", name)
}

// GetAllApiGatewayStageResources retrieves all apigateway.Stage items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayStageResources() map[string]*apigateway.Stage[any] {
	results := map[string]*apigateway.Stage[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.Stage[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayStageWithName retrieves all apigateway.Stage items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayStageWithName(name string) (*apigateway.Stage[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.Stage[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.Stage not found", name)
}

// GetAllApiGatewayUsagePlanResources retrieves all apigateway.UsagePlan items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayUsagePlanResources() map[string]*apigateway.UsagePlan[any] {
	results := map[string]*apigateway.UsagePlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.UsagePlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayUsagePlanWithName retrieves all apigateway.UsagePlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayUsagePlanWithName(name string) (*apigateway.UsagePlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.UsagePlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.UsagePlan not found", name)
}

// GetAllApiGatewayUsagePlanKeyResources retrieves all apigateway.UsagePlanKey items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayUsagePlanKeyResources() map[string]*apigateway.UsagePlanKey[any] {
	results := map[string]*apigateway.UsagePlanKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.UsagePlanKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayUsagePlanKeyWithName retrieves all apigateway.UsagePlanKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayUsagePlanKeyWithName(name string) (*apigateway.UsagePlanKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.UsagePlanKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.UsagePlanKey not found", name)
}

// GetAllApiGatewayVpcLinkResources retrieves all apigateway.VpcLink items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayVpcLinkResources() map[string]*apigateway.VpcLink[any] {
	results := map[string]*apigateway.VpcLink[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigateway.VpcLink[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayVpcLinkWithName retrieves all apigateway.VpcLink items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayVpcLinkWithName(name string) (*apigateway.VpcLink[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigateway.VpcLink[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigateway.VpcLink not found", name)
}

// GetAllApiGatewayV2ApiResources retrieves all apigatewayv2.Api items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2ApiResources() map[string]*apigatewayv2.Api[any] {
	results := map[string]*apigatewayv2.Api[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Api[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2ApiWithName retrieves all apigatewayv2.Api items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2ApiWithName(name string) (*apigatewayv2.Api[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Api[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Api not found", name)
}

// GetAllApiGatewayV2ApiGatewayManagedOverridesResources retrieves all apigatewayv2.ApiGatewayManagedOverrides items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2ApiGatewayManagedOverridesResources() map[string]*apigatewayv2.ApiGatewayManagedOverrides[any] {
	results := map[string]*apigatewayv2.ApiGatewayManagedOverrides[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.ApiGatewayManagedOverrides[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2ApiGatewayManagedOverridesWithName retrieves all apigatewayv2.ApiGatewayManagedOverrides items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2ApiGatewayManagedOverridesWithName(name string) (*apigatewayv2.ApiGatewayManagedOverrides[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.ApiGatewayManagedOverrides[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.ApiGatewayManagedOverrides not found", name)
}

// GetAllApiGatewayV2ApiMappingResources retrieves all apigatewayv2.ApiMapping items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2ApiMappingResources() map[string]*apigatewayv2.ApiMapping[any] {
	results := map[string]*apigatewayv2.ApiMapping[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.ApiMapping[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2ApiMappingWithName retrieves all apigatewayv2.ApiMapping items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2ApiMappingWithName(name string) (*apigatewayv2.ApiMapping[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.ApiMapping[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.ApiMapping not found", name)
}

// GetAllApiGatewayV2AuthorizerResources retrieves all apigatewayv2.Authorizer items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2AuthorizerResources() map[string]*apigatewayv2.Authorizer[any] {
	results := map[string]*apigatewayv2.Authorizer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Authorizer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2AuthorizerWithName retrieves all apigatewayv2.Authorizer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2AuthorizerWithName(name string) (*apigatewayv2.Authorizer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Authorizer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Authorizer not found", name)
}

// GetAllApiGatewayV2DeploymentResources retrieves all apigatewayv2.Deployment items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2DeploymentResources() map[string]*apigatewayv2.Deployment[any] {
	results := map[string]*apigatewayv2.Deployment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Deployment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2DeploymentWithName retrieves all apigatewayv2.Deployment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2DeploymentWithName(name string) (*apigatewayv2.Deployment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Deployment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Deployment not found", name)
}

// GetAllApiGatewayV2DomainNameResources retrieves all apigatewayv2.DomainName items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2DomainNameResources() map[string]*apigatewayv2.DomainName[any] {
	results := map[string]*apigatewayv2.DomainName[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.DomainName[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2DomainNameWithName retrieves all apigatewayv2.DomainName items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2DomainNameWithName(name string) (*apigatewayv2.DomainName[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.DomainName[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.DomainName not found", name)
}

// GetAllApiGatewayV2IntegrationResources retrieves all apigatewayv2.Integration items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2IntegrationResources() map[string]*apigatewayv2.Integration[any] {
	results := map[string]*apigatewayv2.Integration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Integration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2IntegrationWithName retrieves all apigatewayv2.Integration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2IntegrationWithName(name string) (*apigatewayv2.Integration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Integration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Integration not found", name)
}

// GetAllApiGatewayV2IntegrationResponseResources retrieves all apigatewayv2.IntegrationResponse items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2IntegrationResponseResources() map[string]*apigatewayv2.IntegrationResponse[any] {
	results := map[string]*apigatewayv2.IntegrationResponse[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.IntegrationResponse[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2IntegrationResponseWithName retrieves all apigatewayv2.IntegrationResponse items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2IntegrationResponseWithName(name string) (*apigatewayv2.IntegrationResponse[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.IntegrationResponse[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.IntegrationResponse not found", name)
}

// GetAllApiGatewayV2ModelResources retrieves all apigatewayv2.Model items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2ModelResources() map[string]*apigatewayv2.Model[any] {
	results := map[string]*apigatewayv2.Model[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Model[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2ModelWithName retrieves all apigatewayv2.Model items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2ModelWithName(name string) (*apigatewayv2.Model[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Model[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Model not found", name)
}

// GetAllApiGatewayV2RouteResources retrieves all apigatewayv2.Route items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2RouteResources() map[string]*apigatewayv2.Route[any] {
	results := map[string]*apigatewayv2.Route[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Route[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2RouteWithName retrieves all apigatewayv2.Route items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2RouteWithName(name string) (*apigatewayv2.Route[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Route[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Route not found", name)
}

// GetAllApiGatewayV2RouteResponseResources retrieves all apigatewayv2.RouteResponse items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2RouteResponseResources() map[string]*apigatewayv2.RouteResponse[any] {
	results := map[string]*apigatewayv2.RouteResponse[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.RouteResponse[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2RouteResponseWithName retrieves all apigatewayv2.RouteResponse items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2RouteResponseWithName(name string) (*apigatewayv2.RouteResponse[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.RouteResponse[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.RouteResponse not found", name)
}

// GetAllApiGatewayV2StageResources retrieves all apigatewayv2.Stage items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2StageResources() map[string]*apigatewayv2.Stage[any] {
	results := map[string]*apigatewayv2.Stage[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.Stage[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2StageWithName retrieves all apigatewayv2.Stage items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2StageWithName(name string) (*apigatewayv2.Stage[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.Stage[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.Stage not found", name)
}

// GetAllApiGatewayV2VpcLinkResources retrieves all apigatewayv2.VpcLink items from an AWS CloudFormation template
func (t *Template) GetAllApiGatewayV2VpcLinkResources() map[string]*apigatewayv2.VpcLink[any] {
	results := map[string]*apigatewayv2.VpcLink[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apigatewayv2.VpcLink[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApiGatewayV2VpcLinkWithName retrieves all apigatewayv2.VpcLink items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApiGatewayV2VpcLinkWithName(name string) (*apigatewayv2.VpcLink[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apigatewayv2.VpcLink[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apigatewayv2.VpcLink not found", name)
}

// GetAllAppConfigApplicationResources retrieves all appconfig.Application items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigApplicationResources() map[string]*appconfig.Application[any] {
	results := map[string]*appconfig.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigApplicationWithName retrieves all appconfig.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigApplicationWithName(name string) (*appconfig.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.Application not found", name)
}

// GetAllAppConfigConfigurationProfileResources retrieves all appconfig.ConfigurationProfile items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigConfigurationProfileResources() map[string]*appconfig.ConfigurationProfile[any] {
	results := map[string]*appconfig.ConfigurationProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.ConfigurationProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigConfigurationProfileWithName retrieves all appconfig.ConfigurationProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigConfigurationProfileWithName(name string) (*appconfig.ConfigurationProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.ConfigurationProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.ConfigurationProfile not found", name)
}

// GetAllAppConfigDeploymentResources retrieves all appconfig.Deployment items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigDeploymentResources() map[string]*appconfig.Deployment[any] {
	results := map[string]*appconfig.Deployment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.Deployment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigDeploymentWithName retrieves all appconfig.Deployment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigDeploymentWithName(name string) (*appconfig.Deployment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.Deployment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.Deployment not found", name)
}

// GetAllAppConfigDeploymentStrategyResources retrieves all appconfig.DeploymentStrategy items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigDeploymentStrategyResources() map[string]*appconfig.DeploymentStrategy[any] {
	results := map[string]*appconfig.DeploymentStrategy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.DeploymentStrategy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigDeploymentStrategyWithName retrieves all appconfig.DeploymentStrategy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigDeploymentStrategyWithName(name string) (*appconfig.DeploymentStrategy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.DeploymentStrategy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.DeploymentStrategy not found", name)
}

// GetAllAppConfigEnvironmentResources retrieves all appconfig.Environment items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigEnvironmentResources() map[string]*appconfig.Environment[any] {
	results := map[string]*appconfig.Environment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.Environment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigEnvironmentWithName retrieves all appconfig.Environment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigEnvironmentWithName(name string) (*appconfig.Environment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.Environment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.Environment not found", name)
}

// GetAllAppConfigExtensionResources retrieves all appconfig.Extension items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigExtensionResources() map[string]*appconfig.Extension[any] {
	results := map[string]*appconfig.Extension[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.Extension[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigExtensionWithName retrieves all appconfig.Extension items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigExtensionWithName(name string) (*appconfig.Extension[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.Extension[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.Extension not found", name)
}

// GetAllAppConfigExtensionAssociationResources retrieves all appconfig.ExtensionAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigExtensionAssociationResources() map[string]*appconfig.ExtensionAssociation[any] {
	results := map[string]*appconfig.ExtensionAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.ExtensionAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigExtensionAssociationWithName retrieves all appconfig.ExtensionAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigExtensionAssociationWithName(name string) (*appconfig.ExtensionAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.ExtensionAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.ExtensionAssociation not found", name)
}

// GetAllAppConfigHostedConfigurationVersionResources retrieves all appconfig.HostedConfigurationVersion items from an AWS CloudFormation template
func (t *Template) GetAllAppConfigHostedConfigurationVersionResources() map[string]*appconfig.HostedConfigurationVersion[any] {
	results := map[string]*appconfig.HostedConfigurationVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appconfig.HostedConfigurationVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppConfigHostedConfigurationVersionWithName retrieves all appconfig.HostedConfigurationVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppConfigHostedConfigurationVersionWithName(name string) (*appconfig.HostedConfigurationVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appconfig.HostedConfigurationVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appconfig.HostedConfigurationVersion not found", name)
}

// GetAllAppFlowConnectorResources retrieves all appflow.Connector items from an AWS CloudFormation template
func (t *Template) GetAllAppFlowConnectorResources() map[string]*appflow.Connector[any] {
	results := map[string]*appflow.Connector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appflow.Connector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppFlowConnectorWithName retrieves all appflow.Connector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppFlowConnectorWithName(name string) (*appflow.Connector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appflow.Connector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appflow.Connector not found", name)
}

// GetAllAppFlowConnectorProfileResources retrieves all appflow.ConnectorProfile items from an AWS CloudFormation template
func (t *Template) GetAllAppFlowConnectorProfileResources() map[string]*appflow.ConnectorProfile[any] {
	results := map[string]*appflow.ConnectorProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appflow.ConnectorProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppFlowConnectorProfileWithName retrieves all appflow.ConnectorProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppFlowConnectorProfileWithName(name string) (*appflow.ConnectorProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appflow.ConnectorProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appflow.ConnectorProfile not found", name)
}

// GetAllAppFlowFlowResources retrieves all appflow.Flow items from an AWS CloudFormation template
func (t *Template) GetAllAppFlowFlowResources() map[string]*appflow.Flow[any] {
	results := map[string]*appflow.Flow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appflow.Flow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppFlowFlowWithName retrieves all appflow.Flow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppFlowFlowWithName(name string) (*appflow.Flow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appflow.Flow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appflow.Flow not found", name)
}

// GetAllAppIntegrationsDataIntegrationResources retrieves all appintegrations.DataIntegration items from an AWS CloudFormation template
func (t *Template) GetAllAppIntegrationsDataIntegrationResources() map[string]*appintegrations.DataIntegration[any] {
	results := map[string]*appintegrations.DataIntegration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appintegrations.DataIntegration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppIntegrationsDataIntegrationWithName retrieves all appintegrations.DataIntegration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppIntegrationsDataIntegrationWithName(name string) (*appintegrations.DataIntegration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appintegrations.DataIntegration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appintegrations.DataIntegration not found", name)
}

// GetAllAppIntegrationsEventIntegrationResources retrieves all appintegrations.EventIntegration items from an AWS CloudFormation template
func (t *Template) GetAllAppIntegrationsEventIntegrationResources() map[string]*appintegrations.EventIntegration[any] {
	results := map[string]*appintegrations.EventIntegration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appintegrations.EventIntegration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppIntegrationsEventIntegrationWithName retrieves all appintegrations.EventIntegration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppIntegrationsEventIntegrationWithName(name string) (*appintegrations.EventIntegration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appintegrations.EventIntegration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appintegrations.EventIntegration not found", name)
}

// GetAllAppMeshGatewayRouteResources retrieves all appmesh.GatewayRoute items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshGatewayRouteResources() map[string]*appmesh.GatewayRoute[any] {
	results := map[string]*appmesh.GatewayRoute[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.GatewayRoute[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshGatewayRouteWithName retrieves all appmesh.GatewayRoute items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshGatewayRouteWithName(name string) (*appmesh.GatewayRoute[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.GatewayRoute[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.GatewayRoute not found", name)
}

// GetAllAppMeshMeshResources retrieves all appmesh.Mesh items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshMeshResources() map[string]*appmesh.Mesh[any] {
	results := map[string]*appmesh.Mesh[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.Mesh[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshMeshWithName retrieves all appmesh.Mesh items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshMeshWithName(name string) (*appmesh.Mesh[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.Mesh[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.Mesh not found", name)
}

// GetAllAppMeshRouteResources retrieves all appmesh.Route items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshRouteResources() map[string]*appmesh.Route[any] {
	results := map[string]*appmesh.Route[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.Route[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshRouteWithName retrieves all appmesh.Route items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshRouteWithName(name string) (*appmesh.Route[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.Route[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.Route not found", name)
}

// GetAllAppMeshVirtualGatewayResources retrieves all appmesh.VirtualGateway items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshVirtualGatewayResources() map[string]*appmesh.VirtualGateway[any] {
	results := map[string]*appmesh.VirtualGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.VirtualGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshVirtualGatewayWithName retrieves all appmesh.VirtualGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshVirtualGatewayWithName(name string) (*appmesh.VirtualGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.VirtualGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.VirtualGateway not found", name)
}

// GetAllAppMeshVirtualNodeResources retrieves all appmesh.VirtualNode items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshVirtualNodeResources() map[string]*appmesh.VirtualNode[any] {
	results := map[string]*appmesh.VirtualNode[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.VirtualNode[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshVirtualNodeWithName retrieves all appmesh.VirtualNode items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshVirtualNodeWithName(name string) (*appmesh.VirtualNode[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.VirtualNode[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.VirtualNode not found", name)
}

// GetAllAppMeshVirtualRouterResources retrieves all appmesh.VirtualRouter items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshVirtualRouterResources() map[string]*appmesh.VirtualRouter[any] {
	results := map[string]*appmesh.VirtualRouter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.VirtualRouter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshVirtualRouterWithName retrieves all appmesh.VirtualRouter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshVirtualRouterWithName(name string) (*appmesh.VirtualRouter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.VirtualRouter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.VirtualRouter not found", name)
}

// GetAllAppMeshVirtualServiceResources retrieves all appmesh.VirtualService items from an AWS CloudFormation template
func (t *Template) GetAllAppMeshVirtualServiceResources() map[string]*appmesh.VirtualService[any] {
	results := map[string]*appmesh.VirtualService[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appmesh.VirtualService[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppMeshVirtualServiceWithName retrieves all appmesh.VirtualService items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppMeshVirtualServiceWithName(name string) (*appmesh.VirtualService[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appmesh.VirtualService[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appmesh.VirtualService not found", name)
}

// GetAllAppRunnerObservabilityConfigurationResources retrieves all apprunner.ObservabilityConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllAppRunnerObservabilityConfigurationResources() map[string]*apprunner.ObservabilityConfiguration[any] {
	results := map[string]*apprunner.ObservabilityConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apprunner.ObservabilityConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppRunnerObservabilityConfigurationWithName retrieves all apprunner.ObservabilityConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppRunnerObservabilityConfigurationWithName(name string) (*apprunner.ObservabilityConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apprunner.ObservabilityConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apprunner.ObservabilityConfiguration not found", name)
}

// GetAllAppRunnerServiceResources retrieves all apprunner.Service items from an AWS CloudFormation template
func (t *Template) GetAllAppRunnerServiceResources() map[string]*apprunner.Service[any] {
	results := map[string]*apprunner.Service[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apprunner.Service[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppRunnerServiceWithName retrieves all apprunner.Service items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppRunnerServiceWithName(name string) (*apprunner.Service[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apprunner.Service[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apprunner.Service not found", name)
}

// GetAllAppRunnerVpcConnectorResources retrieves all apprunner.VpcConnector items from an AWS CloudFormation template
func (t *Template) GetAllAppRunnerVpcConnectorResources() map[string]*apprunner.VpcConnector[any] {
	results := map[string]*apprunner.VpcConnector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apprunner.VpcConnector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppRunnerVpcConnectorWithName retrieves all apprunner.VpcConnector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppRunnerVpcConnectorWithName(name string) (*apprunner.VpcConnector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apprunner.VpcConnector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apprunner.VpcConnector not found", name)
}

// GetAllAppRunnerVpcIngressConnectionResources retrieves all apprunner.VpcIngressConnection items from an AWS CloudFormation template
func (t *Template) GetAllAppRunnerVpcIngressConnectionResources() map[string]*apprunner.VpcIngressConnection[any] {
	results := map[string]*apprunner.VpcIngressConnection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *apprunner.VpcIngressConnection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppRunnerVpcIngressConnectionWithName retrieves all apprunner.VpcIngressConnection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppRunnerVpcIngressConnectionWithName(name string) (*apprunner.VpcIngressConnection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *apprunner.VpcIngressConnection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type apprunner.VpcIngressConnection not found", name)
}

// GetAllAppStreamAppBlockResources retrieves all appstream.AppBlock items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamAppBlockResources() map[string]*appstream.AppBlock[any] {
	results := map[string]*appstream.AppBlock[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.AppBlock[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamAppBlockWithName retrieves all appstream.AppBlock items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamAppBlockWithName(name string) (*appstream.AppBlock[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.AppBlock[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.AppBlock not found", name)
}

// GetAllAppStreamApplicationResources retrieves all appstream.Application items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamApplicationResources() map[string]*appstream.Application[any] {
	results := map[string]*appstream.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamApplicationWithName retrieves all appstream.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamApplicationWithName(name string) (*appstream.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.Application not found", name)
}

// GetAllAppStreamApplicationEntitlementAssociationResources retrieves all appstream.ApplicationEntitlementAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamApplicationEntitlementAssociationResources() map[string]*appstream.ApplicationEntitlementAssociation[any] {
	results := map[string]*appstream.ApplicationEntitlementAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.ApplicationEntitlementAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamApplicationEntitlementAssociationWithName retrieves all appstream.ApplicationEntitlementAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamApplicationEntitlementAssociationWithName(name string) (*appstream.ApplicationEntitlementAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.ApplicationEntitlementAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.ApplicationEntitlementAssociation not found", name)
}

// GetAllAppStreamApplicationFleetAssociationResources retrieves all appstream.ApplicationFleetAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamApplicationFleetAssociationResources() map[string]*appstream.ApplicationFleetAssociation[any] {
	results := map[string]*appstream.ApplicationFleetAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.ApplicationFleetAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamApplicationFleetAssociationWithName retrieves all appstream.ApplicationFleetAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamApplicationFleetAssociationWithName(name string) (*appstream.ApplicationFleetAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.ApplicationFleetAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.ApplicationFleetAssociation not found", name)
}

// GetAllAppStreamDirectoryConfigResources retrieves all appstream.DirectoryConfig items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamDirectoryConfigResources() map[string]*appstream.DirectoryConfig[any] {
	results := map[string]*appstream.DirectoryConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.DirectoryConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamDirectoryConfigWithName retrieves all appstream.DirectoryConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamDirectoryConfigWithName(name string) (*appstream.DirectoryConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.DirectoryConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.DirectoryConfig not found", name)
}

// GetAllAppStreamEntitlementResources retrieves all appstream.Entitlement items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamEntitlementResources() map[string]*appstream.Entitlement[any] {
	results := map[string]*appstream.Entitlement[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.Entitlement[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamEntitlementWithName retrieves all appstream.Entitlement items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamEntitlementWithName(name string) (*appstream.Entitlement[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.Entitlement[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.Entitlement not found", name)
}

// GetAllAppStreamFleetResources retrieves all appstream.Fleet items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamFleetResources() map[string]*appstream.Fleet[any] {
	results := map[string]*appstream.Fleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.Fleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamFleetWithName retrieves all appstream.Fleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamFleetWithName(name string) (*appstream.Fleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.Fleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.Fleet not found", name)
}

// GetAllAppStreamImageBuilderResources retrieves all appstream.ImageBuilder items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamImageBuilderResources() map[string]*appstream.ImageBuilder[any] {
	results := map[string]*appstream.ImageBuilder[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.ImageBuilder[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamImageBuilderWithName retrieves all appstream.ImageBuilder items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamImageBuilderWithName(name string) (*appstream.ImageBuilder[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.ImageBuilder[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.ImageBuilder not found", name)
}

// GetAllAppStreamStackResources retrieves all appstream.Stack items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamStackResources() map[string]*appstream.Stack[any] {
	results := map[string]*appstream.Stack[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.Stack[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamStackWithName retrieves all appstream.Stack items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamStackWithName(name string) (*appstream.Stack[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.Stack[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.Stack not found", name)
}

// GetAllAppStreamStackFleetAssociationResources retrieves all appstream.StackFleetAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamStackFleetAssociationResources() map[string]*appstream.StackFleetAssociation[any] {
	results := map[string]*appstream.StackFleetAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.StackFleetAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamStackFleetAssociationWithName retrieves all appstream.StackFleetAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamStackFleetAssociationWithName(name string) (*appstream.StackFleetAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.StackFleetAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.StackFleetAssociation not found", name)
}

// GetAllAppStreamStackUserAssociationResources retrieves all appstream.StackUserAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamStackUserAssociationResources() map[string]*appstream.StackUserAssociation[any] {
	results := map[string]*appstream.StackUserAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.StackUserAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamStackUserAssociationWithName retrieves all appstream.StackUserAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamStackUserAssociationWithName(name string) (*appstream.StackUserAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.StackUserAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.StackUserAssociation not found", name)
}

// GetAllAppStreamUserResources retrieves all appstream.User items from an AWS CloudFormation template
func (t *Template) GetAllAppStreamUserResources() map[string]*appstream.User[any] {
	results := map[string]*appstream.User[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appstream.User[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppStreamUserWithName retrieves all appstream.User items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppStreamUserWithName(name string) (*appstream.User[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appstream.User[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appstream.User not found", name)
}

// GetAllAppSyncApiCacheResources retrieves all appsync.ApiCache items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncApiCacheResources() map[string]*appsync.ApiCache[any] {
	results := map[string]*appsync.ApiCache[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.ApiCache[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncApiCacheWithName retrieves all appsync.ApiCache items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncApiCacheWithName(name string) (*appsync.ApiCache[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.ApiCache[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.ApiCache not found", name)
}

// GetAllAppSyncApiKeyResources retrieves all appsync.ApiKey items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncApiKeyResources() map[string]*appsync.ApiKey[any] {
	results := map[string]*appsync.ApiKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.ApiKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncApiKeyWithName retrieves all appsync.ApiKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncApiKeyWithName(name string) (*appsync.ApiKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.ApiKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.ApiKey not found", name)
}

// GetAllAppSyncDataSourceResources retrieves all appsync.DataSource items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncDataSourceResources() map[string]*appsync.DataSource[any] {
	results := map[string]*appsync.DataSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.DataSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncDataSourceWithName retrieves all appsync.DataSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncDataSourceWithName(name string) (*appsync.DataSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.DataSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.DataSource not found", name)
}

// GetAllAppSyncDomainNameResources retrieves all appsync.DomainName items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncDomainNameResources() map[string]*appsync.DomainName[any] {
	results := map[string]*appsync.DomainName[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.DomainName[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncDomainNameWithName retrieves all appsync.DomainName items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncDomainNameWithName(name string) (*appsync.DomainName[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.DomainName[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.DomainName not found", name)
}

// GetAllAppSyncDomainNameApiAssociationResources retrieves all appsync.DomainNameApiAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncDomainNameApiAssociationResources() map[string]*appsync.DomainNameApiAssociation[any] {
	results := map[string]*appsync.DomainNameApiAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.DomainNameApiAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncDomainNameApiAssociationWithName retrieves all appsync.DomainNameApiAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncDomainNameApiAssociationWithName(name string) (*appsync.DomainNameApiAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.DomainNameApiAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.DomainNameApiAssociation not found", name)
}

// GetAllAppSyncFunctionConfigurationResources retrieves all appsync.FunctionConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncFunctionConfigurationResources() map[string]*appsync.FunctionConfiguration[any] {
	results := map[string]*appsync.FunctionConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.FunctionConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncFunctionConfigurationWithName retrieves all appsync.FunctionConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncFunctionConfigurationWithName(name string) (*appsync.FunctionConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.FunctionConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.FunctionConfiguration not found", name)
}

// GetAllAppSyncGraphQLApiResources retrieves all appsync.GraphQLApi items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncGraphQLApiResources() map[string]*appsync.GraphQLApi[any] {
	results := map[string]*appsync.GraphQLApi[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.GraphQLApi[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncGraphQLApiWithName retrieves all appsync.GraphQLApi items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncGraphQLApiWithName(name string) (*appsync.GraphQLApi[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.GraphQLApi[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.GraphQLApi not found", name)
}

// GetAllAppSyncGraphQLSchemaResources retrieves all appsync.GraphQLSchema items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncGraphQLSchemaResources() map[string]*appsync.GraphQLSchema[any] {
	results := map[string]*appsync.GraphQLSchema[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.GraphQLSchema[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncGraphQLSchemaWithName retrieves all appsync.GraphQLSchema items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncGraphQLSchemaWithName(name string) (*appsync.GraphQLSchema[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.GraphQLSchema[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.GraphQLSchema not found", name)
}

// GetAllAppSyncResolverResources retrieves all appsync.Resolver items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncResolverResources() map[string]*appsync.Resolver[any] {
	results := map[string]*appsync.Resolver[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.Resolver[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncResolverWithName retrieves all appsync.Resolver items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncResolverWithName(name string) (*appsync.Resolver[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.Resolver[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.Resolver not found", name)
}

// GetAllAppSyncSourceApiAssociationResources retrieves all appsync.SourceApiAssociation items from an AWS CloudFormation template
func (t *Template) GetAllAppSyncSourceApiAssociationResources() map[string]*appsync.SourceApiAssociation[any] {
	results := map[string]*appsync.SourceApiAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *appsync.SourceApiAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAppSyncSourceApiAssociationWithName retrieves all appsync.SourceApiAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAppSyncSourceApiAssociationWithName(name string) (*appsync.SourceApiAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *appsync.SourceApiAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type appsync.SourceApiAssociation not found", name)
}

// GetAllApplicationAutoScalingScalableTargetResources retrieves all applicationautoscaling.ScalableTarget items from an AWS CloudFormation template
func (t *Template) GetAllApplicationAutoScalingScalableTargetResources() map[string]*applicationautoscaling.ScalableTarget[any] {
	results := map[string]*applicationautoscaling.ScalableTarget[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *applicationautoscaling.ScalableTarget[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApplicationAutoScalingScalableTargetWithName retrieves all applicationautoscaling.ScalableTarget items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApplicationAutoScalingScalableTargetWithName(name string) (*applicationautoscaling.ScalableTarget[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *applicationautoscaling.ScalableTarget[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type applicationautoscaling.ScalableTarget not found", name)
}

// GetAllApplicationAutoScalingScalingPolicyResources retrieves all applicationautoscaling.ScalingPolicy items from an AWS CloudFormation template
func (t *Template) GetAllApplicationAutoScalingScalingPolicyResources() map[string]*applicationautoscaling.ScalingPolicy[any] {
	results := map[string]*applicationautoscaling.ScalingPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *applicationautoscaling.ScalingPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApplicationAutoScalingScalingPolicyWithName retrieves all applicationautoscaling.ScalingPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApplicationAutoScalingScalingPolicyWithName(name string) (*applicationautoscaling.ScalingPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *applicationautoscaling.ScalingPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type applicationautoscaling.ScalingPolicy not found", name)
}

// GetAllApplicationInsightsApplicationResources retrieves all applicationinsights.Application items from an AWS CloudFormation template
func (t *Template) GetAllApplicationInsightsApplicationResources() map[string]*applicationinsights.Application[any] {
	results := map[string]*applicationinsights.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *applicationinsights.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetApplicationInsightsApplicationWithName retrieves all applicationinsights.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetApplicationInsightsApplicationWithName(name string) (*applicationinsights.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *applicationinsights.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type applicationinsights.Application not found", name)
}

// GetAllAthenaDataCatalogResources retrieves all athena.DataCatalog items from an AWS CloudFormation template
func (t *Template) GetAllAthenaDataCatalogResources() map[string]*athena.DataCatalog[any] {
	results := map[string]*athena.DataCatalog[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *athena.DataCatalog[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAthenaDataCatalogWithName retrieves all athena.DataCatalog items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAthenaDataCatalogWithName(name string) (*athena.DataCatalog[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *athena.DataCatalog[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type athena.DataCatalog not found", name)
}

// GetAllAthenaNamedQueryResources retrieves all athena.NamedQuery items from an AWS CloudFormation template
func (t *Template) GetAllAthenaNamedQueryResources() map[string]*athena.NamedQuery[any] {
	results := map[string]*athena.NamedQuery[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *athena.NamedQuery[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAthenaNamedQueryWithName retrieves all athena.NamedQuery items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAthenaNamedQueryWithName(name string) (*athena.NamedQuery[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *athena.NamedQuery[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type athena.NamedQuery not found", name)
}

// GetAllAthenaPreparedStatementResources retrieves all athena.PreparedStatement items from an AWS CloudFormation template
func (t *Template) GetAllAthenaPreparedStatementResources() map[string]*athena.PreparedStatement[any] {
	results := map[string]*athena.PreparedStatement[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *athena.PreparedStatement[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAthenaPreparedStatementWithName retrieves all athena.PreparedStatement items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAthenaPreparedStatementWithName(name string) (*athena.PreparedStatement[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *athena.PreparedStatement[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type athena.PreparedStatement not found", name)
}

// GetAllAthenaWorkGroupResources retrieves all athena.WorkGroup items from an AWS CloudFormation template
func (t *Template) GetAllAthenaWorkGroupResources() map[string]*athena.WorkGroup[any] {
	results := map[string]*athena.WorkGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *athena.WorkGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAthenaWorkGroupWithName retrieves all athena.WorkGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAthenaWorkGroupWithName(name string) (*athena.WorkGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *athena.WorkGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type athena.WorkGroup not found", name)
}

// GetAllAuditManagerAssessmentResources retrieves all auditmanager.Assessment items from an AWS CloudFormation template
func (t *Template) GetAllAuditManagerAssessmentResources() map[string]*auditmanager.Assessment[any] {
	results := map[string]*auditmanager.Assessment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *auditmanager.Assessment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAuditManagerAssessmentWithName retrieves all auditmanager.Assessment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAuditManagerAssessmentWithName(name string) (*auditmanager.Assessment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *auditmanager.Assessment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type auditmanager.Assessment not found", name)
}

// GetAllAutoScalingAutoScalingGroupResources retrieves all autoscaling.AutoScalingGroup items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingAutoScalingGroupResources() map[string]*autoscaling.AutoScalingGroup[any] {
	results := map[string]*autoscaling.AutoScalingGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscaling.AutoScalingGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingAutoScalingGroupWithName retrieves all autoscaling.AutoScalingGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingAutoScalingGroupWithName(name string) (*autoscaling.AutoScalingGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscaling.AutoScalingGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscaling.AutoScalingGroup not found", name)
}

// GetAllAutoScalingLaunchConfigurationResources retrieves all autoscaling.LaunchConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingLaunchConfigurationResources() map[string]*autoscaling.LaunchConfiguration[any] {
	results := map[string]*autoscaling.LaunchConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscaling.LaunchConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingLaunchConfigurationWithName retrieves all autoscaling.LaunchConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingLaunchConfigurationWithName(name string) (*autoscaling.LaunchConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscaling.LaunchConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscaling.LaunchConfiguration not found", name)
}

// GetAllAutoScalingLifecycleHookResources retrieves all autoscaling.LifecycleHook items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingLifecycleHookResources() map[string]*autoscaling.LifecycleHook[any] {
	results := map[string]*autoscaling.LifecycleHook[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscaling.LifecycleHook[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingLifecycleHookWithName retrieves all autoscaling.LifecycleHook items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingLifecycleHookWithName(name string) (*autoscaling.LifecycleHook[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscaling.LifecycleHook[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscaling.LifecycleHook not found", name)
}

// GetAllAutoScalingScalingPolicyResources retrieves all autoscaling.ScalingPolicy items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingScalingPolicyResources() map[string]*autoscaling.ScalingPolicy[any] {
	results := map[string]*autoscaling.ScalingPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscaling.ScalingPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingScalingPolicyWithName retrieves all autoscaling.ScalingPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingScalingPolicyWithName(name string) (*autoscaling.ScalingPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscaling.ScalingPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscaling.ScalingPolicy not found", name)
}

// GetAllAutoScalingScheduledActionResources retrieves all autoscaling.ScheduledAction items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingScheduledActionResources() map[string]*autoscaling.ScheduledAction[any] {
	results := map[string]*autoscaling.ScheduledAction[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscaling.ScheduledAction[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingScheduledActionWithName retrieves all autoscaling.ScheduledAction items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingScheduledActionWithName(name string) (*autoscaling.ScheduledAction[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscaling.ScheduledAction[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscaling.ScheduledAction not found", name)
}

// GetAllAutoScalingWarmPoolResources retrieves all autoscaling.WarmPool items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingWarmPoolResources() map[string]*autoscaling.WarmPool[any] {
	results := map[string]*autoscaling.WarmPool[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscaling.WarmPool[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingWarmPoolWithName retrieves all autoscaling.WarmPool items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingWarmPoolWithName(name string) (*autoscaling.WarmPool[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscaling.WarmPool[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscaling.WarmPool not found", name)
}

// GetAllAutoScalingPlansScalingPlanResources retrieves all autoscalingplans.ScalingPlan items from an AWS CloudFormation template
func (t *Template) GetAllAutoScalingPlansScalingPlanResources() map[string]*autoscalingplans.ScalingPlan[any] {
	results := map[string]*autoscalingplans.ScalingPlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *autoscalingplans.ScalingPlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetAutoScalingPlansScalingPlanWithName retrieves all autoscalingplans.ScalingPlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetAutoScalingPlansScalingPlanWithName(name string) (*autoscalingplans.ScalingPlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *autoscalingplans.ScalingPlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type autoscalingplans.ScalingPlan not found", name)
}

// GetAllBackupBackupPlanResources retrieves all backup.BackupPlan items from an AWS CloudFormation template
func (t *Template) GetAllBackupBackupPlanResources() map[string]*backup.BackupPlan[any] {
	results := map[string]*backup.BackupPlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *backup.BackupPlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBackupBackupPlanWithName retrieves all backup.BackupPlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBackupBackupPlanWithName(name string) (*backup.BackupPlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *backup.BackupPlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type backup.BackupPlan not found", name)
}

// GetAllBackupBackupSelectionResources retrieves all backup.BackupSelection items from an AWS CloudFormation template
func (t *Template) GetAllBackupBackupSelectionResources() map[string]*backup.BackupSelection[any] {
	results := map[string]*backup.BackupSelection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *backup.BackupSelection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBackupBackupSelectionWithName retrieves all backup.BackupSelection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBackupBackupSelectionWithName(name string) (*backup.BackupSelection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *backup.BackupSelection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type backup.BackupSelection not found", name)
}

// GetAllBackupBackupVaultResources retrieves all backup.BackupVault items from an AWS CloudFormation template
func (t *Template) GetAllBackupBackupVaultResources() map[string]*backup.BackupVault[any] {
	results := map[string]*backup.BackupVault[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *backup.BackupVault[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBackupBackupVaultWithName retrieves all backup.BackupVault items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBackupBackupVaultWithName(name string) (*backup.BackupVault[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *backup.BackupVault[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type backup.BackupVault not found", name)
}

// GetAllBackupFrameworkResources retrieves all backup.Framework items from an AWS CloudFormation template
func (t *Template) GetAllBackupFrameworkResources() map[string]*backup.Framework[any] {
	results := map[string]*backup.Framework[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *backup.Framework[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBackupFrameworkWithName retrieves all backup.Framework items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBackupFrameworkWithName(name string) (*backup.Framework[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *backup.Framework[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type backup.Framework not found", name)
}

// GetAllBackupReportPlanResources retrieves all backup.ReportPlan items from an AWS CloudFormation template
func (t *Template) GetAllBackupReportPlanResources() map[string]*backup.ReportPlan[any] {
	results := map[string]*backup.ReportPlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *backup.ReportPlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBackupReportPlanWithName retrieves all backup.ReportPlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBackupReportPlanWithName(name string) (*backup.ReportPlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *backup.ReportPlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type backup.ReportPlan not found", name)
}

// GetAllBackupGatewayHypervisorResources retrieves all backupgateway.Hypervisor items from an AWS CloudFormation template
func (t *Template) GetAllBackupGatewayHypervisorResources() map[string]*backupgateway.Hypervisor[any] {
	results := map[string]*backupgateway.Hypervisor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *backupgateway.Hypervisor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBackupGatewayHypervisorWithName retrieves all backupgateway.Hypervisor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBackupGatewayHypervisorWithName(name string) (*backupgateway.Hypervisor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *backupgateway.Hypervisor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type backupgateway.Hypervisor not found", name)
}

// GetAllBatchComputeEnvironmentResources retrieves all batch.ComputeEnvironment items from an AWS CloudFormation template
func (t *Template) GetAllBatchComputeEnvironmentResources() map[string]*batch.ComputeEnvironment[any] {
	results := map[string]*batch.ComputeEnvironment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *batch.ComputeEnvironment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBatchComputeEnvironmentWithName retrieves all batch.ComputeEnvironment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBatchComputeEnvironmentWithName(name string) (*batch.ComputeEnvironment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *batch.ComputeEnvironment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type batch.ComputeEnvironment not found", name)
}

// GetAllBatchJobDefinitionResources retrieves all batch.JobDefinition items from an AWS CloudFormation template
func (t *Template) GetAllBatchJobDefinitionResources() map[string]*batch.JobDefinition[any] {
	results := map[string]*batch.JobDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *batch.JobDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBatchJobDefinitionWithName retrieves all batch.JobDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBatchJobDefinitionWithName(name string) (*batch.JobDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *batch.JobDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type batch.JobDefinition not found", name)
}

// GetAllBatchJobQueueResources retrieves all batch.JobQueue items from an AWS CloudFormation template
func (t *Template) GetAllBatchJobQueueResources() map[string]*batch.JobQueue[any] {
	results := map[string]*batch.JobQueue[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *batch.JobQueue[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBatchJobQueueWithName retrieves all batch.JobQueue items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBatchJobQueueWithName(name string) (*batch.JobQueue[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *batch.JobQueue[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type batch.JobQueue not found", name)
}

// GetAllBatchSchedulingPolicyResources retrieves all batch.SchedulingPolicy items from an AWS CloudFormation template
func (t *Template) GetAllBatchSchedulingPolicyResources() map[string]*batch.SchedulingPolicy[any] {
	results := map[string]*batch.SchedulingPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *batch.SchedulingPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBatchSchedulingPolicyWithName retrieves all batch.SchedulingPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBatchSchedulingPolicyWithName(name string) (*batch.SchedulingPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *batch.SchedulingPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type batch.SchedulingPolicy not found", name)
}

// GetAllBillingConductorBillingGroupResources retrieves all billingconductor.BillingGroup items from an AWS CloudFormation template
func (t *Template) GetAllBillingConductorBillingGroupResources() map[string]*billingconductor.BillingGroup[any] {
	results := map[string]*billingconductor.BillingGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *billingconductor.BillingGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBillingConductorBillingGroupWithName retrieves all billingconductor.BillingGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBillingConductorBillingGroupWithName(name string) (*billingconductor.BillingGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *billingconductor.BillingGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type billingconductor.BillingGroup not found", name)
}

// GetAllBillingConductorCustomLineItemResources retrieves all billingconductor.CustomLineItem items from an AWS CloudFormation template
func (t *Template) GetAllBillingConductorCustomLineItemResources() map[string]*billingconductor.CustomLineItem[any] {
	results := map[string]*billingconductor.CustomLineItem[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *billingconductor.CustomLineItem[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBillingConductorCustomLineItemWithName retrieves all billingconductor.CustomLineItem items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBillingConductorCustomLineItemWithName(name string) (*billingconductor.CustomLineItem[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *billingconductor.CustomLineItem[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type billingconductor.CustomLineItem not found", name)
}

// GetAllBillingConductorPricingPlanResources retrieves all billingconductor.PricingPlan items from an AWS CloudFormation template
func (t *Template) GetAllBillingConductorPricingPlanResources() map[string]*billingconductor.PricingPlan[any] {
	results := map[string]*billingconductor.PricingPlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *billingconductor.PricingPlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBillingConductorPricingPlanWithName retrieves all billingconductor.PricingPlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBillingConductorPricingPlanWithName(name string) (*billingconductor.PricingPlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *billingconductor.PricingPlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type billingconductor.PricingPlan not found", name)
}

// GetAllBillingConductorPricingRuleResources retrieves all billingconductor.PricingRule items from an AWS CloudFormation template
func (t *Template) GetAllBillingConductorPricingRuleResources() map[string]*billingconductor.PricingRule[any] {
	results := map[string]*billingconductor.PricingRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *billingconductor.PricingRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBillingConductorPricingRuleWithName retrieves all billingconductor.PricingRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBillingConductorPricingRuleWithName(name string) (*billingconductor.PricingRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *billingconductor.PricingRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type billingconductor.PricingRule not found", name)
}

// GetAllBudgetsBudgetResources retrieves all budgets.Budget items from an AWS CloudFormation template
func (t *Template) GetAllBudgetsBudgetResources() map[string]*budgets.Budget[any] {
	results := map[string]*budgets.Budget[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *budgets.Budget[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBudgetsBudgetWithName retrieves all budgets.Budget items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBudgetsBudgetWithName(name string) (*budgets.Budget[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *budgets.Budget[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type budgets.Budget not found", name)
}

// GetAllBudgetsBudgetsActionResources retrieves all budgets.BudgetsAction items from an AWS CloudFormation template
func (t *Template) GetAllBudgetsBudgetsActionResources() map[string]*budgets.BudgetsAction[any] {
	results := map[string]*budgets.BudgetsAction[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *budgets.BudgetsAction[any]:
			results[name] = resource
		}
	}
	return results
}

// GetBudgetsBudgetsActionWithName retrieves all budgets.BudgetsAction items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetBudgetsBudgetsActionWithName(name string) (*budgets.BudgetsAction[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *budgets.BudgetsAction[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type budgets.BudgetsAction not found", name)
}

// GetAllCDKMetadataResources retrieves all cdk.Metadata items from an AWS CloudFormation template
func (t *Template) GetAllCDKMetadataResources() map[string]*cdk.Metadata[any] {
	results := map[string]*cdk.Metadata[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cdk.Metadata[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCDKMetadataWithName retrieves all cdk.Metadata items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCDKMetadataWithName(name string) (*cdk.Metadata[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cdk.Metadata[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cdk.Metadata not found", name)
}

// GetAllCEAnomalyMonitorResources retrieves all ce.AnomalyMonitor items from an AWS CloudFormation template
func (t *Template) GetAllCEAnomalyMonitorResources() map[string]*ce.AnomalyMonitor[any] {
	results := map[string]*ce.AnomalyMonitor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ce.AnomalyMonitor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCEAnomalyMonitorWithName retrieves all ce.AnomalyMonitor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCEAnomalyMonitorWithName(name string) (*ce.AnomalyMonitor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ce.AnomalyMonitor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ce.AnomalyMonitor not found", name)
}

// GetAllCEAnomalySubscriptionResources retrieves all ce.AnomalySubscription items from an AWS CloudFormation template
func (t *Template) GetAllCEAnomalySubscriptionResources() map[string]*ce.AnomalySubscription[any] {
	results := map[string]*ce.AnomalySubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ce.AnomalySubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCEAnomalySubscriptionWithName retrieves all ce.AnomalySubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCEAnomalySubscriptionWithName(name string) (*ce.AnomalySubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ce.AnomalySubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ce.AnomalySubscription not found", name)
}

// GetAllCECostCategoryResources retrieves all ce.CostCategory items from an AWS CloudFormation template
func (t *Template) GetAllCECostCategoryResources() map[string]*ce.CostCategory[any] {
	results := map[string]*ce.CostCategory[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ce.CostCategory[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCECostCategoryWithName retrieves all ce.CostCategory items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCECostCategoryWithName(name string) (*ce.CostCategory[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ce.CostCategory[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ce.CostCategory not found", name)
}

// GetAllCURReportDefinitionResources retrieves all cur.ReportDefinition items from an AWS CloudFormation template
func (t *Template) GetAllCURReportDefinitionResources() map[string]*cur.ReportDefinition[any] {
	results := map[string]*cur.ReportDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cur.ReportDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCURReportDefinitionWithName retrieves all cur.ReportDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCURReportDefinitionWithName(name string) (*cur.ReportDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cur.ReportDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cur.ReportDefinition not found", name)
}

// GetAllCassandraKeyspaceResources retrieves all cassandra.Keyspace items from an AWS CloudFormation template
func (t *Template) GetAllCassandraKeyspaceResources() map[string]*cassandra.Keyspace[any] {
	results := map[string]*cassandra.Keyspace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cassandra.Keyspace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCassandraKeyspaceWithName retrieves all cassandra.Keyspace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCassandraKeyspaceWithName(name string) (*cassandra.Keyspace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cassandra.Keyspace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cassandra.Keyspace not found", name)
}

// GetAllCassandraTableResources retrieves all cassandra.Table items from an AWS CloudFormation template
func (t *Template) GetAllCassandraTableResources() map[string]*cassandra.Table[any] {
	results := map[string]*cassandra.Table[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cassandra.Table[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCassandraTableWithName retrieves all cassandra.Table items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCassandraTableWithName(name string) (*cassandra.Table[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cassandra.Table[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cassandra.Table not found", name)
}

// GetAllCertificateManagerAccountResources retrieves all certificatemanager.Account items from an AWS CloudFormation template
func (t *Template) GetAllCertificateManagerAccountResources() map[string]*certificatemanager.Account[any] {
	results := map[string]*certificatemanager.Account[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *certificatemanager.Account[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCertificateManagerAccountWithName retrieves all certificatemanager.Account items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCertificateManagerAccountWithName(name string) (*certificatemanager.Account[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *certificatemanager.Account[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type certificatemanager.Account not found", name)
}

// GetAllCertificateManagerCertificateResources retrieves all certificatemanager.Certificate items from an AWS CloudFormation template
func (t *Template) GetAllCertificateManagerCertificateResources() map[string]*certificatemanager.Certificate[any] {
	results := map[string]*certificatemanager.Certificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *certificatemanager.Certificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCertificateManagerCertificateWithName retrieves all certificatemanager.Certificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCertificateManagerCertificateWithName(name string) (*certificatemanager.Certificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *certificatemanager.Certificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type certificatemanager.Certificate not found", name)
}

// GetAllChatbotMicrosoftTeamsChannelConfigurationResources retrieves all chatbot.MicrosoftTeamsChannelConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllChatbotMicrosoftTeamsChannelConfigurationResources() map[string]*chatbot.MicrosoftTeamsChannelConfiguration[any] {
	results := map[string]*chatbot.MicrosoftTeamsChannelConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *chatbot.MicrosoftTeamsChannelConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetChatbotMicrosoftTeamsChannelConfigurationWithName retrieves all chatbot.MicrosoftTeamsChannelConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetChatbotMicrosoftTeamsChannelConfigurationWithName(name string) (*chatbot.MicrosoftTeamsChannelConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *chatbot.MicrosoftTeamsChannelConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type chatbot.MicrosoftTeamsChannelConfiguration not found", name)
}

// GetAllChatbotSlackChannelConfigurationResources retrieves all chatbot.SlackChannelConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllChatbotSlackChannelConfigurationResources() map[string]*chatbot.SlackChannelConfiguration[any] {
	results := map[string]*chatbot.SlackChannelConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *chatbot.SlackChannelConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetChatbotSlackChannelConfigurationWithName retrieves all chatbot.SlackChannelConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetChatbotSlackChannelConfigurationWithName(name string) (*chatbot.SlackChannelConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *chatbot.SlackChannelConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type chatbot.SlackChannelConfiguration not found", name)
}

// GetAllCloud9EnvironmentEC2Resources retrieves all cloud9.EnvironmentEC2 items from an AWS CloudFormation template
func (t *Template) GetAllCloud9EnvironmentEC2Resources() map[string]*cloud9.EnvironmentEC2[any] {
	results := map[string]*cloud9.EnvironmentEC2[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloud9.EnvironmentEC2[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloud9EnvironmentEC2WithName retrieves all cloud9.EnvironmentEC2 items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloud9EnvironmentEC2WithName(name string) (*cloud9.EnvironmentEC2[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloud9.EnvironmentEC2[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloud9.EnvironmentEC2 not found", name)
}

// GetAllCloudFormationCustomResourceResources retrieves all cloudformation.CustomResource items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationCustomResourceResources() map[string]*cloudformation.CustomResource[any] {
	results := map[string]*cloudformation.CustomResource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.CustomResource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationCustomResourceWithName retrieves all cloudformation.CustomResource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationCustomResourceWithName(name string) (*cloudformation.CustomResource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.CustomResource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.CustomResource not found", name)
}

// GetAllCloudFormationHookDefaultVersionResources retrieves all cloudformation.HookDefaultVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationHookDefaultVersionResources() map[string]*cloudformation.HookDefaultVersion[any] {
	results := map[string]*cloudformation.HookDefaultVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.HookDefaultVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationHookDefaultVersionWithName retrieves all cloudformation.HookDefaultVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationHookDefaultVersionWithName(name string) (*cloudformation.HookDefaultVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.HookDefaultVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.HookDefaultVersion not found", name)
}

// GetAllCloudFormationHookTypeConfigResources retrieves all cloudformation.HookTypeConfig items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationHookTypeConfigResources() map[string]*cloudformation.HookTypeConfig[any] {
	results := map[string]*cloudformation.HookTypeConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.HookTypeConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationHookTypeConfigWithName retrieves all cloudformation.HookTypeConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationHookTypeConfigWithName(name string) (*cloudformation.HookTypeConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.HookTypeConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.HookTypeConfig not found", name)
}

// GetAllCloudFormationHookVersionResources retrieves all cloudformation.HookVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationHookVersionResources() map[string]*cloudformation.HookVersion[any] {
	results := map[string]*cloudformation.HookVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.HookVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationHookVersionWithName retrieves all cloudformation.HookVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationHookVersionWithName(name string) (*cloudformation.HookVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.HookVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.HookVersion not found", name)
}

// GetAllCloudFormationMacroResources retrieves all cloudformation.Macro items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationMacroResources() map[string]*cloudformation.Macro[any] {
	results := map[string]*cloudformation.Macro[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.Macro[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationMacroWithName retrieves all cloudformation.Macro items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationMacroWithName(name string) (*cloudformation.Macro[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.Macro[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.Macro not found", name)
}

// GetAllCloudFormationModuleDefaultVersionResources retrieves all cloudformation.ModuleDefaultVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationModuleDefaultVersionResources() map[string]*cloudformation.ModuleDefaultVersion[any] {
	results := map[string]*cloudformation.ModuleDefaultVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.ModuleDefaultVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationModuleDefaultVersionWithName retrieves all cloudformation.ModuleDefaultVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationModuleDefaultVersionWithName(name string) (*cloudformation.ModuleDefaultVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.ModuleDefaultVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.ModuleDefaultVersion not found", name)
}

// GetAllCloudFormationModuleVersionResources retrieves all cloudformation.ModuleVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationModuleVersionResources() map[string]*cloudformation.ModuleVersion[any] {
	results := map[string]*cloudformation.ModuleVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.ModuleVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationModuleVersionWithName retrieves all cloudformation.ModuleVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationModuleVersionWithName(name string) (*cloudformation.ModuleVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.ModuleVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.ModuleVersion not found", name)
}

// GetAllCloudFormationPublicTypeVersionResources retrieves all cloudformation.PublicTypeVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationPublicTypeVersionResources() map[string]*cloudformation.PublicTypeVersion[any] {
	results := map[string]*cloudformation.PublicTypeVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.PublicTypeVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationPublicTypeVersionWithName retrieves all cloudformation.PublicTypeVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationPublicTypeVersionWithName(name string) (*cloudformation.PublicTypeVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.PublicTypeVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.PublicTypeVersion not found", name)
}

// GetAllCloudFormationPublisherResources retrieves all cloudformation.Publisher items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationPublisherResources() map[string]*cloudformation.Publisher[any] {
	results := map[string]*cloudformation.Publisher[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.Publisher[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationPublisherWithName retrieves all cloudformation.Publisher items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationPublisherWithName(name string) (*cloudformation.Publisher[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.Publisher[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.Publisher not found", name)
}

// GetAllCloudFormationResourceDefaultVersionResources retrieves all cloudformation.ResourceDefaultVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationResourceDefaultVersionResources() map[string]*cloudformation.ResourceDefaultVersion[any] {
	results := map[string]*cloudformation.ResourceDefaultVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.ResourceDefaultVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationResourceDefaultVersionWithName retrieves all cloudformation.ResourceDefaultVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationResourceDefaultVersionWithName(name string) (*cloudformation.ResourceDefaultVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.ResourceDefaultVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.ResourceDefaultVersion not found", name)
}

// GetAllCloudFormationResourceVersionResources retrieves all cloudformation.ResourceVersion items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationResourceVersionResources() map[string]*cloudformation.ResourceVersion[any] {
	results := map[string]*cloudformation.ResourceVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.ResourceVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationResourceVersionWithName retrieves all cloudformation.ResourceVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationResourceVersionWithName(name string) (*cloudformation.ResourceVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.ResourceVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.ResourceVersion not found", name)
}

// GetAllCloudFormationStackResources retrieves all cloudformation.Stack items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationStackResources() map[string]*cloudformation.Stack[any] {
	results := map[string]*cloudformation.Stack[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.Stack[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationStackWithName retrieves all cloudformation.Stack items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationStackWithName(name string) (*cloudformation.Stack[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.Stack[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.Stack not found", name)
}

// GetAllCloudFormationStackSetResources retrieves all cloudformation.StackSet items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationStackSetResources() map[string]*cloudformation.StackSet[any] {
	results := map[string]*cloudformation.StackSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.StackSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationStackSetWithName retrieves all cloudformation.StackSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationStackSetWithName(name string) (*cloudformation.StackSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.StackSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.StackSet not found", name)
}

// GetAllCloudFormationTypeActivationResources retrieves all cloudformation.TypeActivation items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationTypeActivationResources() map[string]*cloudformation.TypeActivation[any] {
	results := map[string]*cloudformation.TypeActivation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.TypeActivation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationTypeActivationWithName retrieves all cloudformation.TypeActivation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationTypeActivationWithName(name string) (*cloudformation.TypeActivation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.TypeActivation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.TypeActivation not found", name)
}

// GetAllCloudFormationWaitConditionResources retrieves all cloudformation.WaitCondition items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationWaitConditionResources() map[string]*cloudformation.WaitCondition[any] {
	results := map[string]*cloudformation.WaitCondition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.WaitCondition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationWaitConditionWithName retrieves all cloudformation.WaitCondition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationWaitConditionWithName(name string) (*cloudformation.WaitCondition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.WaitCondition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.WaitCondition not found", name)
}

// GetAllCloudFormationWaitConditionHandleResources retrieves all cloudformation.WaitConditionHandle items from an AWS CloudFormation template
func (t *Template) GetAllCloudFormationWaitConditionHandleResources() map[string]*cloudformation.WaitConditionHandle[any] {
	results := map[string]*cloudformation.WaitConditionHandle[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudformation.WaitConditionHandle[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFormationWaitConditionHandleWithName retrieves all cloudformation.WaitConditionHandle items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFormationWaitConditionHandleWithName(name string) (*cloudformation.WaitConditionHandle[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudformation.WaitConditionHandle[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudformation.WaitConditionHandle not found", name)
}

// GetAllCloudFrontCachePolicyResources retrieves all cloudfront.CachePolicy items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontCachePolicyResources() map[string]*cloudfront.CachePolicy[any] {
	results := map[string]*cloudfront.CachePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.CachePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontCachePolicyWithName retrieves all cloudfront.CachePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontCachePolicyWithName(name string) (*cloudfront.CachePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.CachePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.CachePolicy not found", name)
}

// GetAllCloudFrontCloudFrontOriginAccessIdentityResources retrieves all cloudfront.CloudFrontOriginAccessIdentity items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontCloudFrontOriginAccessIdentityResources() map[string]*cloudfront.CloudFrontOriginAccessIdentity[any] {
	results := map[string]*cloudfront.CloudFrontOriginAccessIdentity[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.CloudFrontOriginAccessIdentity[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontCloudFrontOriginAccessIdentityWithName retrieves all cloudfront.CloudFrontOriginAccessIdentity items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontCloudFrontOriginAccessIdentityWithName(name string) (*cloudfront.CloudFrontOriginAccessIdentity[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.CloudFrontOriginAccessIdentity[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.CloudFrontOriginAccessIdentity not found", name)
}

// GetAllCloudFrontContinuousDeploymentPolicyResources retrieves all cloudfront.ContinuousDeploymentPolicy items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontContinuousDeploymentPolicyResources() map[string]*cloudfront.ContinuousDeploymentPolicy[any] {
	results := map[string]*cloudfront.ContinuousDeploymentPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.ContinuousDeploymentPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontContinuousDeploymentPolicyWithName retrieves all cloudfront.ContinuousDeploymentPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontContinuousDeploymentPolicyWithName(name string) (*cloudfront.ContinuousDeploymentPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.ContinuousDeploymentPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.ContinuousDeploymentPolicy not found", name)
}

// GetAllCloudFrontDistributionResources retrieves all cloudfront.Distribution items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontDistributionResources() map[string]*cloudfront.Distribution[any] {
	results := map[string]*cloudfront.Distribution[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.Distribution[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontDistributionWithName retrieves all cloudfront.Distribution items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontDistributionWithName(name string) (*cloudfront.Distribution[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.Distribution[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.Distribution not found", name)
}

// GetAllCloudFrontFunctionResources retrieves all cloudfront.Function items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontFunctionResources() map[string]*cloudfront.Function[any] {
	results := map[string]*cloudfront.Function[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.Function[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontFunctionWithName retrieves all cloudfront.Function items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontFunctionWithName(name string) (*cloudfront.Function[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.Function[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.Function not found", name)
}

// GetAllCloudFrontKeyGroupResources retrieves all cloudfront.KeyGroup items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontKeyGroupResources() map[string]*cloudfront.KeyGroup[any] {
	results := map[string]*cloudfront.KeyGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.KeyGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontKeyGroupWithName retrieves all cloudfront.KeyGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontKeyGroupWithName(name string) (*cloudfront.KeyGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.KeyGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.KeyGroup not found", name)
}

// GetAllCloudFrontMonitoringSubscriptionResources retrieves all cloudfront.MonitoringSubscription items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontMonitoringSubscriptionResources() map[string]*cloudfront.MonitoringSubscription[any] {
	results := map[string]*cloudfront.MonitoringSubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.MonitoringSubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontMonitoringSubscriptionWithName retrieves all cloudfront.MonitoringSubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontMonitoringSubscriptionWithName(name string) (*cloudfront.MonitoringSubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.MonitoringSubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.MonitoringSubscription not found", name)
}

// GetAllCloudFrontOriginAccessControlResources retrieves all cloudfront.OriginAccessControl items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontOriginAccessControlResources() map[string]*cloudfront.OriginAccessControl[any] {
	results := map[string]*cloudfront.OriginAccessControl[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.OriginAccessControl[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontOriginAccessControlWithName retrieves all cloudfront.OriginAccessControl items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontOriginAccessControlWithName(name string) (*cloudfront.OriginAccessControl[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.OriginAccessControl[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.OriginAccessControl not found", name)
}

// GetAllCloudFrontOriginRequestPolicyResources retrieves all cloudfront.OriginRequestPolicy items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontOriginRequestPolicyResources() map[string]*cloudfront.OriginRequestPolicy[any] {
	results := map[string]*cloudfront.OriginRequestPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.OriginRequestPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontOriginRequestPolicyWithName retrieves all cloudfront.OriginRequestPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontOriginRequestPolicyWithName(name string) (*cloudfront.OriginRequestPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.OriginRequestPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.OriginRequestPolicy not found", name)
}

// GetAllCloudFrontPublicKeyResources retrieves all cloudfront.PublicKey items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontPublicKeyResources() map[string]*cloudfront.PublicKey[any] {
	results := map[string]*cloudfront.PublicKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.PublicKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontPublicKeyWithName retrieves all cloudfront.PublicKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontPublicKeyWithName(name string) (*cloudfront.PublicKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.PublicKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.PublicKey not found", name)
}

// GetAllCloudFrontRealtimeLogConfigResources retrieves all cloudfront.RealtimeLogConfig items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontRealtimeLogConfigResources() map[string]*cloudfront.RealtimeLogConfig[any] {
	results := map[string]*cloudfront.RealtimeLogConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.RealtimeLogConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontRealtimeLogConfigWithName retrieves all cloudfront.RealtimeLogConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontRealtimeLogConfigWithName(name string) (*cloudfront.RealtimeLogConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.RealtimeLogConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.RealtimeLogConfig not found", name)
}

// GetAllCloudFrontResponseHeadersPolicyResources retrieves all cloudfront.ResponseHeadersPolicy items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontResponseHeadersPolicyResources() map[string]*cloudfront.ResponseHeadersPolicy[any] {
	results := map[string]*cloudfront.ResponseHeadersPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.ResponseHeadersPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontResponseHeadersPolicyWithName retrieves all cloudfront.ResponseHeadersPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontResponseHeadersPolicyWithName(name string) (*cloudfront.ResponseHeadersPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.ResponseHeadersPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.ResponseHeadersPolicy not found", name)
}

// GetAllCloudFrontStreamingDistributionResources retrieves all cloudfront.StreamingDistribution items from an AWS CloudFormation template
func (t *Template) GetAllCloudFrontStreamingDistributionResources() map[string]*cloudfront.StreamingDistribution[any] {
	results := map[string]*cloudfront.StreamingDistribution[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudfront.StreamingDistribution[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudFrontStreamingDistributionWithName retrieves all cloudfront.StreamingDistribution items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudFrontStreamingDistributionWithName(name string) (*cloudfront.StreamingDistribution[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudfront.StreamingDistribution[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudfront.StreamingDistribution not found", name)
}

// GetAllCloudTrailChannelResources retrieves all cloudtrail.Channel items from an AWS CloudFormation template
func (t *Template) GetAllCloudTrailChannelResources() map[string]*cloudtrail.Channel[any] {
	results := map[string]*cloudtrail.Channel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudtrail.Channel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudTrailChannelWithName retrieves all cloudtrail.Channel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudTrailChannelWithName(name string) (*cloudtrail.Channel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudtrail.Channel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudtrail.Channel not found", name)
}

// GetAllCloudTrailEventDataStoreResources retrieves all cloudtrail.EventDataStore items from an AWS CloudFormation template
func (t *Template) GetAllCloudTrailEventDataStoreResources() map[string]*cloudtrail.EventDataStore[any] {
	results := map[string]*cloudtrail.EventDataStore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudtrail.EventDataStore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudTrailEventDataStoreWithName retrieves all cloudtrail.EventDataStore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudTrailEventDataStoreWithName(name string) (*cloudtrail.EventDataStore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudtrail.EventDataStore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudtrail.EventDataStore not found", name)
}

// GetAllCloudTrailResourcePolicyResources retrieves all cloudtrail.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllCloudTrailResourcePolicyResources() map[string]*cloudtrail.ResourcePolicy[any] {
	results := map[string]*cloudtrail.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudtrail.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudTrailResourcePolicyWithName retrieves all cloudtrail.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudTrailResourcePolicyWithName(name string) (*cloudtrail.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudtrail.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudtrail.ResourcePolicy not found", name)
}

// GetAllCloudTrailTrailResources retrieves all cloudtrail.Trail items from an AWS CloudFormation template
func (t *Template) GetAllCloudTrailTrailResources() map[string]*cloudtrail.Trail[any] {
	results := map[string]*cloudtrail.Trail[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudtrail.Trail[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudTrailTrailWithName retrieves all cloudtrail.Trail items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudTrailTrailWithName(name string) (*cloudtrail.Trail[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudtrail.Trail[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudtrail.Trail not found", name)
}

// GetAllCloudWatchAlarmResources retrieves all cloudwatch.Alarm items from an AWS CloudFormation template
func (t *Template) GetAllCloudWatchAlarmResources() map[string]*cloudwatch.Alarm[any] {
	results := map[string]*cloudwatch.Alarm[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudwatch.Alarm[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudWatchAlarmWithName retrieves all cloudwatch.Alarm items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudWatchAlarmWithName(name string) (*cloudwatch.Alarm[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudwatch.Alarm[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudwatch.Alarm not found", name)
}

// GetAllCloudWatchAnomalyDetectorResources retrieves all cloudwatch.AnomalyDetector items from an AWS CloudFormation template
func (t *Template) GetAllCloudWatchAnomalyDetectorResources() map[string]*cloudwatch.AnomalyDetector[any] {
	results := map[string]*cloudwatch.AnomalyDetector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudwatch.AnomalyDetector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudWatchAnomalyDetectorWithName retrieves all cloudwatch.AnomalyDetector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudWatchAnomalyDetectorWithName(name string) (*cloudwatch.AnomalyDetector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudwatch.AnomalyDetector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudwatch.AnomalyDetector not found", name)
}

// GetAllCloudWatchCompositeAlarmResources retrieves all cloudwatch.CompositeAlarm items from an AWS CloudFormation template
func (t *Template) GetAllCloudWatchCompositeAlarmResources() map[string]*cloudwatch.CompositeAlarm[any] {
	results := map[string]*cloudwatch.CompositeAlarm[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudwatch.CompositeAlarm[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudWatchCompositeAlarmWithName retrieves all cloudwatch.CompositeAlarm items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudWatchCompositeAlarmWithName(name string) (*cloudwatch.CompositeAlarm[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudwatch.CompositeAlarm[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudwatch.CompositeAlarm not found", name)
}

// GetAllCloudWatchDashboardResources retrieves all cloudwatch.Dashboard items from an AWS CloudFormation template
func (t *Template) GetAllCloudWatchDashboardResources() map[string]*cloudwatch.Dashboard[any] {
	results := map[string]*cloudwatch.Dashboard[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudwatch.Dashboard[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudWatchDashboardWithName retrieves all cloudwatch.Dashboard items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudWatchDashboardWithName(name string) (*cloudwatch.Dashboard[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudwatch.Dashboard[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudwatch.Dashboard not found", name)
}

// GetAllCloudWatchInsightRuleResources retrieves all cloudwatch.InsightRule items from an AWS CloudFormation template
func (t *Template) GetAllCloudWatchInsightRuleResources() map[string]*cloudwatch.InsightRule[any] {
	results := map[string]*cloudwatch.InsightRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudwatch.InsightRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudWatchInsightRuleWithName retrieves all cloudwatch.InsightRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudWatchInsightRuleWithName(name string) (*cloudwatch.InsightRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudwatch.InsightRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudwatch.InsightRule not found", name)
}

// GetAllCloudWatchMetricStreamResources retrieves all cloudwatch.MetricStream items from an AWS CloudFormation template
func (t *Template) GetAllCloudWatchMetricStreamResources() map[string]*cloudwatch.MetricStream[any] {
	results := map[string]*cloudwatch.MetricStream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cloudwatch.MetricStream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCloudWatchMetricStreamWithName retrieves all cloudwatch.MetricStream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCloudWatchMetricStreamWithName(name string) (*cloudwatch.MetricStream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cloudwatch.MetricStream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cloudwatch.MetricStream not found", name)
}

// GetAllCodeArtifactDomainResources retrieves all codeartifact.Domain items from an AWS CloudFormation template
func (t *Template) GetAllCodeArtifactDomainResources() map[string]*codeartifact.Domain[any] {
	results := map[string]*codeartifact.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codeartifact.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeArtifactDomainWithName retrieves all codeartifact.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeArtifactDomainWithName(name string) (*codeartifact.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codeartifact.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codeartifact.Domain not found", name)
}

// GetAllCodeArtifactRepositoryResources retrieves all codeartifact.Repository items from an AWS CloudFormation template
func (t *Template) GetAllCodeArtifactRepositoryResources() map[string]*codeartifact.Repository[any] {
	results := map[string]*codeartifact.Repository[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codeartifact.Repository[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeArtifactRepositoryWithName retrieves all codeartifact.Repository items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeArtifactRepositoryWithName(name string) (*codeartifact.Repository[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codeartifact.Repository[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codeartifact.Repository not found", name)
}

// GetAllCodeBuildProjectResources retrieves all codebuild.Project items from an AWS CloudFormation template
func (t *Template) GetAllCodeBuildProjectResources() map[string]*codebuild.Project[any] {
	results := map[string]*codebuild.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codebuild.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeBuildProjectWithName retrieves all codebuild.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeBuildProjectWithName(name string) (*codebuild.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codebuild.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codebuild.Project not found", name)
}

// GetAllCodeBuildReportGroupResources retrieves all codebuild.ReportGroup items from an AWS CloudFormation template
func (t *Template) GetAllCodeBuildReportGroupResources() map[string]*codebuild.ReportGroup[any] {
	results := map[string]*codebuild.ReportGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codebuild.ReportGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeBuildReportGroupWithName retrieves all codebuild.ReportGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeBuildReportGroupWithName(name string) (*codebuild.ReportGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codebuild.ReportGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codebuild.ReportGroup not found", name)
}

// GetAllCodeBuildSourceCredentialResources retrieves all codebuild.SourceCredential items from an AWS CloudFormation template
func (t *Template) GetAllCodeBuildSourceCredentialResources() map[string]*codebuild.SourceCredential[any] {
	results := map[string]*codebuild.SourceCredential[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codebuild.SourceCredential[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeBuildSourceCredentialWithName retrieves all codebuild.SourceCredential items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeBuildSourceCredentialWithName(name string) (*codebuild.SourceCredential[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codebuild.SourceCredential[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codebuild.SourceCredential not found", name)
}

// GetAllCodeCommitRepositoryResources retrieves all codecommit.Repository items from an AWS CloudFormation template
func (t *Template) GetAllCodeCommitRepositoryResources() map[string]*codecommit.Repository[any] {
	results := map[string]*codecommit.Repository[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codecommit.Repository[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeCommitRepositoryWithName retrieves all codecommit.Repository items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeCommitRepositoryWithName(name string) (*codecommit.Repository[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codecommit.Repository[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codecommit.Repository not found", name)
}

// GetAllCodeDeployApplicationResources retrieves all codedeploy.Application items from an AWS CloudFormation template
func (t *Template) GetAllCodeDeployApplicationResources() map[string]*codedeploy.Application[any] {
	results := map[string]*codedeploy.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codedeploy.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeDeployApplicationWithName retrieves all codedeploy.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeDeployApplicationWithName(name string) (*codedeploy.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codedeploy.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codedeploy.Application not found", name)
}

// GetAllCodeDeployDeploymentConfigResources retrieves all codedeploy.DeploymentConfig items from an AWS CloudFormation template
func (t *Template) GetAllCodeDeployDeploymentConfigResources() map[string]*codedeploy.DeploymentConfig[any] {
	results := map[string]*codedeploy.DeploymentConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codedeploy.DeploymentConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeDeployDeploymentConfigWithName retrieves all codedeploy.DeploymentConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeDeployDeploymentConfigWithName(name string) (*codedeploy.DeploymentConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codedeploy.DeploymentConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codedeploy.DeploymentConfig not found", name)
}

// GetAllCodeDeployDeploymentGroupResources retrieves all codedeploy.DeploymentGroup items from an AWS CloudFormation template
func (t *Template) GetAllCodeDeployDeploymentGroupResources() map[string]*codedeploy.DeploymentGroup[any] {
	results := map[string]*codedeploy.DeploymentGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codedeploy.DeploymentGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeDeployDeploymentGroupWithName retrieves all codedeploy.DeploymentGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeDeployDeploymentGroupWithName(name string) (*codedeploy.DeploymentGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codedeploy.DeploymentGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codedeploy.DeploymentGroup not found", name)
}

// GetAllCodeGuruProfilerProfilingGroupResources retrieves all codeguruprofiler.ProfilingGroup items from an AWS CloudFormation template
func (t *Template) GetAllCodeGuruProfilerProfilingGroupResources() map[string]*codeguruprofiler.ProfilingGroup[any] {
	results := map[string]*codeguruprofiler.ProfilingGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codeguruprofiler.ProfilingGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeGuruProfilerProfilingGroupWithName retrieves all codeguruprofiler.ProfilingGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeGuruProfilerProfilingGroupWithName(name string) (*codeguruprofiler.ProfilingGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codeguruprofiler.ProfilingGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codeguruprofiler.ProfilingGroup not found", name)
}

// GetAllCodeGuruReviewerRepositoryAssociationResources retrieves all codegurureviewer.RepositoryAssociation items from an AWS CloudFormation template
func (t *Template) GetAllCodeGuruReviewerRepositoryAssociationResources() map[string]*codegurureviewer.RepositoryAssociation[any] {
	results := map[string]*codegurureviewer.RepositoryAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codegurureviewer.RepositoryAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeGuruReviewerRepositoryAssociationWithName retrieves all codegurureviewer.RepositoryAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeGuruReviewerRepositoryAssociationWithName(name string) (*codegurureviewer.RepositoryAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codegurureviewer.RepositoryAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codegurureviewer.RepositoryAssociation not found", name)
}

// GetAllCodePipelineCustomActionTypeResources retrieves all codepipeline.CustomActionType items from an AWS CloudFormation template
func (t *Template) GetAllCodePipelineCustomActionTypeResources() map[string]*codepipeline.CustomActionType[any] {
	results := map[string]*codepipeline.CustomActionType[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codepipeline.CustomActionType[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodePipelineCustomActionTypeWithName retrieves all codepipeline.CustomActionType items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodePipelineCustomActionTypeWithName(name string) (*codepipeline.CustomActionType[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codepipeline.CustomActionType[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codepipeline.CustomActionType not found", name)
}

// GetAllCodePipelinePipelineResources retrieves all codepipeline.Pipeline items from an AWS CloudFormation template
func (t *Template) GetAllCodePipelinePipelineResources() map[string]*codepipeline.Pipeline[any] {
	results := map[string]*codepipeline.Pipeline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codepipeline.Pipeline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodePipelinePipelineWithName retrieves all codepipeline.Pipeline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodePipelinePipelineWithName(name string) (*codepipeline.Pipeline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codepipeline.Pipeline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codepipeline.Pipeline not found", name)
}

// GetAllCodePipelineWebhookResources retrieves all codepipeline.Webhook items from an AWS CloudFormation template
func (t *Template) GetAllCodePipelineWebhookResources() map[string]*codepipeline.Webhook[any] {
	results := map[string]*codepipeline.Webhook[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codepipeline.Webhook[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodePipelineWebhookWithName retrieves all codepipeline.Webhook items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodePipelineWebhookWithName(name string) (*codepipeline.Webhook[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codepipeline.Webhook[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codepipeline.Webhook not found", name)
}

// GetAllCodeStarGitHubRepositoryResources retrieves all codestar.GitHubRepository items from an AWS CloudFormation template
func (t *Template) GetAllCodeStarGitHubRepositoryResources() map[string]*codestar.GitHubRepository[any] {
	results := map[string]*codestar.GitHubRepository[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codestar.GitHubRepository[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeStarGitHubRepositoryWithName retrieves all codestar.GitHubRepository items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeStarGitHubRepositoryWithName(name string) (*codestar.GitHubRepository[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codestar.GitHubRepository[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codestar.GitHubRepository not found", name)
}

// GetAllCodeStarConnectionsConnectionResources retrieves all codestarconnections.Connection items from an AWS CloudFormation template
func (t *Template) GetAllCodeStarConnectionsConnectionResources() map[string]*codestarconnections.Connection[any] {
	results := map[string]*codestarconnections.Connection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codestarconnections.Connection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeStarConnectionsConnectionWithName retrieves all codestarconnections.Connection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeStarConnectionsConnectionWithName(name string) (*codestarconnections.Connection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codestarconnections.Connection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codestarconnections.Connection not found", name)
}

// GetAllCodeStarNotificationsNotificationRuleResources retrieves all codestarnotifications.NotificationRule items from an AWS CloudFormation template
func (t *Template) GetAllCodeStarNotificationsNotificationRuleResources() map[string]*codestarnotifications.NotificationRule[any] {
	results := map[string]*codestarnotifications.NotificationRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *codestarnotifications.NotificationRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCodeStarNotificationsNotificationRuleWithName retrieves all codestarnotifications.NotificationRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCodeStarNotificationsNotificationRuleWithName(name string) (*codestarnotifications.NotificationRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *codestarnotifications.NotificationRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type codestarnotifications.NotificationRule not found", name)
}

// GetAllCognitoIdentityPoolResources retrieves all cognito.IdentityPool items from an AWS CloudFormation template
func (t *Template) GetAllCognitoIdentityPoolResources() map[string]*cognito.IdentityPool[any] {
	results := map[string]*cognito.IdentityPool[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.IdentityPool[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoIdentityPoolWithName retrieves all cognito.IdentityPool items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoIdentityPoolWithName(name string) (*cognito.IdentityPool[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.IdentityPool[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.IdentityPool not found", name)
}

// GetAllCognitoIdentityPoolPrincipalTagResources retrieves all cognito.IdentityPoolPrincipalTag items from an AWS CloudFormation template
func (t *Template) GetAllCognitoIdentityPoolPrincipalTagResources() map[string]*cognito.IdentityPoolPrincipalTag[any] {
	results := map[string]*cognito.IdentityPoolPrincipalTag[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.IdentityPoolPrincipalTag[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoIdentityPoolPrincipalTagWithName retrieves all cognito.IdentityPoolPrincipalTag items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoIdentityPoolPrincipalTagWithName(name string) (*cognito.IdentityPoolPrincipalTag[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.IdentityPoolPrincipalTag[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.IdentityPoolPrincipalTag not found", name)
}

// GetAllCognitoIdentityPoolRoleAttachmentResources retrieves all cognito.IdentityPoolRoleAttachment items from an AWS CloudFormation template
func (t *Template) GetAllCognitoIdentityPoolRoleAttachmentResources() map[string]*cognito.IdentityPoolRoleAttachment[any] {
	results := map[string]*cognito.IdentityPoolRoleAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.IdentityPoolRoleAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoIdentityPoolRoleAttachmentWithName retrieves all cognito.IdentityPoolRoleAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoIdentityPoolRoleAttachmentWithName(name string) (*cognito.IdentityPoolRoleAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.IdentityPoolRoleAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.IdentityPoolRoleAttachment not found", name)
}

// GetAllCognitoUserPoolResources retrieves all cognito.UserPool items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolResources() map[string]*cognito.UserPool[any] {
	results := map[string]*cognito.UserPool[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPool[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolWithName retrieves all cognito.UserPool items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolWithName(name string) (*cognito.UserPool[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPool[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPool not found", name)
}

// GetAllCognitoUserPoolClientResources retrieves all cognito.UserPoolClient items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolClientResources() map[string]*cognito.UserPoolClient[any] {
	results := map[string]*cognito.UserPoolClient[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolClient[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolClientWithName retrieves all cognito.UserPoolClient items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolClientWithName(name string) (*cognito.UserPoolClient[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolClient[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolClient not found", name)
}

// GetAllCognitoUserPoolDomainResources retrieves all cognito.UserPoolDomain items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolDomainResources() map[string]*cognito.UserPoolDomain[any] {
	results := map[string]*cognito.UserPoolDomain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolDomain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolDomainWithName retrieves all cognito.UserPoolDomain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolDomainWithName(name string) (*cognito.UserPoolDomain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolDomain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolDomain not found", name)
}

// GetAllCognitoUserPoolGroupResources retrieves all cognito.UserPoolGroup items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolGroupResources() map[string]*cognito.UserPoolGroup[any] {
	results := map[string]*cognito.UserPoolGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolGroupWithName retrieves all cognito.UserPoolGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolGroupWithName(name string) (*cognito.UserPoolGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolGroup not found", name)
}

// GetAllCognitoUserPoolIdentityProviderResources retrieves all cognito.UserPoolIdentityProvider items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolIdentityProviderResources() map[string]*cognito.UserPoolIdentityProvider[any] {
	results := map[string]*cognito.UserPoolIdentityProvider[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolIdentityProvider[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolIdentityProviderWithName retrieves all cognito.UserPoolIdentityProvider items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolIdentityProviderWithName(name string) (*cognito.UserPoolIdentityProvider[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolIdentityProvider[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolIdentityProvider not found", name)
}

// GetAllCognitoUserPoolResourceServerResources retrieves all cognito.UserPoolResourceServer items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolResourceServerResources() map[string]*cognito.UserPoolResourceServer[any] {
	results := map[string]*cognito.UserPoolResourceServer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolResourceServer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolResourceServerWithName retrieves all cognito.UserPoolResourceServer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolResourceServerWithName(name string) (*cognito.UserPoolResourceServer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolResourceServer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolResourceServer not found", name)
}

// GetAllCognitoUserPoolRiskConfigurationAttachmentResources retrieves all cognito.UserPoolRiskConfigurationAttachment items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolRiskConfigurationAttachmentResources() map[string]*cognito.UserPoolRiskConfigurationAttachment[any] {
	results := map[string]*cognito.UserPoolRiskConfigurationAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolRiskConfigurationAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolRiskConfigurationAttachmentWithName retrieves all cognito.UserPoolRiskConfigurationAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolRiskConfigurationAttachmentWithName(name string) (*cognito.UserPoolRiskConfigurationAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolRiskConfigurationAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolRiskConfigurationAttachment not found", name)
}

// GetAllCognitoUserPoolUICustomizationAttachmentResources retrieves all cognito.UserPoolUICustomizationAttachment items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolUICustomizationAttachmentResources() map[string]*cognito.UserPoolUICustomizationAttachment[any] {
	results := map[string]*cognito.UserPoolUICustomizationAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolUICustomizationAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolUICustomizationAttachmentWithName retrieves all cognito.UserPoolUICustomizationAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolUICustomizationAttachmentWithName(name string) (*cognito.UserPoolUICustomizationAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolUICustomizationAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolUICustomizationAttachment not found", name)
}

// GetAllCognitoUserPoolUserResources retrieves all cognito.UserPoolUser items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolUserResources() map[string]*cognito.UserPoolUser[any] {
	results := map[string]*cognito.UserPoolUser[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolUser[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolUserWithName retrieves all cognito.UserPoolUser items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolUserWithName(name string) (*cognito.UserPoolUser[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolUser[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolUser not found", name)
}

// GetAllCognitoUserPoolUserToGroupAttachmentResources retrieves all cognito.UserPoolUserToGroupAttachment items from an AWS CloudFormation template
func (t *Template) GetAllCognitoUserPoolUserToGroupAttachmentResources() map[string]*cognito.UserPoolUserToGroupAttachment[any] {
	results := map[string]*cognito.UserPoolUserToGroupAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *cognito.UserPoolUserToGroupAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCognitoUserPoolUserToGroupAttachmentWithName retrieves all cognito.UserPoolUserToGroupAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCognitoUserPoolUserToGroupAttachmentWithName(name string) (*cognito.UserPoolUserToGroupAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *cognito.UserPoolUserToGroupAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type cognito.UserPoolUserToGroupAttachment not found", name)
}

// GetAllComprehendFlywheelResources retrieves all comprehend.Flywheel items from an AWS CloudFormation template
func (t *Template) GetAllComprehendFlywheelResources() map[string]*comprehend.Flywheel[any] {
	results := map[string]*comprehend.Flywheel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *comprehend.Flywheel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetComprehendFlywheelWithName retrieves all comprehend.Flywheel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetComprehendFlywheelWithName(name string) (*comprehend.Flywheel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *comprehend.Flywheel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type comprehend.Flywheel not found", name)
}

// GetAllConfigAggregationAuthorizationResources retrieves all config.AggregationAuthorization items from an AWS CloudFormation template
func (t *Template) GetAllConfigAggregationAuthorizationResources() map[string]*config.AggregationAuthorization[any] {
	results := map[string]*config.AggregationAuthorization[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.AggregationAuthorization[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigAggregationAuthorizationWithName retrieves all config.AggregationAuthorization items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigAggregationAuthorizationWithName(name string) (*config.AggregationAuthorization[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.AggregationAuthorization[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.AggregationAuthorization not found", name)
}

// GetAllConfigConfigRuleResources retrieves all config.ConfigRule items from an AWS CloudFormation template
func (t *Template) GetAllConfigConfigRuleResources() map[string]*config.ConfigRule[any] {
	results := map[string]*config.ConfigRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.ConfigRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigConfigRuleWithName retrieves all config.ConfigRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigConfigRuleWithName(name string) (*config.ConfigRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.ConfigRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.ConfigRule not found", name)
}

// GetAllConfigConfigurationAggregatorResources retrieves all config.ConfigurationAggregator items from an AWS CloudFormation template
func (t *Template) GetAllConfigConfigurationAggregatorResources() map[string]*config.ConfigurationAggregator[any] {
	results := map[string]*config.ConfigurationAggregator[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.ConfigurationAggregator[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigConfigurationAggregatorWithName retrieves all config.ConfigurationAggregator items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigConfigurationAggregatorWithName(name string) (*config.ConfigurationAggregator[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.ConfigurationAggregator[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.ConfigurationAggregator not found", name)
}

// GetAllConfigConfigurationRecorderResources retrieves all config.ConfigurationRecorder items from an AWS CloudFormation template
func (t *Template) GetAllConfigConfigurationRecorderResources() map[string]*config.ConfigurationRecorder[any] {
	results := map[string]*config.ConfigurationRecorder[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.ConfigurationRecorder[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigConfigurationRecorderWithName retrieves all config.ConfigurationRecorder items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigConfigurationRecorderWithName(name string) (*config.ConfigurationRecorder[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.ConfigurationRecorder[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.ConfigurationRecorder not found", name)
}

// GetAllConfigConformancePackResources retrieves all config.ConformancePack items from an AWS CloudFormation template
func (t *Template) GetAllConfigConformancePackResources() map[string]*config.ConformancePack[any] {
	results := map[string]*config.ConformancePack[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.ConformancePack[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigConformancePackWithName retrieves all config.ConformancePack items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigConformancePackWithName(name string) (*config.ConformancePack[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.ConformancePack[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.ConformancePack not found", name)
}

// GetAllConfigDeliveryChannelResources retrieves all config.DeliveryChannel items from an AWS CloudFormation template
func (t *Template) GetAllConfigDeliveryChannelResources() map[string]*config.DeliveryChannel[any] {
	results := map[string]*config.DeliveryChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.DeliveryChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigDeliveryChannelWithName retrieves all config.DeliveryChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigDeliveryChannelWithName(name string) (*config.DeliveryChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.DeliveryChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.DeliveryChannel not found", name)
}

// GetAllConfigOrganizationConfigRuleResources retrieves all config.OrganizationConfigRule items from an AWS CloudFormation template
func (t *Template) GetAllConfigOrganizationConfigRuleResources() map[string]*config.OrganizationConfigRule[any] {
	results := map[string]*config.OrganizationConfigRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.OrganizationConfigRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigOrganizationConfigRuleWithName retrieves all config.OrganizationConfigRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigOrganizationConfigRuleWithName(name string) (*config.OrganizationConfigRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.OrganizationConfigRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.OrganizationConfigRule not found", name)
}

// GetAllConfigOrganizationConformancePackResources retrieves all config.OrganizationConformancePack items from an AWS CloudFormation template
func (t *Template) GetAllConfigOrganizationConformancePackResources() map[string]*config.OrganizationConformancePack[any] {
	results := map[string]*config.OrganizationConformancePack[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.OrganizationConformancePack[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigOrganizationConformancePackWithName retrieves all config.OrganizationConformancePack items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigOrganizationConformancePackWithName(name string) (*config.OrganizationConformancePack[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.OrganizationConformancePack[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.OrganizationConformancePack not found", name)
}

// GetAllConfigRemediationConfigurationResources retrieves all config.RemediationConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllConfigRemediationConfigurationResources() map[string]*config.RemediationConfiguration[any] {
	results := map[string]*config.RemediationConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.RemediationConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigRemediationConfigurationWithName retrieves all config.RemediationConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigRemediationConfigurationWithName(name string) (*config.RemediationConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.RemediationConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.RemediationConfiguration not found", name)
}

// GetAllConfigStoredQueryResources retrieves all config.StoredQuery items from an AWS CloudFormation template
func (t *Template) GetAllConfigStoredQueryResources() map[string]*config.StoredQuery[any] {
	results := map[string]*config.StoredQuery[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *config.StoredQuery[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConfigStoredQueryWithName retrieves all config.StoredQuery items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConfigStoredQueryWithName(name string) (*config.StoredQuery[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *config.StoredQuery[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type config.StoredQuery not found", name)
}

// GetAllConnectApprovedOriginResources retrieves all connect.ApprovedOrigin items from an AWS CloudFormation template
func (t *Template) GetAllConnectApprovedOriginResources() map[string]*connect.ApprovedOrigin[any] {
	results := map[string]*connect.ApprovedOrigin[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.ApprovedOrigin[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectApprovedOriginWithName retrieves all connect.ApprovedOrigin items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectApprovedOriginWithName(name string) (*connect.ApprovedOrigin[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.ApprovedOrigin[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.ApprovedOrigin not found", name)
}

// GetAllConnectContactFlowResources retrieves all connect.ContactFlow items from an AWS CloudFormation template
func (t *Template) GetAllConnectContactFlowResources() map[string]*connect.ContactFlow[any] {
	results := map[string]*connect.ContactFlow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.ContactFlow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectContactFlowWithName retrieves all connect.ContactFlow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectContactFlowWithName(name string) (*connect.ContactFlow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.ContactFlow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.ContactFlow not found", name)
}

// GetAllConnectContactFlowModuleResources retrieves all connect.ContactFlowModule items from an AWS CloudFormation template
func (t *Template) GetAllConnectContactFlowModuleResources() map[string]*connect.ContactFlowModule[any] {
	results := map[string]*connect.ContactFlowModule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.ContactFlowModule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectContactFlowModuleWithName retrieves all connect.ContactFlowModule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectContactFlowModuleWithName(name string) (*connect.ContactFlowModule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.ContactFlowModule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.ContactFlowModule not found", name)
}

// GetAllConnectEvaluationFormResources retrieves all connect.EvaluationForm items from an AWS CloudFormation template
func (t *Template) GetAllConnectEvaluationFormResources() map[string]*connect.EvaluationForm[any] {
	results := map[string]*connect.EvaluationForm[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.EvaluationForm[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectEvaluationFormWithName retrieves all connect.EvaluationForm items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectEvaluationFormWithName(name string) (*connect.EvaluationForm[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.EvaluationForm[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.EvaluationForm not found", name)
}

// GetAllConnectHoursOfOperationResources retrieves all connect.HoursOfOperation items from an AWS CloudFormation template
func (t *Template) GetAllConnectHoursOfOperationResources() map[string]*connect.HoursOfOperation[any] {
	results := map[string]*connect.HoursOfOperation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.HoursOfOperation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectHoursOfOperationWithName retrieves all connect.HoursOfOperation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectHoursOfOperationWithName(name string) (*connect.HoursOfOperation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.HoursOfOperation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.HoursOfOperation not found", name)
}

// GetAllConnectInstanceResources retrieves all connect.Instance items from an AWS CloudFormation template
func (t *Template) GetAllConnectInstanceResources() map[string]*connect.Instance[any] {
	results := map[string]*connect.Instance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.Instance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectInstanceWithName retrieves all connect.Instance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectInstanceWithName(name string) (*connect.Instance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.Instance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.Instance not found", name)
}

// GetAllConnectInstanceStorageConfigResources retrieves all connect.InstanceStorageConfig items from an AWS CloudFormation template
func (t *Template) GetAllConnectInstanceStorageConfigResources() map[string]*connect.InstanceStorageConfig[any] {
	results := map[string]*connect.InstanceStorageConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.InstanceStorageConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectInstanceStorageConfigWithName retrieves all connect.InstanceStorageConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectInstanceStorageConfigWithName(name string) (*connect.InstanceStorageConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.InstanceStorageConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.InstanceStorageConfig not found", name)
}

// GetAllConnectIntegrationAssociationResources retrieves all connect.IntegrationAssociation items from an AWS CloudFormation template
func (t *Template) GetAllConnectIntegrationAssociationResources() map[string]*connect.IntegrationAssociation[any] {
	results := map[string]*connect.IntegrationAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.IntegrationAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectIntegrationAssociationWithName retrieves all connect.IntegrationAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectIntegrationAssociationWithName(name string) (*connect.IntegrationAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.IntegrationAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.IntegrationAssociation not found", name)
}

// GetAllConnectPhoneNumberResources retrieves all connect.PhoneNumber items from an AWS CloudFormation template
func (t *Template) GetAllConnectPhoneNumberResources() map[string]*connect.PhoneNumber[any] {
	results := map[string]*connect.PhoneNumber[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.PhoneNumber[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectPhoneNumberWithName retrieves all connect.PhoneNumber items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectPhoneNumberWithName(name string) (*connect.PhoneNumber[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.PhoneNumber[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.PhoneNumber not found", name)
}

// GetAllConnectPromptResources retrieves all connect.Prompt items from an AWS CloudFormation template
func (t *Template) GetAllConnectPromptResources() map[string]*connect.Prompt[any] {
	results := map[string]*connect.Prompt[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.Prompt[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectPromptWithName retrieves all connect.Prompt items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectPromptWithName(name string) (*connect.Prompt[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.Prompt[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.Prompt not found", name)
}

// GetAllConnectQuickConnectResources retrieves all connect.QuickConnect items from an AWS CloudFormation template
func (t *Template) GetAllConnectQuickConnectResources() map[string]*connect.QuickConnect[any] {
	results := map[string]*connect.QuickConnect[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.QuickConnect[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectQuickConnectWithName retrieves all connect.QuickConnect items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectQuickConnectWithName(name string) (*connect.QuickConnect[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.QuickConnect[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.QuickConnect not found", name)
}

// GetAllConnectRuleResources retrieves all connect.Rule items from an AWS CloudFormation template
func (t *Template) GetAllConnectRuleResources() map[string]*connect.Rule[any] {
	results := map[string]*connect.Rule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.Rule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectRuleWithName retrieves all connect.Rule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectRuleWithName(name string) (*connect.Rule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.Rule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.Rule not found", name)
}

// GetAllConnectSecurityKeyResources retrieves all connect.SecurityKey items from an AWS CloudFormation template
func (t *Template) GetAllConnectSecurityKeyResources() map[string]*connect.SecurityKey[any] {
	results := map[string]*connect.SecurityKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.SecurityKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectSecurityKeyWithName retrieves all connect.SecurityKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectSecurityKeyWithName(name string) (*connect.SecurityKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.SecurityKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.SecurityKey not found", name)
}

// GetAllConnectTaskTemplateResources retrieves all connect.TaskTemplate items from an AWS CloudFormation template
func (t *Template) GetAllConnectTaskTemplateResources() map[string]*connect.TaskTemplate[any] {
	results := map[string]*connect.TaskTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.TaskTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectTaskTemplateWithName retrieves all connect.TaskTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectTaskTemplateWithName(name string) (*connect.TaskTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.TaskTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.TaskTemplate not found", name)
}

// GetAllConnectUserResources retrieves all connect.User items from an AWS CloudFormation template
func (t *Template) GetAllConnectUserResources() map[string]*connect.User[any] {
	results := map[string]*connect.User[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.User[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectUserWithName retrieves all connect.User items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectUserWithName(name string) (*connect.User[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.User[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.User not found", name)
}

// GetAllConnectUserHierarchyGroupResources retrieves all connect.UserHierarchyGroup items from an AWS CloudFormation template
func (t *Template) GetAllConnectUserHierarchyGroupResources() map[string]*connect.UserHierarchyGroup[any] {
	results := map[string]*connect.UserHierarchyGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connect.UserHierarchyGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectUserHierarchyGroupWithName retrieves all connect.UserHierarchyGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectUserHierarchyGroupWithName(name string) (*connect.UserHierarchyGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connect.UserHierarchyGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connect.UserHierarchyGroup not found", name)
}

// GetAllConnectCampaignsCampaignResources retrieves all connectcampaigns.Campaign items from an AWS CloudFormation template
func (t *Template) GetAllConnectCampaignsCampaignResources() map[string]*connectcampaigns.Campaign[any] {
	results := map[string]*connectcampaigns.Campaign[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *connectcampaigns.Campaign[any]:
			results[name] = resource
		}
	}
	return results
}

// GetConnectCampaignsCampaignWithName retrieves all connectcampaigns.Campaign items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetConnectCampaignsCampaignWithName(name string) (*connectcampaigns.Campaign[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *connectcampaigns.Campaign[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type connectcampaigns.Campaign not found", name)
}

// GetAllControlTowerEnabledControlResources retrieves all controltower.EnabledControl items from an AWS CloudFormation template
func (t *Template) GetAllControlTowerEnabledControlResources() map[string]*controltower.EnabledControl[any] {
	results := map[string]*controltower.EnabledControl[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *controltower.EnabledControl[any]:
			results[name] = resource
		}
	}
	return results
}

// GetControlTowerEnabledControlWithName retrieves all controltower.EnabledControl items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetControlTowerEnabledControlWithName(name string) (*controltower.EnabledControl[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *controltower.EnabledControl[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type controltower.EnabledControl not found", name)
}

// GetAllCustomerProfilesDomainResources retrieves all customerprofiles.Domain items from an AWS CloudFormation template
func (t *Template) GetAllCustomerProfilesDomainResources() map[string]*customerprofiles.Domain[any] {
	results := map[string]*customerprofiles.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *customerprofiles.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCustomerProfilesDomainWithName retrieves all customerprofiles.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCustomerProfilesDomainWithName(name string) (*customerprofiles.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *customerprofiles.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type customerprofiles.Domain not found", name)
}

// GetAllCustomerProfilesIntegrationResources retrieves all customerprofiles.Integration items from an AWS CloudFormation template
func (t *Template) GetAllCustomerProfilesIntegrationResources() map[string]*customerprofiles.Integration[any] {
	results := map[string]*customerprofiles.Integration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *customerprofiles.Integration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCustomerProfilesIntegrationWithName retrieves all customerprofiles.Integration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCustomerProfilesIntegrationWithName(name string) (*customerprofiles.Integration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *customerprofiles.Integration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type customerprofiles.Integration not found", name)
}

// GetAllCustomerProfilesObjectTypeResources retrieves all customerprofiles.ObjectType items from an AWS CloudFormation template
func (t *Template) GetAllCustomerProfilesObjectTypeResources() map[string]*customerprofiles.ObjectType[any] {
	results := map[string]*customerprofiles.ObjectType[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *customerprofiles.ObjectType[any]:
			results[name] = resource
		}
	}
	return results
}

// GetCustomerProfilesObjectTypeWithName retrieves all customerprofiles.ObjectType items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetCustomerProfilesObjectTypeWithName(name string) (*customerprofiles.ObjectType[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *customerprofiles.ObjectType[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type customerprofiles.ObjectType not found", name)
}

// GetAllDAXClusterResources retrieves all dax.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllDAXClusterResources() map[string]*dax.Cluster[any] {
	results := map[string]*dax.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dax.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDAXClusterWithName retrieves all dax.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDAXClusterWithName(name string) (*dax.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dax.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dax.Cluster not found", name)
}

// GetAllDAXParameterGroupResources retrieves all dax.ParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllDAXParameterGroupResources() map[string]*dax.ParameterGroup[any] {
	results := map[string]*dax.ParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dax.ParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDAXParameterGroupWithName retrieves all dax.ParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDAXParameterGroupWithName(name string) (*dax.ParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dax.ParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dax.ParameterGroup not found", name)
}

// GetAllDAXSubnetGroupResources retrieves all dax.SubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllDAXSubnetGroupResources() map[string]*dax.SubnetGroup[any] {
	results := map[string]*dax.SubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dax.SubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDAXSubnetGroupWithName retrieves all dax.SubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDAXSubnetGroupWithName(name string) (*dax.SubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dax.SubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dax.SubnetGroup not found", name)
}

// GetAllDLMLifecyclePolicyResources retrieves all dlm.LifecyclePolicy items from an AWS CloudFormation template
func (t *Template) GetAllDLMLifecyclePolicyResources() map[string]*dlm.LifecyclePolicy[any] {
	results := map[string]*dlm.LifecyclePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dlm.LifecyclePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDLMLifecyclePolicyWithName retrieves all dlm.LifecyclePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDLMLifecyclePolicyWithName(name string) (*dlm.LifecyclePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dlm.LifecyclePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dlm.LifecyclePolicy not found", name)
}

// GetAllDMSCertificateResources retrieves all dms.Certificate items from an AWS CloudFormation template
func (t *Template) GetAllDMSCertificateResources() map[string]*dms.Certificate[any] {
	results := map[string]*dms.Certificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dms.Certificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDMSCertificateWithName retrieves all dms.Certificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDMSCertificateWithName(name string) (*dms.Certificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dms.Certificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dms.Certificate not found", name)
}

// GetAllDMSEndpointResources retrieves all dms.Endpoint items from an AWS CloudFormation template
func (t *Template) GetAllDMSEndpointResources() map[string]*dms.Endpoint[any] {
	results := map[string]*dms.Endpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dms.Endpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDMSEndpointWithName retrieves all dms.Endpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDMSEndpointWithName(name string) (*dms.Endpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dms.Endpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dms.Endpoint not found", name)
}

// GetAllDMSEventSubscriptionResources retrieves all dms.EventSubscription items from an AWS CloudFormation template
func (t *Template) GetAllDMSEventSubscriptionResources() map[string]*dms.EventSubscription[any] {
	results := map[string]*dms.EventSubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dms.EventSubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDMSEventSubscriptionWithName retrieves all dms.EventSubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDMSEventSubscriptionWithName(name string) (*dms.EventSubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dms.EventSubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dms.EventSubscription not found", name)
}

// GetAllDMSReplicationInstanceResources retrieves all dms.ReplicationInstance items from an AWS CloudFormation template
func (t *Template) GetAllDMSReplicationInstanceResources() map[string]*dms.ReplicationInstance[any] {
	results := map[string]*dms.ReplicationInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dms.ReplicationInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDMSReplicationInstanceWithName retrieves all dms.ReplicationInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDMSReplicationInstanceWithName(name string) (*dms.ReplicationInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dms.ReplicationInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dms.ReplicationInstance not found", name)
}

// GetAllDMSReplicationSubnetGroupResources retrieves all dms.ReplicationSubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllDMSReplicationSubnetGroupResources() map[string]*dms.ReplicationSubnetGroup[any] {
	results := map[string]*dms.ReplicationSubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dms.ReplicationSubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDMSReplicationSubnetGroupWithName retrieves all dms.ReplicationSubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDMSReplicationSubnetGroupWithName(name string) (*dms.ReplicationSubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dms.ReplicationSubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dms.ReplicationSubnetGroup not found", name)
}

// GetAllDMSReplicationTaskResources retrieves all dms.ReplicationTask items from an AWS CloudFormation template
func (t *Template) GetAllDMSReplicationTaskResources() map[string]*dms.ReplicationTask[any] {
	results := map[string]*dms.ReplicationTask[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dms.ReplicationTask[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDMSReplicationTaskWithName retrieves all dms.ReplicationTask items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDMSReplicationTaskWithName(name string) (*dms.ReplicationTask[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dms.ReplicationTask[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dms.ReplicationTask not found", name)
}

// GetAllDataBrewDatasetResources retrieves all databrew.Dataset items from an AWS CloudFormation template
func (t *Template) GetAllDataBrewDatasetResources() map[string]*databrew.Dataset[any] {
	results := map[string]*databrew.Dataset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *databrew.Dataset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataBrewDatasetWithName retrieves all databrew.Dataset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataBrewDatasetWithName(name string) (*databrew.Dataset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *databrew.Dataset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type databrew.Dataset not found", name)
}

// GetAllDataBrewJobResources retrieves all databrew.Job items from an AWS CloudFormation template
func (t *Template) GetAllDataBrewJobResources() map[string]*databrew.Job[any] {
	results := map[string]*databrew.Job[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *databrew.Job[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataBrewJobWithName retrieves all databrew.Job items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataBrewJobWithName(name string) (*databrew.Job[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *databrew.Job[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type databrew.Job not found", name)
}

// GetAllDataBrewProjectResources retrieves all databrew.Project items from an AWS CloudFormation template
func (t *Template) GetAllDataBrewProjectResources() map[string]*databrew.Project[any] {
	results := map[string]*databrew.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *databrew.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataBrewProjectWithName retrieves all databrew.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataBrewProjectWithName(name string) (*databrew.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *databrew.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type databrew.Project not found", name)
}

// GetAllDataBrewRecipeResources retrieves all databrew.Recipe items from an AWS CloudFormation template
func (t *Template) GetAllDataBrewRecipeResources() map[string]*databrew.Recipe[any] {
	results := map[string]*databrew.Recipe[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *databrew.Recipe[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataBrewRecipeWithName retrieves all databrew.Recipe items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataBrewRecipeWithName(name string) (*databrew.Recipe[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *databrew.Recipe[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type databrew.Recipe not found", name)
}

// GetAllDataBrewRulesetResources retrieves all databrew.Ruleset items from an AWS CloudFormation template
func (t *Template) GetAllDataBrewRulesetResources() map[string]*databrew.Ruleset[any] {
	results := map[string]*databrew.Ruleset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *databrew.Ruleset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataBrewRulesetWithName retrieves all databrew.Ruleset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataBrewRulesetWithName(name string) (*databrew.Ruleset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *databrew.Ruleset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type databrew.Ruleset not found", name)
}

// GetAllDataBrewScheduleResources retrieves all databrew.Schedule items from an AWS CloudFormation template
func (t *Template) GetAllDataBrewScheduleResources() map[string]*databrew.Schedule[any] {
	results := map[string]*databrew.Schedule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *databrew.Schedule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataBrewScheduleWithName retrieves all databrew.Schedule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataBrewScheduleWithName(name string) (*databrew.Schedule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *databrew.Schedule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type databrew.Schedule not found", name)
}

// GetAllDataPipelinePipelineResources retrieves all datapipeline.Pipeline items from an AWS CloudFormation template
func (t *Template) GetAllDataPipelinePipelineResources() map[string]*datapipeline.Pipeline[any] {
	results := map[string]*datapipeline.Pipeline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datapipeline.Pipeline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataPipelinePipelineWithName retrieves all datapipeline.Pipeline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataPipelinePipelineWithName(name string) (*datapipeline.Pipeline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datapipeline.Pipeline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datapipeline.Pipeline not found", name)
}

// GetAllDataSyncAgentResources retrieves all datasync.Agent items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncAgentResources() map[string]*datasync.Agent[any] {
	results := map[string]*datasync.Agent[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.Agent[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncAgentWithName retrieves all datasync.Agent items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncAgentWithName(name string) (*datasync.Agent[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.Agent[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.Agent not found", name)
}

// GetAllDataSyncLocationEFSResources retrieves all datasync.LocationEFS items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationEFSResources() map[string]*datasync.LocationEFS[any] {
	results := map[string]*datasync.LocationEFS[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationEFS[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationEFSWithName retrieves all datasync.LocationEFS items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationEFSWithName(name string) (*datasync.LocationEFS[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationEFS[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationEFS not found", name)
}

// GetAllDataSyncLocationFSxLustreResources retrieves all datasync.LocationFSxLustre items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationFSxLustreResources() map[string]*datasync.LocationFSxLustre[any] {
	results := map[string]*datasync.LocationFSxLustre[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxLustre[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationFSxLustreWithName retrieves all datasync.LocationFSxLustre items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationFSxLustreWithName(name string) (*datasync.LocationFSxLustre[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxLustre[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationFSxLustre not found", name)
}

// GetAllDataSyncLocationFSxONTAPResources retrieves all datasync.LocationFSxONTAP items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationFSxONTAPResources() map[string]*datasync.LocationFSxONTAP[any] {
	results := map[string]*datasync.LocationFSxONTAP[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxONTAP[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationFSxONTAPWithName retrieves all datasync.LocationFSxONTAP items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationFSxONTAPWithName(name string) (*datasync.LocationFSxONTAP[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxONTAP[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationFSxONTAP not found", name)
}

// GetAllDataSyncLocationFSxOpenZFSResources retrieves all datasync.LocationFSxOpenZFS items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationFSxOpenZFSResources() map[string]*datasync.LocationFSxOpenZFS[any] {
	results := map[string]*datasync.LocationFSxOpenZFS[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxOpenZFS[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationFSxOpenZFSWithName retrieves all datasync.LocationFSxOpenZFS items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationFSxOpenZFSWithName(name string) (*datasync.LocationFSxOpenZFS[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxOpenZFS[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationFSxOpenZFS not found", name)
}

// GetAllDataSyncLocationFSxWindowsResources retrieves all datasync.LocationFSxWindows items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationFSxWindowsResources() map[string]*datasync.LocationFSxWindows[any] {
	results := map[string]*datasync.LocationFSxWindows[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxWindows[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationFSxWindowsWithName retrieves all datasync.LocationFSxWindows items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationFSxWindowsWithName(name string) (*datasync.LocationFSxWindows[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationFSxWindows[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationFSxWindows not found", name)
}

// GetAllDataSyncLocationHDFSResources retrieves all datasync.LocationHDFS items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationHDFSResources() map[string]*datasync.LocationHDFS[any] {
	results := map[string]*datasync.LocationHDFS[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationHDFS[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationHDFSWithName retrieves all datasync.LocationHDFS items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationHDFSWithName(name string) (*datasync.LocationHDFS[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationHDFS[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationHDFS not found", name)
}

// GetAllDataSyncLocationNFSResources retrieves all datasync.LocationNFS items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationNFSResources() map[string]*datasync.LocationNFS[any] {
	results := map[string]*datasync.LocationNFS[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationNFS[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationNFSWithName retrieves all datasync.LocationNFS items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationNFSWithName(name string) (*datasync.LocationNFS[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationNFS[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationNFS not found", name)
}

// GetAllDataSyncLocationObjectStorageResources retrieves all datasync.LocationObjectStorage items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationObjectStorageResources() map[string]*datasync.LocationObjectStorage[any] {
	results := map[string]*datasync.LocationObjectStorage[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationObjectStorage[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationObjectStorageWithName retrieves all datasync.LocationObjectStorage items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationObjectStorageWithName(name string) (*datasync.LocationObjectStorage[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationObjectStorage[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationObjectStorage not found", name)
}

// GetAllDataSyncLocationS3Resources retrieves all datasync.LocationS3 items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationS3Resources() map[string]*datasync.LocationS3[any] {
	results := map[string]*datasync.LocationS3[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationS3[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationS3WithName retrieves all datasync.LocationS3 items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationS3WithName(name string) (*datasync.LocationS3[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationS3[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationS3 not found", name)
}

// GetAllDataSyncLocationSMBResources retrieves all datasync.LocationSMB items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncLocationSMBResources() map[string]*datasync.LocationSMB[any] {
	results := map[string]*datasync.LocationSMB[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.LocationSMB[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncLocationSMBWithName retrieves all datasync.LocationSMB items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncLocationSMBWithName(name string) (*datasync.LocationSMB[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.LocationSMB[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.LocationSMB not found", name)
}

// GetAllDataSyncStorageSystemResources retrieves all datasync.StorageSystem items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncStorageSystemResources() map[string]*datasync.StorageSystem[any] {
	results := map[string]*datasync.StorageSystem[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.StorageSystem[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncStorageSystemWithName retrieves all datasync.StorageSystem items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncStorageSystemWithName(name string) (*datasync.StorageSystem[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.StorageSystem[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.StorageSystem not found", name)
}

// GetAllDataSyncTaskResources retrieves all datasync.Task items from an AWS CloudFormation template
func (t *Template) GetAllDataSyncTaskResources() map[string]*datasync.Task[any] {
	results := map[string]*datasync.Task[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *datasync.Task[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDataSyncTaskWithName retrieves all datasync.Task items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDataSyncTaskWithName(name string) (*datasync.Task[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *datasync.Task[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type datasync.Task not found", name)
}

// GetAllDetectiveGraphResources retrieves all detective.Graph items from an AWS CloudFormation template
func (t *Template) GetAllDetectiveGraphResources() map[string]*detective.Graph[any] {
	results := map[string]*detective.Graph[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *detective.Graph[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDetectiveGraphWithName retrieves all detective.Graph items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDetectiveGraphWithName(name string) (*detective.Graph[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *detective.Graph[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type detective.Graph not found", name)
}

// GetAllDetectiveMemberInvitationResources retrieves all detective.MemberInvitation items from an AWS CloudFormation template
func (t *Template) GetAllDetectiveMemberInvitationResources() map[string]*detective.MemberInvitation[any] {
	results := map[string]*detective.MemberInvitation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *detective.MemberInvitation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDetectiveMemberInvitationWithName retrieves all detective.MemberInvitation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDetectiveMemberInvitationWithName(name string) (*detective.MemberInvitation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *detective.MemberInvitation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type detective.MemberInvitation not found", name)
}

// GetAllDetectiveOrganizationAdminResources retrieves all detective.OrganizationAdmin items from an AWS CloudFormation template
func (t *Template) GetAllDetectiveOrganizationAdminResources() map[string]*detective.OrganizationAdmin[any] {
	results := map[string]*detective.OrganizationAdmin[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *detective.OrganizationAdmin[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDetectiveOrganizationAdminWithName retrieves all detective.OrganizationAdmin items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDetectiveOrganizationAdminWithName(name string) (*detective.OrganizationAdmin[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *detective.OrganizationAdmin[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type detective.OrganizationAdmin not found", name)
}

// GetAllDevOpsGuruLogAnomalyDetectionIntegrationResources retrieves all devopsguru.LogAnomalyDetectionIntegration items from an AWS CloudFormation template
func (t *Template) GetAllDevOpsGuruLogAnomalyDetectionIntegrationResources() map[string]*devopsguru.LogAnomalyDetectionIntegration[any] {
	results := map[string]*devopsguru.LogAnomalyDetectionIntegration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *devopsguru.LogAnomalyDetectionIntegration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDevOpsGuruLogAnomalyDetectionIntegrationWithName retrieves all devopsguru.LogAnomalyDetectionIntegration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDevOpsGuruLogAnomalyDetectionIntegrationWithName(name string) (*devopsguru.LogAnomalyDetectionIntegration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *devopsguru.LogAnomalyDetectionIntegration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type devopsguru.LogAnomalyDetectionIntegration not found", name)
}

// GetAllDevOpsGuruNotificationChannelResources retrieves all devopsguru.NotificationChannel items from an AWS CloudFormation template
func (t *Template) GetAllDevOpsGuruNotificationChannelResources() map[string]*devopsguru.NotificationChannel[any] {
	results := map[string]*devopsguru.NotificationChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *devopsguru.NotificationChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDevOpsGuruNotificationChannelWithName retrieves all devopsguru.NotificationChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDevOpsGuruNotificationChannelWithName(name string) (*devopsguru.NotificationChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *devopsguru.NotificationChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type devopsguru.NotificationChannel not found", name)
}

// GetAllDevOpsGuruResourceCollectionResources retrieves all devopsguru.ResourceCollection items from an AWS CloudFormation template
func (t *Template) GetAllDevOpsGuruResourceCollectionResources() map[string]*devopsguru.ResourceCollection[any] {
	results := map[string]*devopsguru.ResourceCollection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *devopsguru.ResourceCollection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDevOpsGuruResourceCollectionWithName retrieves all devopsguru.ResourceCollection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDevOpsGuruResourceCollectionWithName(name string) (*devopsguru.ResourceCollection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *devopsguru.ResourceCollection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type devopsguru.ResourceCollection not found", name)
}

// GetAllDirectoryServiceMicrosoftADResources retrieves all directoryservice.MicrosoftAD items from an AWS CloudFormation template
func (t *Template) GetAllDirectoryServiceMicrosoftADResources() map[string]*directoryservice.MicrosoftAD[any] {
	results := map[string]*directoryservice.MicrosoftAD[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *directoryservice.MicrosoftAD[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDirectoryServiceMicrosoftADWithName retrieves all directoryservice.MicrosoftAD items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDirectoryServiceMicrosoftADWithName(name string) (*directoryservice.MicrosoftAD[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *directoryservice.MicrosoftAD[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type directoryservice.MicrosoftAD not found", name)
}

// GetAllDirectoryServiceSimpleADResources retrieves all directoryservice.SimpleAD items from an AWS CloudFormation template
func (t *Template) GetAllDirectoryServiceSimpleADResources() map[string]*directoryservice.SimpleAD[any] {
	results := map[string]*directoryservice.SimpleAD[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *directoryservice.SimpleAD[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDirectoryServiceSimpleADWithName retrieves all directoryservice.SimpleAD items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDirectoryServiceSimpleADWithName(name string) (*directoryservice.SimpleAD[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *directoryservice.SimpleAD[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type directoryservice.SimpleAD not found", name)
}

// GetAllDocDBDBClusterResources retrieves all docdb.DBCluster items from an AWS CloudFormation template
func (t *Template) GetAllDocDBDBClusterResources() map[string]*docdb.DBCluster[any] {
	results := map[string]*docdb.DBCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *docdb.DBCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDocDBDBClusterWithName retrieves all docdb.DBCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDocDBDBClusterWithName(name string) (*docdb.DBCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *docdb.DBCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type docdb.DBCluster not found", name)
}

// GetAllDocDBDBClusterParameterGroupResources retrieves all docdb.DBClusterParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllDocDBDBClusterParameterGroupResources() map[string]*docdb.DBClusterParameterGroup[any] {
	results := map[string]*docdb.DBClusterParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *docdb.DBClusterParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDocDBDBClusterParameterGroupWithName retrieves all docdb.DBClusterParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDocDBDBClusterParameterGroupWithName(name string) (*docdb.DBClusterParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *docdb.DBClusterParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type docdb.DBClusterParameterGroup not found", name)
}

// GetAllDocDBDBInstanceResources retrieves all docdb.DBInstance items from an AWS CloudFormation template
func (t *Template) GetAllDocDBDBInstanceResources() map[string]*docdb.DBInstance[any] {
	results := map[string]*docdb.DBInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *docdb.DBInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDocDBDBInstanceWithName retrieves all docdb.DBInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDocDBDBInstanceWithName(name string) (*docdb.DBInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *docdb.DBInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type docdb.DBInstance not found", name)
}

// GetAllDocDBDBSubnetGroupResources retrieves all docdb.DBSubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllDocDBDBSubnetGroupResources() map[string]*docdb.DBSubnetGroup[any] {
	results := map[string]*docdb.DBSubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *docdb.DBSubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDocDBDBSubnetGroupWithName retrieves all docdb.DBSubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDocDBDBSubnetGroupWithName(name string) (*docdb.DBSubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *docdb.DBSubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type docdb.DBSubnetGroup not found", name)
}

// GetAllDocDBElasticClusterResources retrieves all docdbelastic.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllDocDBElasticClusterResources() map[string]*docdbelastic.Cluster[any] {
	results := map[string]*docdbelastic.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *docdbelastic.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDocDBElasticClusterWithName retrieves all docdbelastic.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDocDBElasticClusterWithName(name string) (*docdbelastic.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *docdbelastic.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type docdbelastic.Cluster not found", name)
}

// GetAllDynamoDBGlobalTableResources retrieves all dynamodb.GlobalTable items from an AWS CloudFormation template
func (t *Template) GetAllDynamoDBGlobalTableResources() map[string]*dynamodb.GlobalTable[any] {
	results := map[string]*dynamodb.GlobalTable[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dynamodb.GlobalTable[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDynamoDBGlobalTableWithName retrieves all dynamodb.GlobalTable items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDynamoDBGlobalTableWithName(name string) (*dynamodb.GlobalTable[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dynamodb.GlobalTable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dynamodb.GlobalTable not found", name)
}

// GetAllDynamoDBTableResources retrieves all dynamodb.Table items from an AWS CloudFormation template
func (t *Template) GetAllDynamoDBTableResources() map[string]*dynamodb.Table[any] {
	results := map[string]*dynamodb.Table[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *dynamodb.Table[any]:
			results[name] = resource
		}
	}
	return results
}

// GetDynamoDBTableWithName retrieves all dynamodb.Table items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetDynamoDBTableWithName(name string) (*dynamodb.Table[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *dynamodb.Table[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type dynamodb.Table not found", name)
}

// GetAllEC2CapacityReservationResources retrieves all ec2.CapacityReservation items from an AWS CloudFormation template
func (t *Template) GetAllEC2CapacityReservationResources() map[string]*ec2.CapacityReservation[any] {
	results := map[string]*ec2.CapacityReservation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.CapacityReservation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2CapacityReservationWithName retrieves all ec2.CapacityReservation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2CapacityReservationWithName(name string) (*ec2.CapacityReservation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.CapacityReservation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.CapacityReservation not found", name)
}

// GetAllEC2CapacityReservationFleetResources retrieves all ec2.CapacityReservationFleet items from an AWS CloudFormation template
func (t *Template) GetAllEC2CapacityReservationFleetResources() map[string]*ec2.CapacityReservationFleet[any] {
	results := map[string]*ec2.CapacityReservationFleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.CapacityReservationFleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2CapacityReservationFleetWithName retrieves all ec2.CapacityReservationFleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2CapacityReservationFleetWithName(name string) (*ec2.CapacityReservationFleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.CapacityReservationFleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.CapacityReservationFleet not found", name)
}

// GetAllEC2CarrierGatewayResources retrieves all ec2.CarrierGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2CarrierGatewayResources() map[string]*ec2.CarrierGateway[any] {
	results := map[string]*ec2.CarrierGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.CarrierGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2CarrierGatewayWithName retrieves all ec2.CarrierGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2CarrierGatewayWithName(name string) (*ec2.CarrierGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.CarrierGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.CarrierGateway not found", name)
}

// GetAllEC2ClientVpnAuthorizationRuleResources retrieves all ec2.ClientVpnAuthorizationRule items from an AWS CloudFormation template
func (t *Template) GetAllEC2ClientVpnAuthorizationRuleResources() map[string]*ec2.ClientVpnAuthorizationRule[any] {
	results := map[string]*ec2.ClientVpnAuthorizationRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnAuthorizationRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2ClientVpnAuthorizationRuleWithName retrieves all ec2.ClientVpnAuthorizationRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2ClientVpnAuthorizationRuleWithName(name string) (*ec2.ClientVpnAuthorizationRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnAuthorizationRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.ClientVpnAuthorizationRule not found", name)
}

// GetAllEC2ClientVpnEndpointResources retrieves all ec2.ClientVpnEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllEC2ClientVpnEndpointResources() map[string]*ec2.ClientVpnEndpoint[any] {
	results := map[string]*ec2.ClientVpnEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2ClientVpnEndpointWithName retrieves all ec2.ClientVpnEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2ClientVpnEndpointWithName(name string) (*ec2.ClientVpnEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.ClientVpnEndpoint not found", name)
}

// GetAllEC2ClientVpnRouteResources retrieves all ec2.ClientVpnRoute items from an AWS CloudFormation template
func (t *Template) GetAllEC2ClientVpnRouteResources() map[string]*ec2.ClientVpnRoute[any] {
	results := map[string]*ec2.ClientVpnRoute[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnRoute[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2ClientVpnRouteWithName retrieves all ec2.ClientVpnRoute items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2ClientVpnRouteWithName(name string) (*ec2.ClientVpnRoute[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnRoute[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.ClientVpnRoute not found", name)
}

// GetAllEC2ClientVpnTargetNetworkAssociationResources retrieves all ec2.ClientVpnTargetNetworkAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2ClientVpnTargetNetworkAssociationResources() map[string]*ec2.ClientVpnTargetNetworkAssociation[any] {
	results := map[string]*ec2.ClientVpnTargetNetworkAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnTargetNetworkAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2ClientVpnTargetNetworkAssociationWithName retrieves all ec2.ClientVpnTargetNetworkAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2ClientVpnTargetNetworkAssociationWithName(name string) (*ec2.ClientVpnTargetNetworkAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.ClientVpnTargetNetworkAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.ClientVpnTargetNetworkAssociation not found", name)
}

// GetAllEC2CustomerGatewayResources retrieves all ec2.CustomerGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2CustomerGatewayResources() map[string]*ec2.CustomerGateway[any] {
	results := map[string]*ec2.CustomerGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.CustomerGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2CustomerGatewayWithName retrieves all ec2.CustomerGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2CustomerGatewayWithName(name string) (*ec2.CustomerGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.CustomerGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.CustomerGateway not found", name)
}

// GetAllEC2DHCPOptionsResources retrieves all ec2.DHCPOptions items from an AWS CloudFormation template
func (t *Template) GetAllEC2DHCPOptionsResources() map[string]*ec2.DHCPOptions[any] {
	results := map[string]*ec2.DHCPOptions[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.DHCPOptions[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2DHCPOptionsWithName retrieves all ec2.DHCPOptions items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2DHCPOptionsWithName(name string) (*ec2.DHCPOptions[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.DHCPOptions[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.DHCPOptions not found", name)
}

// GetAllEC2EC2FleetResources retrieves all ec2.EC2Fleet items from an AWS CloudFormation template
func (t *Template) GetAllEC2EC2FleetResources() map[string]*ec2.EC2Fleet[any] {
	results := map[string]*ec2.EC2Fleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.EC2Fleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2EC2FleetWithName retrieves all ec2.EC2Fleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2EC2FleetWithName(name string) (*ec2.EC2Fleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.EC2Fleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.EC2Fleet not found", name)
}

// GetAllEC2EIPResources retrieves all ec2.EIP items from an AWS CloudFormation template
func (t *Template) GetAllEC2EIPResources() map[string]*ec2.EIP[any] {
	results := map[string]*ec2.EIP[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.EIP[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2EIPWithName retrieves all ec2.EIP items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2EIPWithName(name string) (*ec2.EIP[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.EIP[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.EIP not found", name)
}

// GetAllEC2EIPAssociationResources retrieves all ec2.EIPAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2EIPAssociationResources() map[string]*ec2.EIPAssociation[any] {
	results := map[string]*ec2.EIPAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.EIPAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2EIPAssociationWithName retrieves all ec2.EIPAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2EIPAssociationWithName(name string) (*ec2.EIPAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.EIPAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.EIPAssociation not found", name)
}

// GetAllEC2EgressOnlyInternetGatewayResources retrieves all ec2.EgressOnlyInternetGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2EgressOnlyInternetGatewayResources() map[string]*ec2.EgressOnlyInternetGateway[any] {
	results := map[string]*ec2.EgressOnlyInternetGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.EgressOnlyInternetGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2EgressOnlyInternetGatewayWithName retrieves all ec2.EgressOnlyInternetGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2EgressOnlyInternetGatewayWithName(name string) (*ec2.EgressOnlyInternetGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.EgressOnlyInternetGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.EgressOnlyInternetGateway not found", name)
}

// GetAllEC2EnclaveCertificateIamRoleAssociationResources retrieves all ec2.EnclaveCertificateIamRoleAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2EnclaveCertificateIamRoleAssociationResources() map[string]*ec2.EnclaveCertificateIamRoleAssociation[any] {
	results := map[string]*ec2.EnclaveCertificateIamRoleAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.EnclaveCertificateIamRoleAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2EnclaveCertificateIamRoleAssociationWithName retrieves all ec2.EnclaveCertificateIamRoleAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2EnclaveCertificateIamRoleAssociationWithName(name string) (*ec2.EnclaveCertificateIamRoleAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.EnclaveCertificateIamRoleAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.EnclaveCertificateIamRoleAssociation not found", name)
}

// GetAllEC2FlowLogResources retrieves all ec2.FlowLog items from an AWS CloudFormation template
func (t *Template) GetAllEC2FlowLogResources() map[string]*ec2.FlowLog[any] {
	results := map[string]*ec2.FlowLog[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.FlowLog[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2FlowLogWithName retrieves all ec2.FlowLog items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2FlowLogWithName(name string) (*ec2.FlowLog[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.FlowLog[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.FlowLog not found", name)
}

// GetAllEC2GatewayRouteTableAssociationResources retrieves all ec2.GatewayRouteTableAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2GatewayRouteTableAssociationResources() map[string]*ec2.GatewayRouteTableAssociation[any] {
	results := map[string]*ec2.GatewayRouteTableAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.GatewayRouteTableAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2GatewayRouteTableAssociationWithName retrieves all ec2.GatewayRouteTableAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2GatewayRouteTableAssociationWithName(name string) (*ec2.GatewayRouteTableAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.GatewayRouteTableAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.GatewayRouteTableAssociation not found", name)
}

// GetAllEC2HostResources retrieves all ec2.Host items from an AWS CloudFormation template
func (t *Template) GetAllEC2HostResources() map[string]*ec2.Host[any] {
	results := map[string]*ec2.Host[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.Host[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2HostWithName retrieves all ec2.Host items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2HostWithName(name string) (*ec2.Host[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.Host[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.Host not found", name)
}

// GetAllEC2IPAMResources retrieves all ec2.IPAM items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMResources() map[string]*ec2.IPAM[any] {
	results := map[string]*ec2.IPAM[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAM[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMWithName retrieves all ec2.IPAM items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMWithName(name string) (*ec2.IPAM[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAM[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAM not found", name)
}

// GetAllEC2IPAMAllocationResources retrieves all ec2.IPAMAllocation items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMAllocationResources() map[string]*ec2.IPAMAllocation[any] {
	results := map[string]*ec2.IPAMAllocation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAMAllocation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMAllocationWithName retrieves all ec2.IPAMAllocation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMAllocationWithName(name string) (*ec2.IPAMAllocation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAMAllocation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAMAllocation not found", name)
}

// GetAllEC2IPAMPoolResources retrieves all ec2.IPAMPool items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMPoolResources() map[string]*ec2.IPAMPool[any] {
	results := map[string]*ec2.IPAMPool[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAMPool[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMPoolWithName retrieves all ec2.IPAMPool items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMPoolWithName(name string) (*ec2.IPAMPool[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAMPool[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAMPool not found", name)
}

// GetAllEC2IPAMPoolCidrResources retrieves all ec2.IPAMPoolCidr items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMPoolCidrResources() map[string]*ec2.IPAMPoolCidr[any] {
	results := map[string]*ec2.IPAMPoolCidr[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAMPoolCidr[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMPoolCidrWithName retrieves all ec2.IPAMPoolCidr items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMPoolCidrWithName(name string) (*ec2.IPAMPoolCidr[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAMPoolCidr[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAMPoolCidr not found", name)
}

// GetAllEC2IPAMResourceDiscoveryResources retrieves all ec2.IPAMResourceDiscovery items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMResourceDiscoveryResources() map[string]*ec2.IPAMResourceDiscovery[any] {
	results := map[string]*ec2.IPAMResourceDiscovery[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAMResourceDiscovery[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMResourceDiscoveryWithName retrieves all ec2.IPAMResourceDiscovery items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMResourceDiscoveryWithName(name string) (*ec2.IPAMResourceDiscovery[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAMResourceDiscovery[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAMResourceDiscovery not found", name)
}

// GetAllEC2IPAMResourceDiscoveryAssociationResources retrieves all ec2.IPAMResourceDiscoveryAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMResourceDiscoveryAssociationResources() map[string]*ec2.IPAMResourceDiscoveryAssociation[any] {
	results := map[string]*ec2.IPAMResourceDiscoveryAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAMResourceDiscoveryAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMResourceDiscoveryAssociationWithName retrieves all ec2.IPAMResourceDiscoveryAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMResourceDiscoveryAssociationWithName(name string) (*ec2.IPAMResourceDiscoveryAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAMResourceDiscoveryAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAMResourceDiscoveryAssociation not found", name)
}

// GetAllEC2IPAMScopeResources retrieves all ec2.IPAMScope items from an AWS CloudFormation template
func (t *Template) GetAllEC2IPAMScopeResources() map[string]*ec2.IPAMScope[any] {
	results := map[string]*ec2.IPAMScope[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.IPAMScope[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2IPAMScopeWithName retrieves all ec2.IPAMScope items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2IPAMScopeWithName(name string) (*ec2.IPAMScope[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.IPAMScope[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.IPAMScope not found", name)
}

// GetAllEC2InstanceResources retrieves all ec2.Instance items from an AWS CloudFormation template
func (t *Template) GetAllEC2InstanceResources() map[string]*ec2.Instance[any] {
	results := map[string]*ec2.Instance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.Instance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2InstanceWithName retrieves all ec2.Instance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2InstanceWithName(name string) (*ec2.Instance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.Instance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.Instance not found", name)
}

// GetAllEC2InternetGatewayResources retrieves all ec2.InternetGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2InternetGatewayResources() map[string]*ec2.InternetGateway[any] {
	results := map[string]*ec2.InternetGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.InternetGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2InternetGatewayWithName retrieves all ec2.InternetGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2InternetGatewayWithName(name string) (*ec2.InternetGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.InternetGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.InternetGateway not found", name)
}

// GetAllEC2KeyPairResources retrieves all ec2.KeyPair items from an AWS CloudFormation template
func (t *Template) GetAllEC2KeyPairResources() map[string]*ec2.KeyPair[any] {
	results := map[string]*ec2.KeyPair[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.KeyPair[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2KeyPairWithName retrieves all ec2.KeyPair items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2KeyPairWithName(name string) (*ec2.KeyPair[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.KeyPair[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.KeyPair not found", name)
}

// GetAllEC2LaunchTemplateResources retrieves all ec2.LaunchTemplate items from an AWS CloudFormation template
func (t *Template) GetAllEC2LaunchTemplateResources() map[string]*ec2.LaunchTemplate[any] {
	results := map[string]*ec2.LaunchTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.LaunchTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2LaunchTemplateWithName retrieves all ec2.LaunchTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2LaunchTemplateWithName(name string) (*ec2.LaunchTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.LaunchTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.LaunchTemplate not found", name)
}

// GetAllEC2LocalGatewayRouteResources retrieves all ec2.LocalGatewayRoute items from an AWS CloudFormation template
func (t *Template) GetAllEC2LocalGatewayRouteResources() map[string]*ec2.LocalGatewayRoute[any] {
	results := map[string]*ec2.LocalGatewayRoute[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRoute[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2LocalGatewayRouteWithName retrieves all ec2.LocalGatewayRoute items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2LocalGatewayRouteWithName(name string) (*ec2.LocalGatewayRoute[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRoute[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.LocalGatewayRoute not found", name)
}

// GetAllEC2LocalGatewayRouteTableResources retrieves all ec2.LocalGatewayRouteTable items from an AWS CloudFormation template
func (t *Template) GetAllEC2LocalGatewayRouteTableResources() map[string]*ec2.LocalGatewayRouteTable[any] {
	results := map[string]*ec2.LocalGatewayRouteTable[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRouteTable[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2LocalGatewayRouteTableWithName retrieves all ec2.LocalGatewayRouteTable items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2LocalGatewayRouteTableWithName(name string) (*ec2.LocalGatewayRouteTable[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRouteTable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.LocalGatewayRouteTable not found", name)
}

// GetAllEC2LocalGatewayRouteTableVPCAssociationResources retrieves all ec2.LocalGatewayRouteTableVPCAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2LocalGatewayRouteTableVPCAssociationResources() map[string]*ec2.LocalGatewayRouteTableVPCAssociation[any] {
	results := map[string]*ec2.LocalGatewayRouteTableVPCAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRouteTableVPCAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2LocalGatewayRouteTableVPCAssociationWithName retrieves all ec2.LocalGatewayRouteTableVPCAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2LocalGatewayRouteTableVPCAssociationWithName(name string) (*ec2.LocalGatewayRouteTableVPCAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRouteTableVPCAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.LocalGatewayRouteTableVPCAssociation not found", name)
}

// GetAllEC2LocalGatewayRouteTableVirtualInterfaceGroupAssociationResources retrieves all ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2LocalGatewayRouteTableVirtualInterfaceGroupAssociationResources() map[string]*ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation[any] {
	results := map[string]*ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2LocalGatewayRouteTableVirtualInterfaceGroupAssociationWithName retrieves all ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2LocalGatewayRouteTableVirtualInterfaceGroupAssociationWithName(name string) (*ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation not found", name)
}

// GetAllEC2NatGatewayResources retrieves all ec2.NatGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2NatGatewayResources() map[string]*ec2.NatGateway[any] {
	results := map[string]*ec2.NatGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NatGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NatGatewayWithName retrieves all ec2.NatGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NatGatewayWithName(name string) (*ec2.NatGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NatGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NatGateway not found", name)
}

// GetAllEC2NetworkAclResources retrieves all ec2.NetworkAcl items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkAclResources() map[string]*ec2.NetworkAcl[any] {
	results := map[string]*ec2.NetworkAcl[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkAcl[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkAclWithName retrieves all ec2.NetworkAcl items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkAclWithName(name string) (*ec2.NetworkAcl[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkAcl[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkAcl not found", name)
}

// GetAllEC2NetworkAclEntryResources retrieves all ec2.NetworkAclEntry items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkAclEntryResources() map[string]*ec2.NetworkAclEntry[any] {
	results := map[string]*ec2.NetworkAclEntry[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkAclEntry[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkAclEntryWithName retrieves all ec2.NetworkAclEntry items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkAclEntryWithName(name string) (*ec2.NetworkAclEntry[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkAclEntry[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkAclEntry not found", name)
}

// GetAllEC2NetworkInsightsAccessScopeResources retrieves all ec2.NetworkInsightsAccessScope items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInsightsAccessScopeResources() map[string]*ec2.NetworkInsightsAccessScope[any] {
	results := map[string]*ec2.NetworkInsightsAccessScope[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsAccessScope[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInsightsAccessScopeWithName retrieves all ec2.NetworkInsightsAccessScope items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInsightsAccessScopeWithName(name string) (*ec2.NetworkInsightsAccessScope[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsAccessScope[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInsightsAccessScope not found", name)
}

// GetAllEC2NetworkInsightsAccessScopeAnalysisResources retrieves all ec2.NetworkInsightsAccessScopeAnalysis items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInsightsAccessScopeAnalysisResources() map[string]*ec2.NetworkInsightsAccessScopeAnalysis[any] {
	results := map[string]*ec2.NetworkInsightsAccessScopeAnalysis[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsAccessScopeAnalysis[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInsightsAccessScopeAnalysisWithName retrieves all ec2.NetworkInsightsAccessScopeAnalysis items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInsightsAccessScopeAnalysisWithName(name string) (*ec2.NetworkInsightsAccessScopeAnalysis[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsAccessScopeAnalysis[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInsightsAccessScopeAnalysis not found", name)
}

// GetAllEC2NetworkInsightsAnalysisResources retrieves all ec2.NetworkInsightsAnalysis items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInsightsAnalysisResources() map[string]*ec2.NetworkInsightsAnalysis[any] {
	results := map[string]*ec2.NetworkInsightsAnalysis[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsAnalysis[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInsightsAnalysisWithName retrieves all ec2.NetworkInsightsAnalysis items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInsightsAnalysisWithName(name string) (*ec2.NetworkInsightsAnalysis[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsAnalysis[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInsightsAnalysis not found", name)
}

// GetAllEC2NetworkInsightsPathResources retrieves all ec2.NetworkInsightsPath items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInsightsPathResources() map[string]*ec2.NetworkInsightsPath[any] {
	results := map[string]*ec2.NetworkInsightsPath[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsPath[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInsightsPathWithName retrieves all ec2.NetworkInsightsPath items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInsightsPathWithName(name string) (*ec2.NetworkInsightsPath[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInsightsPath[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInsightsPath not found", name)
}

// GetAllEC2NetworkInterfaceResources retrieves all ec2.NetworkInterface items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInterfaceResources() map[string]*ec2.NetworkInterface[any] {
	results := map[string]*ec2.NetworkInterface[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInterface[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInterfaceWithName retrieves all ec2.NetworkInterface items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInterfaceWithName(name string) (*ec2.NetworkInterface[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInterface[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInterface not found", name)
}

// GetAllEC2NetworkInterfaceAttachmentResources retrieves all ec2.NetworkInterfaceAttachment items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInterfaceAttachmentResources() map[string]*ec2.NetworkInterfaceAttachment[any] {
	results := map[string]*ec2.NetworkInterfaceAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInterfaceAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInterfaceAttachmentWithName retrieves all ec2.NetworkInterfaceAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInterfaceAttachmentWithName(name string) (*ec2.NetworkInterfaceAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInterfaceAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInterfaceAttachment not found", name)
}

// GetAllEC2NetworkInterfacePermissionResources retrieves all ec2.NetworkInterfacePermission items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkInterfacePermissionResources() map[string]*ec2.NetworkInterfacePermission[any] {
	results := map[string]*ec2.NetworkInterfacePermission[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkInterfacePermission[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkInterfacePermissionWithName retrieves all ec2.NetworkInterfacePermission items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkInterfacePermissionWithName(name string) (*ec2.NetworkInterfacePermission[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkInterfacePermission[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkInterfacePermission not found", name)
}

// GetAllEC2NetworkPerformanceMetricSubscriptionResources retrieves all ec2.NetworkPerformanceMetricSubscription items from an AWS CloudFormation template
func (t *Template) GetAllEC2NetworkPerformanceMetricSubscriptionResources() map[string]*ec2.NetworkPerformanceMetricSubscription[any] {
	results := map[string]*ec2.NetworkPerformanceMetricSubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.NetworkPerformanceMetricSubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2NetworkPerformanceMetricSubscriptionWithName retrieves all ec2.NetworkPerformanceMetricSubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2NetworkPerformanceMetricSubscriptionWithName(name string) (*ec2.NetworkPerformanceMetricSubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.NetworkPerformanceMetricSubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.NetworkPerformanceMetricSubscription not found", name)
}

// GetAllEC2PlacementGroupResources retrieves all ec2.PlacementGroup items from an AWS CloudFormation template
func (t *Template) GetAllEC2PlacementGroupResources() map[string]*ec2.PlacementGroup[any] {
	results := map[string]*ec2.PlacementGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.PlacementGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2PlacementGroupWithName retrieves all ec2.PlacementGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2PlacementGroupWithName(name string) (*ec2.PlacementGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.PlacementGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.PlacementGroup not found", name)
}

// GetAllEC2PrefixListResources retrieves all ec2.PrefixList items from an AWS CloudFormation template
func (t *Template) GetAllEC2PrefixListResources() map[string]*ec2.PrefixList[any] {
	results := map[string]*ec2.PrefixList[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.PrefixList[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2PrefixListWithName retrieves all ec2.PrefixList items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2PrefixListWithName(name string) (*ec2.PrefixList[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.PrefixList[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.PrefixList not found", name)
}

// GetAllEC2RouteResources retrieves all ec2.Route items from an AWS CloudFormation template
func (t *Template) GetAllEC2RouteResources() map[string]*ec2.Route[any] {
	results := map[string]*ec2.Route[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.Route[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2RouteWithName retrieves all ec2.Route items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2RouteWithName(name string) (*ec2.Route[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.Route[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.Route not found", name)
}

// GetAllEC2RouteTableResources retrieves all ec2.RouteTable items from an AWS CloudFormation template
func (t *Template) GetAllEC2RouteTableResources() map[string]*ec2.RouteTable[any] {
	results := map[string]*ec2.RouteTable[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.RouteTable[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2RouteTableWithName retrieves all ec2.RouteTable items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2RouteTableWithName(name string) (*ec2.RouteTable[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.RouteTable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.RouteTable not found", name)
}

// GetAllEC2SecurityGroupResources retrieves all ec2.SecurityGroup items from an AWS CloudFormation template
func (t *Template) GetAllEC2SecurityGroupResources() map[string]*ec2.SecurityGroup[any] {
	results := map[string]*ec2.SecurityGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SecurityGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SecurityGroupWithName retrieves all ec2.SecurityGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SecurityGroupWithName(name string) (*ec2.SecurityGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SecurityGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SecurityGroup not found", name)
}

// GetAllEC2SecurityGroupEgressResources retrieves all ec2.SecurityGroupEgress items from an AWS CloudFormation template
func (t *Template) GetAllEC2SecurityGroupEgressResources() map[string]*ec2.SecurityGroupEgress[any] {
	results := map[string]*ec2.SecurityGroupEgress[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SecurityGroupEgress[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SecurityGroupEgressWithName retrieves all ec2.SecurityGroupEgress items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SecurityGroupEgressWithName(name string) (*ec2.SecurityGroupEgress[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SecurityGroupEgress[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SecurityGroupEgress not found", name)
}

// GetAllEC2SecurityGroupIngressResources retrieves all ec2.SecurityGroupIngress items from an AWS CloudFormation template
func (t *Template) GetAllEC2SecurityGroupIngressResources() map[string]*ec2.SecurityGroupIngress[any] {
	results := map[string]*ec2.SecurityGroupIngress[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SecurityGroupIngress[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SecurityGroupIngressWithName retrieves all ec2.SecurityGroupIngress items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SecurityGroupIngressWithName(name string) (*ec2.SecurityGroupIngress[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SecurityGroupIngress[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SecurityGroupIngress not found", name)
}

// GetAllEC2SpotFleetResources retrieves all ec2.SpotFleet items from an AWS CloudFormation template
func (t *Template) GetAllEC2SpotFleetResources() map[string]*ec2.SpotFleet[any] {
	results := map[string]*ec2.SpotFleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SpotFleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SpotFleetWithName retrieves all ec2.SpotFleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SpotFleetWithName(name string) (*ec2.SpotFleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SpotFleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SpotFleet not found", name)
}

// GetAllEC2SubnetResources retrieves all ec2.Subnet items from an AWS CloudFormation template
func (t *Template) GetAllEC2SubnetResources() map[string]*ec2.Subnet[any] {
	results := map[string]*ec2.Subnet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.Subnet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SubnetWithName retrieves all ec2.Subnet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SubnetWithName(name string) (*ec2.Subnet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.Subnet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.Subnet not found", name)
}

// GetAllEC2SubnetCidrBlockResources retrieves all ec2.SubnetCidrBlock items from an AWS CloudFormation template
func (t *Template) GetAllEC2SubnetCidrBlockResources() map[string]*ec2.SubnetCidrBlock[any] {
	results := map[string]*ec2.SubnetCidrBlock[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SubnetCidrBlock[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SubnetCidrBlockWithName retrieves all ec2.SubnetCidrBlock items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SubnetCidrBlockWithName(name string) (*ec2.SubnetCidrBlock[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SubnetCidrBlock[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SubnetCidrBlock not found", name)
}

// GetAllEC2SubnetNetworkAclAssociationResources retrieves all ec2.SubnetNetworkAclAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2SubnetNetworkAclAssociationResources() map[string]*ec2.SubnetNetworkAclAssociation[any] {
	results := map[string]*ec2.SubnetNetworkAclAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SubnetNetworkAclAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SubnetNetworkAclAssociationWithName retrieves all ec2.SubnetNetworkAclAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SubnetNetworkAclAssociationWithName(name string) (*ec2.SubnetNetworkAclAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SubnetNetworkAclAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SubnetNetworkAclAssociation not found", name)
}

// GetAllEC2SubnetRouteTableAssociationResources retrieves all ec2.SubnetRouteTableAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2SubnetRouteTableAssociationResources() map[string]*ec2.SubnetRouteTableAssociation[any] {
	results := map[string]*ec2.SubnetRouteTableAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.SubnetRouteTableAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2SubnetRouteTableAssociationWithName retrieves all ec2.SubnetRouteTableAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2SubnetRouteTableAssociationWithName(name string) (*ec2.SubnetRouteTableAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.SubnetRouteTableAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.SubnetRouteTableAssociation not found", name)
}

// GetAllEC2TrafficMirrorFilterResources retrieves all ec2.TrafficMirrorFilter items from an AWS CloudFormation template
func (t *Template) GetAllEC2TrafficMirrorFilterResources() map[string]*ec2.TrafficMirrorFilter[any] {
	results := map[string]*ec2.TrafficMirrorFilter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorFilter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TrafficMirrorFilterWithName retrieves all ec2.TrafficMirrorFilter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TrafficMirrorFilterWithName(name string) (*ec2.TrafficMirrorFilter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorFilter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TrafficMirrorFilter not found", name)
}

// GetAllEC2TrafficMirrorFilterRuleResources retrieves all ec2.TrafficMirrorFilterRule items from an AWS CloudFormation template
func (t *Template) GetAllEC2TrafficMirrorFilterRuleResources() map[string]*ec2.TrafficMirrorFilterRule[any] {
	results := map[string]*ec2.TrafficMirrorFilterRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorFilterRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TrafficMirrorFilterRuleWithName retrieves all ec2.TrafficMirrorFilterRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TrafficMirrorFilterRuleWithName(name string) (*ec2.TrafficMirrorFilterRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorFilterRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TrafficMirrorFilterRule not found", name)
}

// GetAllEC2TrafficMirrorSessionResources retrieves all ec2.TrafficMirrorSession items from an AWS CloudFormation template
func (t *Template) GetAllEC2TrafficMirrorSessionResources() map[string]*ec2.TrafficMirrorSession[any] {
	results := map[string]*ec2.TrafficMirrorSession[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorSession[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TrafficMirrorSessionWithName retrieves all ec2.TrafficMirrorSession items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TrafficMirrorSessionWithName(name string) (*ec2.TrafficMirrorSession[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorSession[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TrafficMirrorSession not found", name)
}

// GetAllEC2TrafficMirrorTargetResources retrieves all ec2.TrafficMirrorTarget items from an AWS CloudFormation template
func (t *Template) GetAllEC2TrafficMirrorTargetResources() map[string]*ec2.TrafficMirrorTarget[any] {
	results := map[string]*ec2.TrafficMirrorTarget[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorTarget[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TrafficMirrorTargetWithName retrieves all ec2.TrafficMirrorTarget items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TrafficMirrorTargetWithName(name string) (*ec2.TrafficMirrorTarget[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TrafficMirrorTarget[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TrafficMirrorTarget not found", name)
}

// GetAllEC2TransitGatewayResources retrieves all ec2.TransitGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayResources() map[string]*ec2.TransitGateway[any] {
	results := map[string]*ec2.TransitGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayWithName retrieves all ec2.TransitGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayWithName(name string) (*ec2.TransitGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGateway not found", name)
}

// GetAllEC2TransitGatewayAttachmentResources retrieves all ec2.TransitGatewayAttachment items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayAttachmentResources() map[string]*ec2.TransitGatewayAttachment[any] {
	results := map[string]*ec2.TransitGatewayAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayAttachmentWithName retrieves all ec2.TransitGatewayAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayAttachmentWithName(name string) (*ec2.TransitGatewayAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayAttachment not found", name)
}

// GetAllEC2TransitGatewayConnectResources retrieves all ec2.TransitGatewayConnect items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayConnectResources() map[string]*ec2.TransitGatewayConnect[any] {
	results := map[string]*ec2.TransitGatewayConnect[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayConnect[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayConnectWithName retrieves all ec2.TransitGatewayConnect items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayConnectWithName(name string) (*ec2.TransitGatewayConnect[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayConnect[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayConnect not found", name)
}

// GetAllEC2TransitGatewayMulticastDomainResources retrieves all ec2.TransitGatewayMulticastDomain items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayMulticastDomainResources() map[string]*ec2.TransitGatewayMulticastDomain[any] {
	results := map[string]*ec2.TransitGatewayMulticastDomain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastDomain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayMulticastDomainWithName retrieves all ec2.TransitGatewayMulticastDomain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayMulticastDomainWithName(name string) (*ec2.TransitGatewayMulticastDomain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastDomain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayMulticastDomain not found", name)
}

// GetAllEC2TransitGatewayMulticastDomainAssociationResources retrieves all ec2.TransitGatewayMulticastDomainAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayMulticastDomainAssociationResources() map[string]*ec2.TransitGatewayMulticastDomainAssociation[any] {
	results := map[string]*ec2.TransitGatewayMulticastDomainAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastDomainAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayMulticastDomainAssociationWithName retrieves all ec2.TransitGatewayMulticastDomainAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayMulticastDomainAssociationWithName(name string) (*ec2.TransitGatewayMulticastDomainAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastDomainAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayMulticastDomainAssociation not found", name)
}

// GetAllEC2TransitGatewayMulticastGroupMemberResources retrieves all ec2.TransitGatewayMulticastGroupMember items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayMulticastGroupMemberResources() map[string]*ec2.TransitGatewayMulticastGroupMember[any] {
	results := map[string]*ec2.TransitGatewayMulticastGroupMember[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastGroupMember[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayMulticastGroupMemberWithName retrieves all ec2.TransitGatewayMulticastGroupMember items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayMulticastGroupMemberWithName(name string) (*ec2.TransitGatewayMulticastGroupMember[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastGroupMember[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayMulticastGroupMember not found", name)
}

// GetAllEC2TransitGatewayMulticastGroupSourceResources retrieves all ec2.TransitGatewayMulticastGroupSource items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayMulticastGroupSourceResources() map[string]*ec2.TransitGatewayMulticastGroupSource[any] {
	results := map[string]*ec2.TransitGatewayMulticastGroupSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastGroupSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayMulticastGroupSourceWithName retrieves all ec2.TransitGatewayMulticastGroupSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayMulticastGroupSourceWithName(name string) (*ec2.TransitGatewayMulticastGroupSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayMulticastGroupSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayMulticastGroupSource not found", name)
}

// GetAllEC2TransitGatewayPeeringAttachmentResources retrieves all ec2.TransitGatewayPeeringAttachment items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayPeeringAttachmentResources() map[string]*ec2.TransitGatewayPeeringAttachment[any] {
	results := map[string]*ec2.TransitGatewayPeeringAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayPeeringAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayPeeringAttachmentWithName retrieves all ec2.TransitGatewayPeeringAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayPeeringAttachmentWithName(name string) (*ec2.TransitGatewayPeeringAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayPeeringAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayPeeringAttachment not found", name)
}

// GetAllEC2TransitGatewayRouteResources retrieves all ec2.TransitGatewayRoute items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayRouteResources() map[string]*ec2.TransitGatewayRoute[any] {
	results := map[string]*ec2.TransitGatewayRoute[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRoute[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayRouteWithName retrieves all ec2.TransitGatewayRoute items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayRouteWithName(name string) (*ec2.TransitGatewayRoute[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRoute[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayRoute not found", name)
}

// GetAllEC2TransitGatewayRouteTableResources retrieves all ec2.TransitGatewayRouteTable items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayRouteTableResources() map[string]*ec2.TransitGatewayRouteTable[any] {
	results := map[string]*ec2.TransitGatewayRouteTable[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRouteTable[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayRouteTableWithName retrieves all ec2.TransitGatewayRouteTable items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayRouteTableWithName(name string) (*ec2.TransitGatewayRouteTable[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRouteTable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayRouteTable not found", name)
}

// GetAllEC2TransitGatewayRouteTableAssociationResources retrieves all ec2.TransitGatewayRouteTableAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayRouteTableAssociationResources() map[string]*ec2.TransitGatewayRouteTableAssociation[any] {
	results := map[string]*ec2.TransitGatewayRouteTableAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRouteTableAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayRouteTableAssociationWithName retrieves all ec2.TransitGatewayRouteTableAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayRouteTableAssociationWithName(name string) (*ec2.TransitGatewayRouteTableAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRouteTableAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayRouteTableAssociation not found", name)
}

// GetAllEC2TransitGatewayRouteTablePropagationResources retrieves all ec2.TransitGatewayRouteTablePropagation items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayRouteTablePropagationResources() map[string]*ec2.TransitGatewayRouteTablePropagation[any] {
	results := map[string]*ec2.TransitGatewayRouteTablePropagation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRouteTablePropagation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayRouteTablePropagationWithName retrieves all ec2.TransitGatewayRouteTablePropagation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayRouteTablePropagationWithName(name string) (*ec2.TransitGatewayRouteTablePropagation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayRouteTablePropagation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayRouteTablePropagation not found", name)
}

// GetAllEC2TransitGatewayVpcAttachmentResources retrieves all ec2.TransitGatewayVpcAttachment items from an AWS CloudFormation template
func (t *Template) GetAllEC2TransitGatewayVpcAttachmentResources() map[string]*ec2.TransitGatewayVpcAttachment[any] {
	results := map[string]*ec2.TransitGatewayVpcAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayVpcAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2TransitGatewayVpcAttachmentWithName retrieves all ec2.TransitGatewayVpcAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2TransitGatewayVpcAttachmentWithName(name string) (*ec2.TransitGatewayVpcAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.TransitGatewayVpcAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.TransitGatewayVpcAttachment not found", name)
}

// GetAllEC2VPCResources retrieves all ec2.VPC items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCResources() map[string]*ec2.VPC[any] {
	results := map[string]*ec2.VPC[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPC[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCWithName retrieves all ec2.VPC items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCWithName(name string) (*ec2.VPC[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPC[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPC not found", name)
}

// GetAllEC2VPCCidrBlockResources retrieves all ec2.VPCCidrBlock items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCCidrBlockResources() map[string]*ec2.VPCCidrBlock[any] {
	results := map[string]*ec2.VPCCidrBlock[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCCidrBlock[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCCidrBlockWithName retrieves all ec2.VPCCidrBlock items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCCidrBlockWithName(name string) (*ec2.VPCCidrBlock[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCCidrBlock[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCCidrBlock not found", name)
}

// GetAllEC2VPCDHCPOptionsAssociationResources retrieves all ec2.VPCDHCPOptionsAssociation items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCDHCPOptionsAssociationResources() map[string]*ec2.VPCDHCPOptionsAssociation[any] {
	results := map[string]*ec2.VPCDHCPOptionsAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCDHCPOptionsAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCDHCPOptionsAssociationWithName retrieves all ec2.VPCDHCPOptionsAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCDHCPOptionsAssociationWithName(name string) (*ec2.VPCDHCPOptionsAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCDHCPOptionsAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCDHCPOptionsAssociation not found", name)
}

// GetAllEC2VPCEndpointResources retrieves all ec2.VPCEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCEndpointResources() map[string]*ec2.VPCEndpoint[any] {
	results := map[string]*ec2.VPCEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCEndpointWithName retrieves all ec2.VPCEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCEndpointWithName(name string) (*ec2.VPCEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCEndpoint not found", name)
}

// GetAllEC2VPCEndpointConnectionNotificationResources retrieves all ec2.VPCEndpointConnectionNotification items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCEndpointConnectionNotificationResources() map[string]*ec2.VPCEndpointConnectionNotification[any] {
	results := map[string]*ec2.VPCEndpointConnectionNotification[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpointConnectionNotification[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCEndpointConnectionNotificationWithName retrieves all ec2.VPCEndpointConnectionNotification items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCEndpointConnectionNotificationWithName(name string) (*ec2.VPCEndpointConnectionNotification[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpointConnectionNotification[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCEndpointConnectionNotification not found", name)
}

// GetAllEC2VPCEndpointServiceResources retrieves all ec2.VPCEndpointService items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCEndpointServiceResources() map[string]*ec2.VPCEndpointService[any] {
	results := map[string]*ec2.VPCEndpointService[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpointService[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCEndpointServiceWithName retrieves all ec2.VPCEndpointService items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCEndpointServiceWithName(name string) (*ec2.VPCEndpointService[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpointService[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCEndpointService not found", name)
}

// GetAllEC2VPCEndpointServicePermissionsResources retrieves all ec2.VPCEndpointServicePermissions items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCEndpointServicePermissionsResources() map[string]*ec2.VPCEndpointServicePermissions[any] {
	results := map[string]*ec2.VPCEndpointServicePermissions[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpointServicePermissions[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCEndpointServicePermissionsWithName retrieves all ec2.VPCEndpointServicePermissions items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCEndpointServicePermissionsWithName(name string) (*ec2.VPCEndpointServicePermissions[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCEndpointServicePermissions[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCEndpointServicePermissions not found", name)
}

// GetAllEC2VPCGatewayAttachmentResources retrieves all ec2.VPCGatewayAttachment items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCGatewayAttachmentResources() map[string]*ec2.VPCGatewayAttachment[any] {
	results := map[string]*ec2.VPCGatewayAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCGatewayAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCGatewayAttachmentWithName retrieves all ec2.VPCGatewayAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCGatewayAttachmentWithName(name string) (*ec2.VPCGatewayAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCGatewayAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCGatewayAttachment not found", name)
}

// GetAllEC2VPCPeeringConnectionResources retrieves all ec2.VPCPeeringConnection items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPCPeeringConnectionResources() map[string]*ec2.VPCPeeringConnection[any] {
	results := map[string]*ec2.VPCPeeringConnection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPCPeeringConnection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPCPeeringConnectionWithName retrieves all ec2.VPCPeeringConnection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPCPeeringConnectionWithName(name string) (*ec2.VPCPeeringConnection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPCPeeringConnection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPCPeeringConnection not found", name)
}

// GetAllEC2VPNConnectionResources retrieves all ec2.VPNConnection items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPNConnectionResources() map[string]*ec2.VPNConnection[any] {
	results := map[string]*ec2.VPNConnection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPNConnection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPNConnectionWithName retrieves all ec2.VPNConnection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPNConnectionWithName(name string) (*ec2.VPNConnection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPNConnection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPNConnection not found", name)
}

// GetAllEC2VPNConnectionRouteResources retrieves all ec2.VPNConnectionRoute items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPNConnectionRouteResources() map[string]*ec2.VPNConnectionRoute[any] {
	results := map[string]*ec2.VPNConnectionRoute[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPNConnectionRoute[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPNConnectionRouteWithName retrieves all ec2.VPNConnectionRoute items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPNConnectionRouteWithName(name string) (*ec2.VPNConnectionRoute[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPNConnectionRoute[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPNConnectionRoute not found", name)
}

// GetAllEC2VPNGatewayResources retrieves all ec2.VPNGateway items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPNGatewayResources() map[string]*ec2.VPNGateway[any] {
	results := map[string]*ec2.VPNGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPNGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPNGatewayWithName retrieves all ec2.VPNGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPNGatewayWithName(name string) (*ec2.VPNGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPNGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPNGateway not found", name)
}

// GetAllEC2VPNGatewayRoutePropagationResources retrieves all ec2.VPNGatewayRoutePropagation items from an AWS CloudFormation template
func (t *Template) GetAllEC2VPNGatewayRoutePropagationResources() map[string]*ec2.VPNGatewayRoutePropagation[any] {
	results := map[string]*ec2.VPNGatewayRoutePropagation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VPNGatewayRoutePropagation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VPNGatewayRoutePropagationWithName retrieves all ec2.VPNGatewayRoutePropagation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VPNGatewayRoutePropagationWithName(name string) (*ec2.VPNGatewayRoutePropagation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VPNGatewayRoutePropagation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VPNGatewayRoutePropagation not found", name)
}

// GetAllEC2VerifiedAccessEndpointResources retrieves all ec2.VerifiedAccessEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllEC2VerifiedAccessEndpointResources() map[string]*ec2.VerifiedAccessEndpoint[any] {
	results := map[string]*ec2.VerifiedAccessEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VerifiedAccessEndpointWithName retrieves all ec2.VerifiedAccessEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VerifiedAccessEndpointWithName(name string) (*ec2.VerifiedAccessEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VerifiedAccessEndpoint not found", name)
}

// GetAllEC2VerifiedAccessGroupResources retrieves all ec2.VerifiedAccessGroup items from an AWS CloudFormation template
func (t *Template) GetAllEC2VerifiedAccessGroupResources() map[string]*ec2.VerifiedAccessGroup[any] {
	results := map[string]*ec2.VerifiedAccessGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VerifiedAccessGroupWithName retrieves all ec2.VerifiedAccessGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VerifiedAccessGroupWithName(name string) (*ec2.VerifiedAccessGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VerifiedAccessGroup not found", name)
}

// GetAllEC2VerifiedAccessInstanceResources retrieves all ec2.VerifiedAccessInstance items from an AWS CloudFormation template
func (t *Template) GetAllEC2VerifiedAccessInstanceResources() map[string]*ec2.VerifiedAccessInstance[any] {
	results := map[string]*ec2.VerifiedAccessInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VerifiedAccessInstanceWithName retrieves all ec2.VerifiedAccessInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VerifiedAccessInstanceWithName(name string) (*ec2.VerifiedAccessInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VerifiedAccessInstance not found", name)
}

// GetAllEC2VerifiedAccessTrustProviderResources retrieves all ec2.VerifiedAccessTrustProvider items from an AWS CloudFormation template
func (t *Template) GetAllEC2VerifiedAccessTrustProviderResources() map[string]*ec2.VerifiedAccessTrustProvider[any] {
	results := map[string]*ec2.VerifiedAccessTrustProvider[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessTrustProvider[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VerifiedAccessTrustProviderWithName retrieves all ec2.VerifiedAccessTrustProvider items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VerifiedAccessTrustProviderWithName(name string) (*ec2.VerifiedAccessTrustProvider[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VerifiedAccessTrustProvider[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VerifiedAccessTrustProvider not found", name)
}

// GetAllEC2VolumeResources retrieves all ec2.Volume items from an AWS CloudFormation template
func (t *Template) GetAllEC2VolumeResources() map[string]*ec2.Volume[any] {
	results := map[string]*ec2.Volume[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.Volume[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VolumeWithName retrieves all ec2.Volume items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VolumeWithName(name string) (*ec2.Volume[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.Volume[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.Volume not found", name)
}

// GetAllEC2VolumeAttachmentResources retrieves all ec2.VolumeAttachment items from an AWS CloudFormation template
func (t *Template) GetAllEC2VolumeAttachmentResources() map[string]*ec2.VolumeAttachment[any] {
	results := map[string]*ec2.VolumeAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ec2.VolumeAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEC2VolumeAttachmentWithName retrieves all ec2.VolumeAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEC2VolumeAttachmentWithName(name string) (*ec2.VolumeAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ec2.VolumeAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ec2.VolumeAttachment not found", name)
}

// GetAllECRPublicRepositoryResources retrieves all ecr.PublicRepository items from an AWS CloudFormation template
func (t *Template) GetAllECRPublicRepositoryResources() map[string]*ecr.PublicRepository[any] {
	results := map[string]*ecr.PublicRepository[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecr.PublicRepository[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECRPublicRepositoryWithName retrieves all ecr.PublicRepository items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECRPublicRepositoryWithName(name string) (*ecr.PublicRepository[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecr.PublicRepository[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecr.PublicRepository not found", name)
}

// GetAllECRPullThroughCacheRuleResources retrieves all ecr.PullThroughCacheRule items from an AWS CloudFormation template
func (t *Template) GetAllECRPullThroughCacheRuleResources() map[string]*ecr.PullThroughCacheRule[any] {
	results := map[string]*ecr.PullThroughCacheRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecr.PullThroughCacheRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECRPullThroughCacheRuleWithName retrieves all ecr.PullThroughCacheRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECRPullThroughCacheRuleWithName(name string) (*ecr.PullThroughCacheRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecr.PullThroughCacheRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecr.PullThroughCacheRule not found", name)
}

// GetAllECRRegistryPolicyResources retrieves all ecr.RegistryPolicy items from an AWS CloudFormation template
func (t *Template) GetAllECRRegistryPolicyResources() map[string]*ecr.RegistryPolicy[any] {
	results := map[string]*ecr.RegistryPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecr.RegistryPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECRRegistryPolicyWithName retrieves all ecr.RegistryPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECRRegistryPolicyWithName(name string) (*ecr.RegistryPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecr.RegistryPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecr.RegistryPolicy not found", name)
}

// GetAllECRReplicationConfigurationResources retrieves all ecr.ReplicationConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllECRReplicationConfigurationResources() map[string]*ecr.ReplicationConfiguration[any] {
	results := map[string]*ecr.ReplicationConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecr.ReplicationConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECRReplicationConfigurationWithName retrieves all ecr.ReplicationConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECRReplicationConfigurationWithName(name string) (*ecr.ReplicationConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecr.ReplicationConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecr.ReplicationConfiguration not found", name)
}

// GetAllECRRepositoryResources retrieves all ecr.Repository items from an AWS CloudFormation template
func (t *Template) GetAllECRRepositoryResources() map[string]*ecr.Repository[any] {
	results := map[string]*ecr.Repository[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecr.Repository[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECRRepositoryWithName retrieves all ecr.Repository items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECRRepositoryWithName(name string) (*ecr.Repository[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecr.Repository[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecr.Repository not found", name)
}

// GetAllECSCapacityProviderResources retrieves all ecs.CapacityProvider items from an AWS CloudFormation template
func (t *Template) GetAllECSCapacityProviderResources() map[string]*ecs.CapacityProvider[any] {
	results := map[string]*ecs.CapacityProvider[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.CapacityProvider[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSCapacityProviderWithName retrieves all ecs.CapacityProvider items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSCapacityProviderWithName(name string) (*ecs.CapacityProvider[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.CapacityProvider[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.CapacityProvider not found", name)
}

// GetAllECSClusterResources retrieves all ecs.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllECSClusterResources() map[string]*ecs.Cluster[any] {
	results := map[string]*ecs.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSClusterWithName retrieves all ecs.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSClusterWithName(name string) (*ecs.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.Cluster not found", name)
}

// GetAllECSClusterCapacityProviderAssociationsResources retrieves all ecs.ClusterCapacityProviderAssociations items from an AWS CloudFormation template
func (t *Template) GetAllECSClusterCapacityProviderAssociationsResources() map[string]*ecs.ClusterCapacityProviderAssociations[any] {
	results := map[string]*ecs.ClusterCapacityProviderAssociations[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.ClusterCapacityProviderAssociations[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSClusterCapacityProviderAssociationsWithName retrieves all ecs.ClusterCapacityProviderAssociations items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSClusterCapacityProviderAssociationsWithName(name string) (*ecs.ClusterCapacityProviderAssociations[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.ClusterCapacityProviderAssociations[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.ClusterCapacityProviderAssociations not found", name)
}

// GetAllECSPrimaryTaskSetResources retrieves all ecs.PrimaryTaskSet items from an AWS CloudFormation template
func (t *Template) GetAllECSPrimaryTaskSetResources() map[string]*ecs.PrimaryTaskSet[any] {
	results := map[string]*ecs.PrimaryTaskSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.PrimaryTaskSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSPrimaryTaskSetWithName retrieves all ecs.PrimaryTaskSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSPrimaryTaskSetWithName(name string) (*ecs.PrimaryTaskSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.PrimaryTaskSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.PrimaryTaskSet not found", name)
}

// GetAllECSServiceResources retrieves all ecs.Service items from an AWS CloudFormation template
func (t *Template) GetAllECSServiceResources() map[string]*ecs.Service[any] {
	results := map[string]*ecs.Service[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.Service[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSServiceWithName retrieves all ecs.Service items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSServiceWithName(name string) (*ecs.Service[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.Service[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.Service not found", name)
}

// GetAllECSTaskDefinitionResources retrieves all ecs.TaskDefinition items from an AWS CloudFormation template
func (t *Template) GetAllECSTaskDefinitionResources() map[string]*ecs.TaskDefinition[any] {
	results := map[string]*ecs.TaskDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.TaskDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSTaskDefinitionWithName retrieves all ecs.TaskDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSTaskDefinitionWithName(name string) (*ecs.TaskDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.TaskDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.TaskDefinition not found", name)
}

// GetAllECSTaskSetResources retrieves all ecs.TaskSet items from an AWS CloudFormation template
func (t *Template) GetAllECSTaskSetResources() map[string]*ecs.TaskSet[any] {
	results := map[string]*ecs.TaskSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ecs.TaskSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetECSTaskSetWithName retrieves all ecs.TaskSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetECSTaskSetWithName(name string) (*ecs.TaskSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ecs.TaskSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ecs.TaskSet not found", name)
}

// GetAllEFSAccessPointResources retrieves all efs.AccessPoint items from an AWS CloudFormation template
func (t *Template) GetAllEFSAccessPointResources() map[string]*efs.AccessPoint[any] {
	results := map[string]*efs.AccessPoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *efs.AccessPoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEFSAccessPointWithName retrieves all efs.AccessPoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEFSAccessPointWithName(name string) (*efs.AccessPoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *efs.AccessPoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type efs.AccessPoint not found", name)
}

// GetAllEFSFileSystemResources retrieves all efs.FileSystem items from an AWS CloudFormation template
func (t *Template) GetAllEFSFileSystemResources() map[string]*efs.FileSystem[any] {
	results := map[string]*efs.FileSystem[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *efs.FileSystem[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEFSFileSystemWithName retrieves all efs.FileSystem items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEFSFileSystemWithName(name string) (*efs.FileSystem[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *efs.FileSystem[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type efs.FileSystem not found", name)
}

// GetAllEFSMountTargetResources retrieves all efs.MountTarget items from an AWS CloudFormation template
func (t *Template) GetAllEFSMountTargetResources() map[string]*efs.MountTarget[any] {
	results := map[string]*efs.MountTarget[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *efs.MountTarget[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEFSMountTargetWithName retrieves all efs.MountTarget items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEFSMountTargetWithName(name string) (*efs.MountTarget[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *efs.MountTarget[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type efs.MountTarget not found", name)
}

// GetAllEKSAddonResources retrieves all eks.Addon items from an AWS CloudFormation template
func (t *Template) GetAllEKSAddonResources() map[string]*eks.Addon[any] {
	results := map[string]*eks.Addon[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eks.Addon[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEKSAddonWithName retrieves all eks.Addon items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEKSAddonWithName(name string) (*eks.Addon[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eks.Addon[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eks.Addon not found", name)
}

// GetAllEKSClusterResources retrieves all eks.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllEKSClusterResources() map[string]*eks.Cluster[any] {
	results := map[string]*eks.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eks.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEKSClusterWithName retrieves all eks.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEKSClusterWithName(name string) (*eks.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eks.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eks.Cluster not found", name)
}

// GetAllEKSFargateProfileResources retrieves all eks.FargateProfile items from an AWS CloudFormation template
func (t *Template) GetAllEKSFargateProfileResources() map[string]*eks.FargateProfile[any] {
	results := map[string]*eks.FargateProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eks.FargateProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEKSFargateProfileWithName retrieves all eks.FargateProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEKSFargateProfileWithName(name string) (*eks.FargateProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eks.FargateProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eks.FargateProfile not found", name)
}

// GetAllEKSIdentityProviderConfigResources retrieves all eks.IdentityProviderConfig items from an AWS CloudFormation template
func (t *Template) GetAllEKSIdentityProviderConfigResources() map[string]*eks.IdentityProviderConfig[any] {
	results := map[string]*eks.IdentityProviderConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eks.IdentityProviderConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEKSIdentityProviderConfigWithName retrieves all eks.IdentityProviderConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEKSIdentityProviderConfigWithName(name string) (*eks.IdentityProviderConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eks.IdentityProviderConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eks.IdentityProviderConfig not found", name)
}

// GetAllEKSNodegroupResources retrieves all eks.Nodegroup items from an AWS CloudFormation template
func (t *Template) GetAllEKSNodegroupResources() map[string]*eks.Nodegroup[any] {
	results := map[string]*eks.Nodegroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eks.Nodegroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEKSNodegroupWithName retrieves all eks.Nodegroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEKSNodegroupWithName(name string) (*eks.Nodegroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eks.Nodegroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eks.Nodegroup not found", name)
}

// GetAllEMRClusterResources retrieves all emr.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllEMRClusterResources() map[string]*emr.Cluster[any] {
	results := map[string]*emr.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRClusterWithName retrieves all emr.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRClusterWithName(name string) (*emr.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.Cluster not found", name)
}

// GetAllEMRInstanceFleetConfigResources retrieves all emr.InstanceFleetConfig items from an AWS CloudFormation template
func (t *Template) GetAllEMRInstanceFleetConfigResources() map[string]*emr.InstanceFleetConfig[any] {
	results := map[string]*emr.InstanceFleetConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.InstanceFleetConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRInstanceFleetConfigWithName retrieves all emr.InstanceFleetConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRInstanceFleetConfigWithName(name string) (*emr.InstanceFleetConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.InstanceFleetConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.InstanceFleetConfig not found", name)
}

// GetAllEMRInstanceGroupConfigResources retrieves all emr.InstanceGroupConfig items from an AWS CloudFormation template
func (t *Template) GetAllEMRInstanceGroupConfigResources() map[string]*emr.InstanceGroupConfig[any] {
	results := map[string]*emr.InstanceGroupConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.InstanceGroupConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRInstanceGroupConfigWithName retrieves all emr.InstanceGroupConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRInstanceGroupConfigWithName(name string) (*emr.InstanceGroupConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.InstanceGroupConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.InstanceGroupConfig not found", name)
}

// GetAllEMRSecurityConfigurationResources retrieves all emr.SecurityConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllEMRSecurityConfigurationResources() map[string]*emr.SecurityConfiguration[any] {
	results := map[string]*emr.SecurityConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.SecurityConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRSecurityConfigurationWithName retrieves all emr.SecurityConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRSecurityConfigurationWithName(name string) (*emr.SecurityConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.SecurityConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.SecurityConfiguration not found", name)
}

// GetAllEMRStepResources retrieves all emr.Step items from an AWS CloudFormation template
func (t *Template) GetAllEMRStepResources() map[string]*emr.Step[any] {
	results := map[string]*emr.Step[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.Step[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRStepWithName retrieves all emr.Step items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRStepWithName(name string) (*emr.Step[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.Step[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.Step not found", name)
}

// GetAllEMRStudioResources retrieves all emr.Studio items from an AWS CloudFormation template
func (t *Template) GetAllEMRStudioResources() map[string]*emr.Studio[any] {
	results := map[string]*emr.Studio[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.Studio[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRStudioWithName retrieves all emr.Studio items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRStudioWithName(name string) (*emr.Studio[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.Studio[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.Studio not found", name)
}

// GetAllEMRStudioSessionMappingResources retrieves all emr.StudioSessionMapping items from an AWS CloudFormation template
func (t *Template) GetAllEMRStudioSessionMappingResources() map[string]*emr.StudioSessionMapping[any] {
	results := map[string]*emr.StudioSessionMapping[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emr.StudioSessionMapping[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRStudioSessionMappingWithName retrieves all emr.StudioSessionMapping items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRStudioSessionMappingWithName(name string) (*emr.StudioSessionMapping[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emr.StudioSessionMapping[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emr.StudioSessionMapping not found", name)
}

// GetAllEMRContainersVirtualClusterResources retrieves all emrcontainers.VirtualCluster items from an AWS CloudFormation template
func (t *Template) GetAllEMRContainersVirtualClusterResources() map[string]*emrcontainers.VirtualCluster[any] {
	results := map[string]*emrcontainers.VirtualCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emrcontainers.VirtualCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRContainersVirtualClusterWithName retrieves all emrcontainers.VirtualCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRContainersVirtualClusterWithName(name string) (*emrcontainers.VirtualCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emrcontainers.VirtualCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emrcontainers.VirtualCluster not found", name)
}

// GetAllEMRServerlessApplicationResources retrieves all emrserverless.Application items from an AWS CloudFormation template
func (t *Template) GetAllEMRServerlessApplicationResources() map[string]*emrserverless.Application[any] {
	results := map[string]*emrserverless.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *emrserverless.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEMRServerlessApplicationWithName retrieves all emrserverless.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEMRServerlessApplicationWithName(name string) (*emrserverless.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *emrserverless.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type emrserverless.Application not found", name)
}

// GetAllElastiCacheCacheClusterResources retrieves all elasticache.CacheCluster items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheCacheClusterResources() map[string]*elasticache.CacheCluster[any] {
	results := map[string]*elasticache.CacheCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.CacheCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheCacheClusterWithName retrieves all elasticache.CacheCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheCacheClusterWithName(name string) (*elasticache.CacheCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.CacheCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.CacheCluster not found", name)
}

// GetAllElastiCacheGlobalReplicationGroupResources retrieves all elasticache.GlobalReplicationGroup items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheGlobalReplicationGroupResources() map[string]*elasticache.GlobalReplicationGroup[any] {
	results := map[string]*elasticache.GlobalReplicationGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.GlobalReplicationGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheGlobalReplicationGroupWithName retrieves all elasticache.GlobalReplicationGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheGlobalReplicationGroupWithName(name string) (*elasticache.GlobalReplicationGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.GlobalReplicationGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.GlobalReplicationGroup not found", name)
}

// GetAllElastiCacheParameterGroupResources retrieves all elasticache.ParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheParameterGroupResources() map[string]*elasticache.ParameterGroup[any] {
	results := map[string]*elasticache.ParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.ParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheParameterGroupWithName retrieves all elasticache.ParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheParameterGroupWithName(name string) (*elasticache.ParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.ParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.ParameterGroup not found", name)
}

// GetAllElastiCacheReplicationGroupResources retrieves all elasticache.ReplicationGroup items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheReplicationGroupResources() map[string]*elasticache.ReplicationGroup[any] {
	results := map[string]*elasticache.ReplicationGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.ReplicationGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheReplicationGroupWithName retrieves all elasticache.ReplicationGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheReplicationGroupWithName(name string) (*elasticache.ReplicationGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.ReplicationGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.ReplicationGroup not found", name)
}

// GetAllElastiCacheSecurityGroupResources retrieves all elasticache.SecurityGroup items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheSecurityGroupResources() map[string]*elasticache.SecurityGroup[any] {
	results := map[string]*elasticache.SecurityGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.SecurityGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheSecurityGroupWithName retrieves all elasticache.SecurityGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheSecurityGroupWithName(name string) (*elasticache.SecurityGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.SecurityGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.SecurityGroup not found", name)
}

// GetAllElastiCacheSecurityGroupIngressResources retrieves all elasticache.SecurityGroupIngress items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheSecurityGroupIngressResources() map[string]*elasticache.SecurityGroupIngress[any] {
	results := map[string]*elasticache.SecurityGroupIngress[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.SecurityGroupIngress[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheSecurityGroupIngressWithName retrieves all elasticache.SecurityGroupIngress items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheSecurityGroupIngressWithName(name string) (*elasticache.SecurityGroupIngress[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.SecurityGroupIngress[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.SecurityGroupIngress not found", name)
}

// GetAllElastiCacheSubnetGroupResources retrieves all elasticache.SubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheSubnetGroupResources() map[string]*elasticache.SubnetGroup[any] {
	results := map[string]*elasticache.SubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.SubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheSubnetGroupWithName retrieves all elasticache.SubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheSubnetGroupWithName(name string) (*elasticache.SubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.SubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.SubnetGroup not found", name)
}

// GetAllElastiCacheUserResources retrieves all elasticache.User items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheUserResources() map[string]*elasticache.User[any] {
	results := map[string]*elasticache.User[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.User[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheUserWithName retrieves all elasticache.User items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheUserWithName(name string) (*elasticache.User[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.User[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.User not found", name)
}

// GetAllElastiCacheUserGroupResources retrieves all elasticache.UserGroup items from an AWS CloudFormation template
func (t *Template) GetAllElastiCacheUserGroupResources() map[string]*elasticache.UserGroup[any] {
	results := map[string]*elasticache.UserGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticache.UserGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElastiCacheUserGroupWithName retrieves all elasticache.UserGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElastiCacheUserGroupWithName(name string) (*elasticache.UserGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticache.UserGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticache.UserGroup not found", name)
}

// GetAllElasticBeanstalkApplicationResources retrieves all elasticbeanstalk.Application items from an AWS CloudFormation template
func (t *Template) GetAllElasticBeanstalkApplicationResources() map[string]*elasticbeanstalk.Application[any] {
	results := map[string]*elasticbeanstalk.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticBeanstalkApplicationWithName retrieves all elasticbeanstalk.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticBeanstalkApplicationWithName(name string) (*elasticbeanstalk.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticbeanstalk.Application not found", name)
}

// GetAllElasticBeanstalkApplicationVersionResources retrieves all elasticbeanstalk.ApplicationVersion items from an AWS CloudFormation template
func (t *Template) GetAllElasticBeanstalkApplicationVersionResources() map[string]*elasticbeanstalk.ApplicationVersion[any] {
	results := map[string]*elasticbeanstalk.ApplicationVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.ApplicationVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticBeanstalkApplicationVersionWithName retrieves all elasticbeanstalk.ApplicationVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticBeanstalkApplicationVersionWithName(name string) (*elasticbeanstalk.ApplicationVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.ApplicationVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticbeanstalk.ApplicationVersion not found", name)
}

// GetAllElasticBeanstalkConfigurationTemplateResources retrieves all elasticbeanstalk.ConfigurationTemplate items from an AWS CloudFormation template
func (t *Template) GetAllElasticBeanstalkConfigurationTemplateResources() map[string]*elasticbeanstalk.ConfigurationTemplate[any] {
	results := map[string]*elasticbeanstalk.ConfigurationTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.ConfigurationTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticBeanstalkConfigurationTemplateWithName retrieves all elasticbeanstalk.ConfigurationTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticBeanstalkConfigurationTemplateWithName(name string) (*elasticbeanstalk.ConfigurationTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.ConfigurationTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticbeanstalk.ConfigurationTemplate not found", name)
}

// GetAllElasticBeanstalkEnvironmentResources retrieves all elasticbeanstalk.Environment items from an AWS CloudFormation template
func (t *Template) GetAllElasticBeanstalkEnvironmentResources() map[string]*elasticbeanstalk.Environment[any] {
	results := map[string]*elasticbeanstalk.Environment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.Environment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticBeanstalkEnvironmentWithName retrieves all elasticbeanstalk.Environment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticBeanstalkEnvironmentWithName(name string) (*elasticbeanstalk.Environment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticbeanstalk.Environment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticbeanstalk.Environment not found", name)
}

// GetAllElasticLoadBalancingLoadBalancerResources retrieves all elasticloadbalancing.LoadBalancer items from an AWS CloudFormation template
func (t *Template) GetAllElasticLoadBalancingLoadBalancerResources() map[string]*elasticloadbalancing.LoadBalancer[any] {
	results := map[string]*elasticloadbalancing.LoadBalancer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticloadbalancing.LoadBalancer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticLoadBalancingLoadBalancerWithName retrieves all elasticloadbalancing.LoadBalancer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticLoadBalancingLoadBalancerWithName(name string) (*elasticloadbalancing.LoadBalancer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticloadbalancing.LoadBalancer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticloadbalancing.LoadBalancer not found", name)
}

// GetAllElasticLoadBalancingV2ListenerResources retrieves all elasticloadbalancingv2.Listener items from an AWS CloudFormation template
func (t *Template) GetAllElasticLoadBalancingV2ListenerResources() map[string]*elasticloadbalancingv2.Listener[any] {
	results := map[string]*elasticloadbalancingv2.Listener[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.Listener[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticLoadBalancingV2ListenerWithName retrieves all elasticloadbalancingv2.Listener items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticLoadBalancingV2ListenerWithName(name string) (*elasticloadbalancingv2.Listener[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.Listener[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticloadbalancingv2.Listener not found", name)
}

// GetAllElasticLoadBalancingV2ListenerCertificateResources retrieves all elasticloadbalancingv2.ListenerCertificate items from an AWS CloudFormation template
func (t *Template) GetAllElasticLoadBalancingV2ListenerCertificateResources() map[string]*elasticloadbalancingv2.ListenerCertificate[any] {
	results := map[string]*elasticloadbalancingv2.ListenerCertificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.ListenerCertificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticLoadBalancingV2ListenerCertificateWithName retrieves all elasticloadbalancingv2.ListenerCertificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticLoadBalancingV2ListenerCertificateWithName(name string) (*elasticloadbalancingv2.ListenerCertificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.ListenerCertificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticloadbalancingv2.ListenerCertificate not found", name)
}

// GetAllElasticLoadBalancingV2ListenerRuleResources retrieves all elasticloadbalancingv2.ListenerRule items from an AWS CloudFormation template
func (t *Template) GetAllElasticLoadBalancingV2ListenerRuleResources() map[string]*elasticloadbalancingv2.ListenerRule[any] {
	results := map[string]*elasticloadbalancingv2.ListenerRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.ListenerRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticLoadBalancingV2ListenerRuleWithName retrieves all elasticloadbalancingv2.ListenerRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticLoadBalancingV2ListenerRuleWithName(name string) (*elasticloadbalancingv2.ListenerRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.ListenerRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticloadbalancingv2.ListenerRule not found", name)
}

// GetAllElasticLoadBalancingV2LoadBalancerResources retrieves all elasticloadbalancingv2.LoadBalancer items from an AWS CloudFormation template
func (t *Template) GetAllElasticLoadBalancingV2LoadBalancerResources() map[string]*elasticloadbalancingv2.LoadBalancer[any] {
	results := map[string]*elasticloadbalancingv2.LoadBalancer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.LoadBalancer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticLoadBalancingV2LoadBalancerWithName retrieves all elasticloadbalancingv2.LoadBalancer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticLoadBalancingV2LoadBalancerWithName(name string) (*elasticloadbalancingv2.LoadBalancer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.LoadBalancer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticloadbalancingv2.LoadBalancer not found", name)
}

// GetAllElasticLoadBalancingV2TargetGroupResources retrieves all elasticloadbalancingv2.TargetGroup items from an AWS CloudFormation template
func (t *Template) GetAllElasticLoadBalancingV2TargetGroupResources() map[string]*elasticloadbalancingv2.TargetGroup[any] {
	results := map[string]*elasticloadbalancingv2.TargetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.TargetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticLoadBalancingV2TargetGroupWithName retrieves all elasticloadbalancingv2.TargetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticLoadBalancingV2TargetGroupWithName(name string) (*elasticloadbalancingv2.TargetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticloadbalancingv2.TargetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticloadbalancingv2.TargetGroup not found", name)
}

// GetAllElasticsearchDomainResources retrieves all elasticsearch.Domain items from an AWS CloudFormation template
func (t *Template) GetAllElasticsearchDomainResources() map[string]*elasticsearch.Domain[any] {
	results := map[string]*elasticsearch.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *elasticsearch.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetElasticsearchDomainWithName retrieves all elasticsearch.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetElasticsearchDomainWithName(name string) (*elasticsearch.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *elasticsearch.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type elasticsearch.Domain not found", name)
}

// GetAllEventSchemasDiscovererResources retrieves all eventschemas.Discoverer items from an AWS CloudFormation template
func (t *Template) GetAllEventSchemasDiscovererResources() map[string]*eventschemas.Discoverer[any] {
	results := map[string]*eventschemas.Discoverer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eventschemas.Discoverer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventSchemasDiscovererWithName retrieves all eventschemas.Discoverer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventSchemasDiscovererWithName(name string) (*eventschemas.Discoverer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eventschemas.Discoverer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eventschemas.Discoverer not found", name)
}

// GetAllEventSchemasRegistryResources retrieves all eventschemas.Registry items from an AWS CloudFormation template
func (t *Template) GetAllEventSchemasRegistryResources() map[string]*eventschemas.Registry[any] {
	results := map[string]*eventschemas.Registry[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eventschemas.Registry[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventSchemasRegistryWithName retrieves all eventschemas.Registry items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventSchemasRegistryWithName(name string) (*eventschemas.Registry[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eventschemas.Registry[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eventschemas.Registry not found", name)
}

// GetAllEventSchemasRegistryPolicyResources retrieves all eventschemas.RegistryPolicy items from an AWS CloudFormation template
func (t *Template) GetAllEventSchemasRegistryPolicyResources() map[string]*eventschemas.RegistryPolicy[any] {
	results := map[string]*eventschemas.RegistryPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eventschemas.RegistryPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventSchemasRegistryPolicyWithName retrieves all eventschemas.RegistryPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventSchemasRegistryPolicyWithName(name string) (*eventschemas.RegistryPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eventschemas.RegistryPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eventschemas.RegistryPolicy not found", name)
}

// GetAllEventSchemasSchemaResources retrieves all eventschemas.Schema items from an AWS CloudFormation template
func (t *Template) GetAllEventSchemasSchemaResources() map[string]*eventschemas.Schema[any] {
	results := map[string]*eventschemas.Schema[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *eventschemas.Schema[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventSchemasSchemaWithName retrieves all eventschemas.Schema items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventSchemasSchemaWithName(name string) (*eventschemas.Schema[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *eventschemas.Schema[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type eventschemas.Schema not found", name)
}

// GetAllEventsApiDestinationResources retrieves all events.ApiDestination items from an AWS CloudFormation template
func (t *Template) GetAllEventsApiDestinationResources() map[string]*events.ApiDestination[any] {
	results := map[string]*events.ApiDestination[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.ApiDestination[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsApiDestinationWithName retrieves all events.ApiDestination items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsApiDestinationWithName(name string) (*events.ApiDestination[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.ApiDestination[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.ApiDestination not found", name)
}

// GetAllEventsArchiveResources retrieves all events.Archive items from an AWS CloudFormation template
func (t *Template) GetAllEventsArchiveResources() map[string]*events.Archive[any] {
	results := map[string]*events.Archive[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.Archive[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsArchiveWithName retrieves all events.Archive items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsArchiveWithName(name string) (*events.Archive[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.Archive[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.Archive not found", name)
}

// GetAllEventsConnectionResources retrieves all events.Connection items from an AWS CloudFormation template
func (t *Template) GetAllEventsConnectionResources() map[string]*events.Connection[any] {
	results := map[string]*events.Connection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.Connection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsConnectionWithName retrieves all events.Connection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsConnectionWithName(name string) (*events.Connection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.Connection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.Connection not found", name)
}

// GetAllEventsEndpointResources retrieves all events.Endpoint items from an AWS CloudFormation template
func (t *Template) GetAllEventsEndpointResources() map[string]*events.Endpoint[any] {
	results := map[string]*events.Endpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.Endpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsEndpointWithName retrieves all events.Endpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsEndpointWithName(name string) (*events.Endpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.Endpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.Endpoint not found", name)
}

// GetAllEventsEventBusResources retrieves all events.EventBus items from an AWS CloudFormation template
func (t *Template) GetAllEventsEventBusResources() map[string]*events.EventBus[any] {
	results := map[string]*events.EventBus[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.EventBus[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsEventBusWithName retrieves all events.EventBus items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsEventBusWithName(name string) (*events.EventBus[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.EventBus[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.EventBus not found", name)
}

// GetAllEventsEventBusPolicyResources retrieves all events.EventBusPolicy items from an AWS CloudFormation template
func (t *Template) GetAllEventsEventBusPolicyResources() map[string]*events.EventBusPolicy[any] {
	results := map[string]*events.EventBusPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.EventBusPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsEventBusPolicyWithName retrieves all events.EventBusPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsEventBusPolicyWithName(name string) (*events.EventBusPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.EventBusPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.EventBusPolicy not found", name)
}

// GetAllEventsRuleResources retrieves all events.Rule items from an AWS CloudFormation template
func (t *Template) GetAllEventsRuleResources() map[string]*events.Rule[any] {
	results := map[string]*events.Rule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *events.Rule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEventsRuleWithName retrieves all events.Rule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEventsRuleWithName(name string) (*events.Rule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *events.Rule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type events.Rule not found", name)
}

// GetAllEvidentlyExperimentResources retrieves all evidently.Experiment items from an AWS CloudFormation template
func (t *Template) GetAllEvidentlyExperimentResources() map[string]*evidently.Experiment[any] {
	results := map[string]*evidently.Experiment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *evidently.Experiment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEvidentlyExperimentWithName retrieves all evidently.Experiment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEvidentlyExperimentWithName(name string) (*evidently.Experiment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *evidently.Experiment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type evidently.Experiment not found", name)
}

// GetAllEvidentlyFeatureResources retrieves all evidently.Feature items from an AWS CloudFormation template
func (t *Template) GetAllEvidentlyFeatureResources() map[string]*evidently.Feature[any] {
	results := map[string]*evidently.Feature[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *evidently.Feature[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEvidentlyFeatureWithName retrieves all evidently.Feature items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEvidentlyFeatureWithName(name string) (*evidently.Feature[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *evidently.Feature[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type evidently.Feature not found", name)
}

// GetAllEvidentlyLaunchResources retrieves all evidently.Launch items from an AWS CloudFormation template
func (t *Template) GetAllEvidentlyLaunchResources() map[string]*evidently.Launch[any] {
	results := map[string]*evidently.Launch[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *evidently.Launch[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEvidentlyLaunchWithName retrieves all evidently.Launch items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEvidentlyLaunchWithName(name string) (*evidently.Launch[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *evidently.Launch[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type evidently.Launch not found", name)
}

// GetAllEvidentlyProjectResources retrieves all evidently.Project items from an AWS CloudFormation template
func (t *Template) GetAllEvidentlyProjectResources() map[string]*evidently.Project[any] {
	results := map[string]*evidently.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *evidently.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEvidentlyProjectWithName retrieves all evidently.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEvidentlyProjectWithName(name string) (*evidently.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *evidently.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type evidently.Project not found", name)
}

// GetAllEvidentlySegmentResources retrieves all evidently.Segment items from an AWS CloudFormation template
func (t *Template) GetAllEvidentlySegmentResources() map[string]*evidently.Segment[any] {
	results := map[string]*evidently.Segment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *evidently.Segment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetEvidentlySegmentWithName retrieves all evidently.Segment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetEvidentlySegmentWithName(name string) (*evidently.Segment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *evidently.Segment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type evidently.Segment not found", name)
}

// GetAllFISExperimentTemplateResources retrieves all fis.ExperimentTemplate items from an AWS CloudFormation template
func (t *Template) GetAllFISExperimentTemplateResources() map[string]*fis.ExperimentTemplate[any] {
	results := map[string]*fis.ExperimentTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fis.ExperimentTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFISExperimentTemplateWithName retrieves all fis.ExperimentTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFISExperimentTemplateWithName(name string) (*fis.ExperimentTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fis.ExperimentTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fis.ExperimentTemplate not found", name)
}

// GetAllFMSNotificationChannelResources retrieves all fms.NotificationChannel items from an AWS CloudFormation template
func (t *Template) GetAllFMSNotificationChannelResources() map[string]*fms.NotificationChannel[any] {
	results := map[string]*fms.NotificationChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fms.NotificationChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFMSNotificationChannelWithName retrieves all fms.NotificationChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFMSNotificationChannelWithName(name string) (*fms.NotificationChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fms.NotificationChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fms.NotificationChannel not found", name)
}

// GetAllFMSPolicyResources retrieves all fms.Policy items from an AWS CloudFormation template
func (t *Template) GetAllFMSPolicyResources() map[string]*fms.Policy[any] {
	results := map[string]*fms.Policy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fms.Policy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFMSPolicyWithName retrieves all fms.Policy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFMSPolicyWithName(name string) (*fms.Policy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fms.Policy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fms.Policy not found", name)
}

// GetAllFMSResourceSetResources retrieves all fms.ResourceSet items from an AWS CloudFormation template
func (t *Template) GetAllFMSResourceSetResources() map[string]*fms.ResourceSet[any] {
	results := map[string]*fms.ResourceSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fms.ResourceSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFMSResourceSetWithName retrieves all fms.ResourceSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFMSResourceSetWithName(name string) (*fms.ResourceSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fms.ResourceSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fms.ResourceSet not found", name)
}

// GetAllFSxDataRepositoryAssociationResources retrieves all fsx.DataRepositoryAssociation items from an AWS CloudFormation template
func (t *Template) GetAllFSxDataRepositoryAssociationResources() map[string]*fsx.DataRepositoryAssociation[any] {
	results := map[string]*fsx.DataRepositoryAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fsx.DataRepositoryAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFSxDataRepositoryAssociationWithName retrieves all fsx.DataRepositoryAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFSxDataRepositoryAssociationWithName(name string) (*fsx.DataRepositoryAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fsx.DataRepositoryAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fsx.DataRepositoryAssociation not found", name)
}

// GetAllFSxFileSystemResources retrieves all fsx.FileSystem items from an AWS CloudFormation template
func (t *Template) GetAllFSxFileSystemResources() map[string]*fsx.FileSystem[any] {
	results := map[string]*fsx.FileSystem[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fsx.FileSystem[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFSxFileSystemWithName retrieves all fsx.FileSystem items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFSxFileSystemWithName(name string) (*fsx.FileSystem[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fsx.FileSystem[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fsx.FileSystem not found", name)
}

// GetAllFSxSnapshotResources retrieves all fsx.Snapshot items from an AWS CloudFormation template
func (t *Template) GetAllFSxSnapshotResources() map[string]*fsx.Snapshot[any] {
	results := map[string]*fsx.Snapshot[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fsx.Snapshot[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFSxSnapshotWithName retrieves all fsx.Snapshot items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFSxSnapshotWithName(name string) (*fsx.Snapshot[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fsx.Snapshot[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fsx.Snapshot not found", name)
}

// GetAllFSxStorageVirtualMachineResources retrieves all fsx.StorageVirtualMachine items from an AWS CloudFormation template
func (t *Template) GetAllFSxStorageVirtualMachineResources() map[string]*fsx.StorageVirtualMachine[any] {
	results := map[string]*fsx.StorageVirtualMachine[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fsx.StorageVirtualMachine[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFSxStorageVirtualMachineWithName retrieves all fsx.StorageVirtualMachine items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFSxStorageVirtualMachineWithName(name string) (*fsx.StorageVirtualMachine[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fsx.StorageVirtualMachine[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fsx.StorageVirtualMachine not found", name)
}

// GetAllFSxVolumeResources retrieves all fsx.Volume items from an AWS CloudFormation template
func (t *Template) GetAllFSxVolumeResources() map[string]*fsx.Volume[any] {
	results := map[string]*fsx.Volume[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *fsx.Volume[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFSxVolumeWithName retrieves all fsx.Volume items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFSxVolumeWithName(name string) (*fsx.Volume[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *fsx.Volume[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type fsx.Volume not found", name)
}

// GetAllFinSpaceEnvironmentResources retrieves all finspace.Environment items from an AWS CloudFormation template
func (t *Template) GetAllFinSpaceEnvironmentResources() map[string]*finspace.Environment[any] {
	results := map[string]*finspace.Environment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *finspace.Environment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFinSpaceEnvironmentWithName retrieves all finspace.Environment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFinSpaceEnvironmentWithName(name string) (*finspace.Environment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *finspace.Environment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type finspace.Environment not found", name)
}

// GetAllForecastDatasetResources retrieves all forecast.Dataset items from an AWS CloudFormation template
func (t *Template) GetAllForecastDatasetResources() map[string]*forecast.Dataset[any] {
	results := map[string]*forecast.Dataset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *forecast.Dataset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetForecastDatasetWithName retrieves all forecast.Dataset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetForecastDatasetWithName(name string) (*forecast.Dataset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *forecast.Dataset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type forecast.Dataset not found", name)
}

// GetAllForecastDatasetGroupResources retrieves all forecast.DatasetGroup items from an AWS CloudFormation template
func (t *Template) GetAllForecastDatasetGroupResources() map[string]*forecast.DatasetGroup[any] {
	results := map[string]*forecast.DatasetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *forecast.DatasetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetForecastDatasetGroupWithName retrieves all forecast.DatasetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetForecastDatasetGroupWithName(name string) (*forecast.DatasetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *forecast.DatasetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type forecast.DatasetGroup not found", name)
}

// GetAllFraudDetectorDetectorResources retrieves all frauddetector.Detector items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorDetectorResources() map[string]*frauddetector.Detector[any] {
	results := map[string]*frauddetector.Detector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.Detector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorDetectorWithName retrieves all frauddetector.Detector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorDetectorWithName(name string) (*frauddetector.Detector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.Detector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.Detector not found", name)
}

// GetAllFraudDetectorEntityTypeResources retrieves all frauddetector.EntityType items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorEntityTypeResources() map[string]*frauddetector.EntityType[any] {
	results := map[string]*frauddetector.EntityType[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.EntityType[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorEntityTypeWithName retrieves all frauddetector.EntityType items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorEntityTypeWithName(name string) (*frauddetector.EntityType[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.EntityType[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.EntityType not found", name)
}

// GetAllFraudDetectorEventTypeResources retrieves all frauddetector.EventType items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorEventTypeResources() map[string]*frauddetector.EventType[any] {
	results := map[string]*frauddetector.EventType[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.EventType[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorEventTypeWithName retrieves all frauddetector.EventType items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorEventTypeWithName(name string) (*frauddetector.EventType[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.EventType[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.EventType not found", name)
}

// GetAllFraudDetectorLabelResources retrieves all frauddetector.Label items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorLabelResources() map[string]*frauddetector.Label[any] {
	results := map[string]*frauddetector.Label[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.Label[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorLabelWithName retrieves all frauddetector.Label items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorLabelWithName(name string) (*frauddetector.Label[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.Label[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.Label not found", name)
}

// GetAllFraudDetectorListResources retrieves all frauddetector.List items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorListResources() map[string]*frauddetector.List[any] {
	results := map[string]*frauddetector.List[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.List[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorListWithName retrieves all frauddetector.List items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorListWithName(name string) (*frauddetector.List[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.List[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.List not found", name)
}

// GetAllFraudDetectorOutcomeResources retrieves all frauddetector.Outcome items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorOutcomeResources() map[string]*frauddetector.Outcome[any] {
	results := map[string]*frauddetector.Outcome[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.Outcome[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorOutcomeWithName retrieves all frauddetector.Outcome items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorOutcomeWithName(name string) (*frauddetector.Outcome[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.Outcome[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.Outcome not found", name)
}

// GetAllFraudDetectorVariableResources retrieves all frauddetector.Variable items from an AWS CloudFormation template
func (t *Template) GetAllFraudDetectorVariableResources() map[string]*frauddetector.Variable[any] {
	results := map[string]*frauddetector.Variable[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *frauddetector.Variable[any]:
			results[name] = resource
		}
	}
	return results
}

// GetFraudDetectorVariableWithName retrieves all frauddetector.Variable items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetFraudDetectorVariableWithName(name string) (*frauddetector.Variable[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *frauddetector.Variable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type frauddetector.Variable not found", name)
}

// GetAllGameLiftAliasResources retrieves all gamelift.Alias items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftAliasResources() map[string]*gamelift.Alias[any] {
	results := map[string]*gamelift.Alias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.Alias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftAliasWithName retrieves all gamelift.Alias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftAliasWithName(name string) (*gamelift.Alias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.Alias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.Alias not found", name)
}

// GetAllGameLiftBuildResources retrieves all gamelift.Build items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftBuildResources() map[string]*gamelift.Build[any] {
	results := map[string]*gamelift.Build[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.Build[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftBuildWithName retrieves all gamelift.Build items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftBuildWithName(name string) (*gamelift.Build[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.Build[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.Build not found", name)
}

// GetAllGameLiftFleetResources retrieves all gamelift.Fleet items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftFleetResources() map[string]*gamelift.Fleet[any] {
	results := map[string]*gamelift.Fleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.Fleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftFleetWithName retrieves all gamelift.Fleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftFleetWithName(name string) (*gamelift.Fleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.Fleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.Fleet not found", name)
}

// GetAllGameLiftGameServerGroupResources retrieves all gamelift.GameServerGroup items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftGameServerGroupResources() map[string]*gamelift.GameServerGroup[any] {
	results := map[string]*gamelift.GameServerGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.GameServerGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftGameServerGroupWithName retrieves all gamelift.GameServerGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftGameServerGroupWithName(name string) (*gamelift.GameServerGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.GameServerGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.GameServerGroup not found", name)
}

// GetAllGameLiftGameSessionQueueResources retrieves all gamelift.GameSessionQueue items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftGameSessionQueueResources() map[string]*gamelift.GameSessionQueue[any] {
	results := map[string]*gamelift.GameSessionQueue[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.GameSessionQueue[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftGameSessionQueueWithName retrieves all gamelift.GameSessionQueue items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftGameSessionQueueWithName(name string) (*gamelift.GameSessionQueue[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.GameSessionQueue[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.GameSessionQueue not found", name)
}

// GetAllGameLiftLocationResources retrieves all gamelift.Location items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftLocationResources() map[string]*gamelift.Location[any] {
	results := map[string]*gamelift.Location[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.Location[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftLocationWithName retrieves all gamelift.Location items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftLocationWithName(name string) (*gamelift.Location[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.Location[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.Location not found", name)
}

// GetAllGameLiftMatchmakingConfigurationResources retrieves all gamelift.MatchmakingConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftMatchmakingConfigurationResources() map[string]*gamelift.MatchmakingConfiguration[any] {
	results := map[string]*gamelift.MatchmakingConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.MatchmakingConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftMatchmakingConfigurationWithName retrieves all gamelift.MatchmakingConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftMatchmakingConfigurationWithName(name string) (*gamelift.MatchmakingConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.MatchmakingConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.MatchmakingConfiguration not found", name)
}

// GetAllGameLiftMatchmakingRuleSetResources retrieves all gamelift.MatchmakingRuleSet items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftMatchmakingRuleSetResources() map[string]*gamelift.MatchmakingRuleSet[any] {
	results := map[string]*gamelift.MatchmakingRuleSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.MatchmakingRuleSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftMatchmakingRuleSetWithName retrieves all gamelift.MatchmakingRuleSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftMatchmakingRuleSetWithName(name string) (*gamelift.MatchmakingRuleSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.MatchmakingRuleSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.MatchmakingRuleSet not found", name)
}

// GetAllGameLiftScriptResources retrieves all gamelift.Script items from an AWS CloudFormation template
func (t *Template) GetAllGameLiftScriptResources() map[string]*gamelift.Script[any] {
	results := map[string]*gamelift.Script[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *gamelift.Script[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGameLiftScriptWithName retrieves all gamelift.Script items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGameLiftScriptWithName(name string) (*gamelift.Script[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *gamelift.Script[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type gamelift.Script not found", name)
}

// GetAllGlobalAcceleratorAcceleratorResources retrieves all globalaccelerator.Accelerator items from an AWS CloudFormation template
func (t *Template) GetAllGlobalAcceleratorAcceleratorResources() map[string]*globalaccelerator.Accelerator[any] {
	results := map[string]*globalaccelerator.Accelerator[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *globalaccelerator.Accelerator[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlobalAcceleratorAcceleratorWithName retrieves all globalaccelerator.Accelerator items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlobalAcceleratorAcceleratorWithName(name string) (*globalaccelerator.Accelerator[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *globalaccelerator.Accelerator[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type globalaccelerator.Accelerator not found", name)
}

// GetAllGlobalAcceleratorEndpointGroupResources retrieves all globalaccelerator.EndpointGroup items from an AWS CloudFormation template
func (t *Template) GetAllGlobalAcceleratorEndpointGroupResources() map[string]*globalaccelerator.EndpointGroup[any] {
	results := map[string]*globalaccelerator.EndpointGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *globalaccelerator.EndpointGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlobalAcceleratorEndpointGroupWithName retrieves all globalaccelerator.EndpointGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlobalAcceleratorEndpointGroupWithName(name string) (*globalaccelerator.EndpointGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *globalaccelerator.EndpointGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type globalaccelerator.EndpointGroup not found", name)
}

// GetAllGlobalAcceleratorListenerResources retrieves all globalaccelerator.Listener items from an AWS CloudFormation template
func (t *Template) GetAllGlobalAcceleratorListenerResources() map[string]*globalaccelerator.Listener[any] {
	results := map[string]*globalaccelerator.Listener[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *globalaccelerator.Listener[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlobalAcceleratorListenerWithName retrieves all globalaccelerator.Listener items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlobalAcceleratorListenerWithName(name string) (*globalaccelerator.Listener[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *globalaccelerator.Listener[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type globalaccelerator.Listener not found", name)
}

// GetAllGlueClassifierResources retrieves all glue.Classifier items from an AWS CloudFormation template
func (t *Template) GetAllGlueClassifierResources() map[string]*glue.Classifier[any] {
	results := map[string]*glue.Classifier[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Classifier[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueClassifierWithName retrieves all glue.Classifier items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueClassifierWithName(name string) (*glue.Classifier[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Classifier[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Classifier not found", name)
}

// GetAllGlueConnectionResources retrieves all glue.Connection items from an AWS CloudFormation template
func (t *Template) GetAllGlueConnectionResources() map[string]*glue.Connection[any] {
	results := map[string]*glue.Connection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Connection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueConnectionWithName retrieves all glue.Connection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueConnectionWithName(name string) (*glue.Connection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Connection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Connection not found", name)
}

// GetAllGlueCrawlerResources retrieves all glue.Crawler items from an AWS CloudFormation template
func (t *Template) GetAllGlueCrawlerResources() map[string]*glue.Crawler[any] {
	results := map[string]*glue.Crawler[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Crawler[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueCrawlerWithName retrieves all glue.Crawler items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueCrawlerWithName(name string) (*glue.Crawler[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Crawler[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Crawler not found", name)
}

// GetAllGlueDataCatalogEncryptionSettingsResources retrieves all glue.DataCatalogEncryptionSettings items from an AWS CloudFormation template
func (t *Template) GetAllGlueDataCatalogEncryptionSettingsResources() map[string]*glue.DataCatalogEncryptionSettings[any] {
	results := map[string]*glue.DataCatalogEncryptionSettings[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.DataCatalogEncryptionSettings[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueDataCatalogEncryptionSettingsWithName retrieves all glue.DataCatalogEncryptionSettings items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueDataCatalogEncryptionSettingsWithName(name string) (*glue.DataCatalogEncryptionSettings[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.DataCatalogEncryptionSettings[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.DataCatalogEncryptionSettings not found", name)
}

// GetAllGlueDatabaseResources retrieves all glue.Database items from an AWS CloudFormation template
func (t *Template) GetAllGlueDatabaseResources() map[string]*glue.Database[any] {
	results := map[string]*glue.Database[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Database[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueDatabaseWithName retrieves all glue.Database items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueDatabaseWithName(name string) (*glue.Database[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Database[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Database not found", name)
}

// GetAllGlueDevEndpointResources retrieves all glue.DevEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllGlueDevEndpointResources() map[string]*glue.DevEndpoint[any] {
	results := map[string]*glue.DevEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.DevEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueDevEndpointWithName retrieves all glue.DevEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueDevEndpointWithName(name string) (*glue.DevEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.DevEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.DevEndpoint not found", name)
}

// GetAllGlueJobResources retrieves all glue.Job items from an AWS CloudFormation template
func (t *Template) GetAllGlueJobResources() map[string]*glue.Job[any] {
	results := map[string]*glue.Job[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Job[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueJobWithName retrieves all glue.Job items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueJobWithName(name string) (*glue.Job[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Job[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Job not found", name)
}

// GetAllGlueMLTransformResources retrieves all glue.MLTransform items from an AWS CloudFormation template
func (t *Template) GetAllGlueMLTransformResources() map[string]*glue.MLTransform[any] {
	results := map[string]*glue.MLTransform[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.MLTransform[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueMLTransformWithName retrieves all glue.MLTransform items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueMLTransformWithName(name string) (*glue.MLTransform[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.MLTransform[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.MLTransform not found", name)
}

// GetAllGluePartitionResources retrieves all glue.Partition items from an AWS CloudFormation template
func (t *Template) GetAllGluePartitionResources() map[string]*glue.Partition[any] {
	results := map[string]*glue.Partition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Partition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGluePartitionWithName retrieves all glue.Partition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGluePartitionWithName(name string) (*glue.Partition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Partition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Partition not found", name)
}

// GetAllGlueRegistryResources retrieves all glue.Registry items from an AWS CloudFormation template
func (t *Template) GetAllGlueRegistryResources() map[string]*glue.Registry[any] {
	results := map[string]*glue.Registry[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Registry[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueRegistryWithName retrieves all glue.Registry items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueRegistryWithName(name string) (*glue.Registry[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Registry[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Registry not found", name)
}

// GetAllGlueSchemaResources retrieves all glue.Schema items from an AWS CloudFormation template
func (t *Template) GetAllGlueSchemaResources() map[string]*glue.Schema[any] {
	results := map[string]*glue.Schema[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Schema[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueSchemaWithName retrieves all glue.Schema items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueSchemaWithName(name string) (*glue.Schema[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Schema[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Schema not found", name)
}

// GetAllGlueSchemaVersionResources retrieves all glue.SchemaVersion items from an AWS CloudFormation template
func (t *Template) GetAllGlueSchemaVersionResources() map[string]*glue.SchemaVersion[any] {
	results := map[string]*glue.SchemaVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.SchemaVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueSchemaVersionWithName retrieves all glue.SchemaVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueSchemaVersionWithName(name string) (*glue.SchemaVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.SchemaVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.SchemaVersion not found", name)
}

// GetAllGlueSchemaVersionMetadataResources retrieves all glue.SchemaVersionMetadata items from an AWS CloudFormation template
func (t *Template) GetAllGlueSchemaVersionMetadataResources() map[string]*glue.SchemaVersionMetadata[any] {
	results := map[string]*glue.SchemaVersionMetadata[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.SchemaVersionMetadata[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueSchemaVersionMetadataWithName retrieves all glue.SchemaVersionMetadata items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueSchemaVersionMetadataWithName(name string) (*glue.SchemaVersionMetadata[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.SchemaVersionMetadata[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.SchemaVersionMetadata not found", name)
}

// GetAllGlueSecurityConfigurationResources retrieves all glue.SecurityConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllGlueSecurityConfigurationResources() map[string]*glue.SecurityConfiguration[any] {
	results := map[string]*glue.SecurityConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.SecurityConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueSecurityConfigurationWithName retrieves all glue.SecurityConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueSecurityConfigurationWithName(name string) (*glue.SecurityConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.SecurityConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.SecurityConfiguration not found", name)
}

// GetAllGlueTableResources retrieves all glue.Table items from an AWS CloudFormation template
func (t *Template) GetAllGlueTableResources() map[string]*glue.Table[any] {
	results := map[string]*glue.Table[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Table[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueTableWithName retrieves all glue.Table items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueTableWithName(name string) (*glue.Table[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Table[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Table not found", name)
}

// GetAllGlueTriggerResources retrieves all glue.Trigger items from an AWS CloudFormation template
func (t *Template) GetAllGlueTriggerResources() map[string]*glue.Trigger[any] {
	results := map[string]*glue.Trigger[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Trigger[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueTriggerWithName retrieves all glue.Trigger items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueTriggerWithName(name string) (*glue.Trigger[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Trigger[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Trigger not found", name)
}

// GetAllGlueWorkflowResources retrieves all glue.Workflow items from an AWS CloudFormation template
func (t *Template) GetAllGlueWorkflowResources() map[string]*glue.Workflow[any] {
	results := map[string]*glue.Workflow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *glue.Workflow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGlueWorkflowWithName retrieves all glue.Workflow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGlueWorkflowWithName(name string) (*glue.Workflow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *glue.Workflow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type glue.Workflow not found", name)
}

// GetAllGrafanaWorkspaceResources retrieves all grafana.Workspace items from an AWS CloudFormation template
func (t *Template) GetAllGrafanaWorkspaceResources() map[string]*grafana.Workspace[any] {
	results := map[string]*grafana.Workspace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *grafana.Workspace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGrafanaWorkspaceWithName retrieves all grafana.Workspace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGrafanaWorkspaceWithName(name string) (*grafana.Workspace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *grafana.Workspace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type grafana.Workspace not found", name)
}

// GetAllGreengrassConnectorDefinitionResources retrieves all greengrass.ConnectorDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassConnectorDefinitionResources() map[string]*greengrass.ConnectorDefinition[any] {
	results := map[string]*greengrass.ConnectorDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.ConnectorDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassConnectorDefinitionWithName retrieves all greengrass.ConnectorDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassConnectorDefinitionWithName(name string) (*greengrass.ConnectorDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.ConnectorDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.ConnectorDefinition not found", name)
}

// GetAllGreengrassConnectorDefinitionVersionResources retrieves all greengrass.ConnectorDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassConnectorDefinitionVersionResources() map[string]*greengrass.ConnectorDefinitionVersion[any] {
	results := map[string]*greengrass.ConnectorDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.ConnectorDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassConnectorDefinitionVersionWithName retrieves all greengrass.ConnectorDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassConnectorDefinitionVersionWithName(name string) (*greengrass.ConnectorDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.ConnectorDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.ConnectorDefinitionVersion not found", name)
}

// GetAllGreengrassCoreDefinitionResources retrieves all greengrass.CoreDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassCoreDefinitionResources() map[string]*greengrass.CoreDefinition[any] {
	results := map[string]*greengrass.CoreDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.CoreDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassCoreDefinitionWithName retrieves all greengrass.CoreDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassCoreDefinitionWithName(name string) (*greengrass.CoreDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.CoreDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.CoreDefinition not found", name)
}

// GetAllGreengrassCoreDefinitionVersionResources retrieves all greengrass.CoreDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassCoreDefinitionVersionResources() map[string]*greengrass.CoreDefinitionVersion[any] {
	results := map[string]*greengrass.CoreDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.CoreDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassCoreDefinitionVersionWithName retrieves all greengrass.CoreDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassCoreDefinitionVersionWithName(name string) (*greengrass.CoreDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.CoreDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.CoreDefinitionVersion not found", name)
}

// GetAllGreengrassDeviceDefinitionResources retrieves all greengrass.DeviceDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassDeviceDefinitionResources() map[string]*greengrass.DeviceDefinition[any] {
	results := map[string]*greengrass.DeviceDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.DeviceDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassDeviceDefinitionWithName retrieves all greengrass.DeviceDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassDeviceDefinitionWithName(name string) (*greengrass.DeviceDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.DeviceDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.DeviceDefinition not found", name)
}

// GetAllGreengrassDeviceDefinitionVersionResources retrieves all greengrass.DeviceDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassDeviceDefinitionVersionResources() map[string]*greengrass.DeviceDefinitionVersion[any] {
	results := map[string]*greengrass.DeviceDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.DeviceDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassDeviceDefinitionVersionWithName retrieves all greengrass.DeviceDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassDeviceDefinitionVersionWithName(name string) (*greengrass.DeviceDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.DeviceDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.DeviceDefinitionVersion not found", name)
}

// GetAllGreengrassFunctionDefinitionResources retrieves all greengrass.FunctionDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassFunctionDefinitionResources() map[string]*greengrass.FunctionDefinition[any] {
	results := map[string]*greengrass.FunctionDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.FunctionDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassFunctionDefinitionWithName retrieves all greengrass.FunctionDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassFunctionDefinitionWithName(name string) (*greengrass.FunctionDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.FunctionDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.FunctionDefinition not found", name)
}

// GetAllGreengrassFunctionDefinitionVersionResources retrieves all greengrass.FunctionDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassFunctionDefinitionVersionResources() map[string]*greengrass.FunctionDefinitionVersion[any] {
	results := map[string]*greengrass.FunctionDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.FunctionDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassFunctionDefinitionVersionWithName retrieves all greengrass.FunctionDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassFunctionDefinitionVersionWithName(name string) (*greengrass.FunctionDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.FunctionDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.FunctionDefinitionVersion not found", name)
}

// GetAllGreengrassGroupResources retrieves all greengrass.Group items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassGroupResources() map[string]*greengrass.Group[any] {
	results := map[string]*greengrass.Group[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.Group[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassGroupWithName retrieves all greengrass.Group items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassGroupWithName(name string) (*greengrass.Group[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.Group[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.Group not found", name)
}

// GetAllGreengrassGroupVersionResources retrieves all greengrass.GroupVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassGroupVersionResources() map[string]*greengrass.GroupVersion[any] {
	results := map[string]*greengrass.GroupVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.GroupVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassGroupVersionWithName retrieves all greengrass.GroupVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassGroupVersionWithName(name string) (*greengrass.GroupVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.GroupVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.GroupVersion not found", name)
}

// GetAllGreengrassLoggerDefinitionResources retrieves all greengrass.LoggerDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassLoggerDefinitionResources() map[string]*greengrass.LoggerDefinition[any] {
	results := map[string]*greengrass.LoggerDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.LoggerDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassLoggerDefinitionWithName retrieves all greengrass.LoggerDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassLoggerDefinitionWithName(name string) (*greengrass.LoggerDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.LoggerDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.LoggerDefinition not found", name)
}

// GetAllGreengrassLoggerDefinitionVersionResources retrieves all greengrass.LoggerDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassLoggerDefinitionVersionResources() map[string]*greengrass.LoggerDefinitionVersion[any] {
	results := map[string]*greengrass.LoggerDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.LoggerDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassLoggerDefinitionVersionWithName retrieves all greengrass.LoggerDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassLoggerDefinitionVersionWithName(name string) (*greengrass.LoggerDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.LoggerDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.LoggerDefinitionVersion not found", name)
}

// GetAllGreengrassResourceDefinitionResources retrieves all greengrass.ResourceDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassResourceDefinitionResources() map[string]*greengrass.ResourceDefinition[any] {
	results := map[string]*greengrass.ResourceDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.ResourceDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassResourceDefinitionWithName retrieves all greengrass.ResourceDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassResourceDefinitionWithName(name string) (*greengrass.ResourceDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.ResourceDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.ResourceDefinition not found", name)
}

// GetAllGreengrassResourceDefinitionVersionResources retrieves all greengrass.ResourceDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassResourceDefinitionVersionResources() map[string]*greengrass.ResourceDefinitionVersion[any] {
	results := map[string]*greengrass.ResourceDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.ResourceDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassResourceDefinitionVersionWithName retrieves all greengrass.ResourceDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassResourceDefinitionVersionWithName(name string) (*greengrass.ResourceDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.ResourceDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.ResourceDefinitionVersion not found", name)
}

// GetAllGreengrassSubscriptionDefinitionResources retrieves all greengrass.SubscriptionDefinition items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassSubscriptionDefinitionResources() map[string]*greengrass.SubscriptionDefinition[any] {
	results := map[string]*greengrass.SubscriptionDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.SubscriptionDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassSubscriptionDefinitionWithName retrieves all greengrass.SubscriptionDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassSubscriptionDefinitionWithName(name string) (*greengrass.SubscriptionDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.SubscriptionDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.SubscriptionDefinition not found", name)
}

// GetAllGreengrassSubscriptionDefinitionVersionResources retrieves all greengrass.SubscriptionDefinitionVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassSubscriptionDefinitionVersionResources() map[string]*greengrass.SubscriptionDefinitionVersion[any] {
	results := map[string]*greengrass.SubscriptionDefinitionVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrass.SubscriptionDefinitionVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassSubscriptionDefinitionVersionWithName retrieves all greengrass.SubscriptionDefinitionVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassSubscriptionDefinitionVersionWithName(name string) (*greengrass.SubscriptionDefinitionVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrass.SubscriptionDefinitionVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrass.SubscriptionDefinitionVersion not found", name)
}

// GetAllGreengrassV2ComponentVersionResources retrieves all greengrassv2.ComponentVersion items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassV2ComponentVersionResources() map[string]*greengrassv2.ComponentVersion[any] {
	results := map[string]*greengrassv2.ComponentVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrassv2.ComponentVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassV2ComponentVersionWithName retrieves all greengrassv2.ComponentVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassV2ComponentVersionWithName(name string) (*greengrassv2.ComponentVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrassv2.ComponentVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrassv2.ComponentVersion not found", name)
}

// GetAllGreengrassV2DeploymentResources retrieves all greengrassv2.Deployment items from an AWS CloudFormation template
func (t *Template) GetAllGreengrassV2DeploymentResources() map[string]*greengrassv2.Deployment[any] {
	results := map[string]*greengrassv2.Deployment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *greengrassv2.Deployment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGreengrassV2DeploymentWithName retrieves all greengrassv2.Deployment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGreengrassV2DeploymentWithName(name string) (*greengrassv2.Deployment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *greengrassv2.Deployment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type greengrassv2.Deployment not found", name)
}

// GetAllGroundStationConfigResources retrieves all groundstation.Config items from an AWS CloudFormation template
func (t *Template) GetAllGroundStationConfigResources() map[string]*groundstation.Config[any] {
	results := map[string]*groundstation.Config[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *groundstation.Config[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGroundStationConfigWithName retrieves all groundstation.Config items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGroundStationConfigWithName(name string) (*groundstation.Config[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *groundstation.Config[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type groundstation.Config not found", name)
}

// GetAllGroundStationDataflowEndpointGroupResources retrieves all groundstation.DataflowEndpointGroup items from an AWS CloudFormation template
func (t *Template) GetAllGroundStationDataflowEndpointGroupResources() map[string]*groundstation.DataflowEndpointGroup[any] {
	results := map[string]*groundstation.DataflowEndpointGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *groundstation.DataflowEndpointGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGroundStationDataflowEndpointGroupWithName retrieves all groundstation.DataflowEndpointGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGroundStationDataflowEndpointGroupWithName(name string) (*groundstation.DataflowEndpointGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *groundstation.DataflowEndpointGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type groundstation.DataflowEndpointGroup not found", name)
}

// GetAllGroundStationMissionProfileResources retrieves all groundstation.MissionProfile items from an AWS CloudFormation template
func (t *Template) GetAllGroundStationMissionProfileResources() map[string]*groundstation.MissionProfile[any] {
	results := map[string]*groundstation.MissionProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *groundstation.MissionProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGroundStationMissionProfileWithName retrieves all groundstation.MissionProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGroundStationMissionProfileWithName(name string) (*groundstation.MissionProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *groundstation.MissionProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type groundstation.MissionProfile not found", name)
}

// GetAllGuardDutyDetectorResources retrieves all guardduty.Detector items from an AWS CloudFormation template
func (t *Template) GetAllGuardDutyDetectorResources() map[string]*guardduty.Detector[any] {
	results := map[string]*guardduty.Detector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *guardduty.Detector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGuardDutyDetectorWithName retrieves all guardduty.Detector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGuardDutyDetectorWithName(name string) (*guardduty.Detector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *guardduty.Detector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type guardduty.Detector not found", name)
}

// GetAllGuardDutyFilterResources retrieves all guardduty.Filter items from an AWS CloudFormation template
func (t *Template) GetAllGuardDutyFilterResources() map[string]*guardduty.Filter[any] {
	results := map[string]*guardduty.Filter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *guardduty.Filter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGuardDutyFilterWithName retrieves all guardduty.Filter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGuardDutyFilterWithName(name string) (*guardduty.Filter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *guardduty.Filter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type guardduty.Filter not found", name)
}

// GetAllGuardDutyIPSetResources retrieves all guardduty.IPSet items from an AWS CloudFormation template
func (t *Template) GetAllGuardDutyIPSetResources() map[string]*guardduty.IPSet[any] {
	results := map[string]*guardduty.IPSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *guardduty.IPSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGuardDutyIPSetWithName retrieves all guardduty.IPSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGuardDutyIPSetWithName(name string) (*guardduty.IPSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *guardduty.IPSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type guardduty.IPSet not found", name)
}

// GetAllGuardDutyMasterResources retrieves all guardduty.Master items from an AWS CloudFormation template
func (t *Template) GetAllGuardDutyMasterResources() map[string]*guardduty.Master[any] {
	results := map[string]*guardduty.Master[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *guardduty.Master[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGuardDutyMasterWithName retrieves all guardduty.Master items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGuardDutyMasterWithName(name string) (*guardduty.Master[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *guardduty.Master[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type guardduty.Master not found", name)
}

// GetAllGuardDutyMemberResources retrieves all guardduty.Member items from an AWS CloudFormation template
func (t *Template) GetAllGuardDutyMemberResources() map[string]*guardduty.Member[any] {
	results := map[string]*guardduty.Member[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *guardduty.Member[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGuardDutyMemberWithName retrieves all guardduty.Member items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGuardDutyMemberWithName(name string) (*guardduty.Member[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *guardduty.Member[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type guardduty.Member not found", name)
}

// GetAllGuardDutyThreatIntelSetResources retrieves all guardduty.ThreatIntelSet items from an AWS CloudFormation template
func (t *Template) GetAllGuardDutyThreatIntelSetResources() map[string]*guardduty.ThreatIntelSet[any] {
	results := map[string]*guardduty.ThreatIntelSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *guardduty.ThreatIntelSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetGuardDutyThreatIntelSetWithName retrieves all guardduty.ThreatIntelSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetGuardDutyThreatIntelSetWithName(name string) (*guardduty.ThreatIntelSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *guardduty.ThreatIntelSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type guardduty.ThreatIntelSet not found", name)
}

// GetAllHealthLakeFHIRDatastoreResources retrieves all healthlake.FHIRDatastore items from an AWS CloudFormation template
func (t *Template) GetAllHealthLakeFHIRDatastoreResources() map[string]*healthlake.FHIRDatastore[any] {
	results := map[string]*healthlake.FHIRDatastore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *healthlake.FHIRDatastore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetHealthLakeFHIRDatastoreWithName retrieves all healthlake.FHIRDatastore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetHealthLakeFHIRDatastoreWithName(name string) (*healthlake.FHIRDatastore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *healthlake.FHIRDatastore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type healthlake.FHIRDatastore not found", name)
}

// GetAllIAMAccessKeyResources retrieves all iam.AccessKey items from an AWS CloudFormation template
func (t *Template) GetAllIAMAccessKeyResources() map[string]*iam.AccessKey[any] {
	results := map[string]*iam.AccessKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.AccessKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMAccessKeyWithName retrieves all iam.AccessKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMAccessKeyWithName(name string) (*iam.AccessKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.AccessKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.AccessKey not found", name)
}

// GetAllIAMGroupResources retrieves all iam.Group items from an AWS CloudFormation template
func (t *Template) GetAllIAMGroupResources() map[string]*iam.Group[any] {
	results := map[string]*iam.Group[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.Group[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMGroupWithName retrieves all iam.Group items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMGroupWithName(name string) (*iam.Group[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.Group[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.Group not found", name)
}

// GetAllIAMInstanceProfileResources retrieves all iam.InstanceProfile items from an AWS CloudFormation template
func (t *Template) GetAllIAMInstanceProfileResources() map[string]*iam.InstanceProfile[any] {
	results := map[string]*iam.InstanceProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.InstanceProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMInstanceProfileWithName retrieves all iam.InstanceProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMInstanceProfileWithName(name string) (*iam.InstanceProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.InstanceProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.InstanceProfile not found", name)
}

// GetAllIAMManagedPolicyResources retrieves all iam.ManagedPolicy items from an AWS CloudFormation template
func (t *Template) GetAllIAMManagedPolicyResources() map[string]*iam.ManagedPolicy[any] {
	results := map[string]*iam.ManagedPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.ManagedPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMManagedPolicyWithName retrieves all iam.ManagedPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMManagedPolicyWithName(name string) (*iam.ManagedPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.ManagedPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.ManagedPolicy not found", name)
}

// GetAllIAMOIDCProviderResources retrieves all iam.OIDCProvider items from an AWS CloudFormation template
func (t *Template) GetAllIAMOIDCProviderResources() map[string]*iam.OIDCProvider[any] {
	results := map[string]*iam.OIDCProvider[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.OIDCProvider[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMOIDCProviderWithName retrieves all iam.OIDCProvider items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMOIDCProviderWithName(name string) (*iam.OIDCProvider[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.OIDCProvider[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.OIDCProvider not found", name)
}

// GetAllIAMPolicyResources retrieves all iam.Policy items from an AWS CloudFormation template
func (t *Template) GetAllIAMPolicyResources() map[string]*iam.Policy[any] {
	results := map[string]*iam.Policy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.Policy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMPolicyWithName retrieves all iam.Policy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMPolicyWithName(name string) (*iam.Policy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.Policy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.Policy not found", name)
}

// GetAllIAMRoleResources retrieves all iam.Role items from an AWS CloudFormation template
func (t *Template) GetAllIAMRoleResources() map[string]*iam.Role[any] {
	results := map[string]*iam.Role[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.Role[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMRoleWithName retrieves all iam.Role items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMRoleWithName(name string) (*iam.Role[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.Role[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.Role not found", name)
}

// GetAllIAMSAMLProviderResources retrieves all iam.SAMLProvider items from an AWS CloudFormation template
func (t *Template) GetAllIAMSAMLProviderResources() map[string]*iam.SAMLProvider[any] {
	results := map[string]*iam.SAMLProvider[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.SAMLProvider[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMSAMLProviderWithName retrieves all iam.SAMLProvider items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMSAMLProviderWithName(name string) (*iam.SAMLProvider[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.SAMLProvider[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.SAMLProvider not found", name)
}

// GetAllIAMServerCertificateResources retrieves all iam.ServerCertificate items from an AWS CloudFormation template
func (t *Template) GetAllIAMServerCertificateResources() map[string]*iam.ServerCertificate[any] {
	results := map[string]*iam.ServerCertificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.ServerCertificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMServerCertificateWithName retrieves all iam.ServerCertificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMServerCertificateWithName(name string) (*iam.ServerCertificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.ServerCertificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.ServerCertificate not found", name)
}

// GetAllIAMServiceLinkedRoleResources retrieves all iam.ServiceLinkedRole items from an AWS CloudFormation template
func (t *Template) GetAllIAMServiceLinkedRoleResources() map[string]*iam.ServiceLinkedRole[any] {
	results := map[string]*iam.ServiceLinkedRole[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.ServiceLinkedRole[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMServiceLinkedRoleWithName retrieves all iam.ServiceLinkedRole items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMServiceLinkedRoleWithName(name string) (*iam.ServiceLinkedRole[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.ServiceLinkedRole[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.ServiceLinkedRole not found", name)
}

// GetAllIAMUserResources retrieves all iam.User items from an AWS CloudFormation template
func (t *Template) GetAllIAMUserResources() map[string]*iam.User[any] {
	results := map[string]*iam.User[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.User[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMUserWithName retrieves all iam.User items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMUserWithName(name string) (*iam.User[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.User[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.User not found", name)
}

// GetAllIAMUserToGroupAdditionResources retrieves all iam.UserToGroupAddition items from an AWS CloudFormation template
func (t *Template) GetAllIAMUserToGroupAdditionResources() map[string]*iam.UserToGroupAddition[any] {
	results := map[string]*iam.UserToGroupAddition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.UserToGroupAddition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMUserToGroupAdditionWithName retrieves all iam.UserToGroupAddition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMUserToGroupAdditionWithName(name string) (*iam.UserToGroupAddition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.UserToGroupAddition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.UserToGroupAddition not found", name)
}

// GetAllIAMVirtualMFADeviceResources retrieves all iam.VirtualMFADevice items from an AWS CloudFormation template
func (t *Template) GetAllIAMVirtualMFADeviceResources() map[string]*iam.VirtualMFADevice[any] {
	results := map[string]*iam.VirtualMFADevice[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iam.VirtualMFADevice[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIAMVirtualMFADeviceWithName retrieves all iam.VirtualMFADevice items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIAMVirtualMFADeviceWithName(name string) (*iam.VirtualMFADevice[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iam.VirtualMFADevice[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iam.VirtualMFADevice not found", name)
}

// GetAllIVSChannelResources retrieves all ivs.Channel items from an AWS CloudFormation template
func (t *Template) GetAllIVSChannelResources() map[string]*ivs.Channel[any] {
	results := map[string]*ivs.Channel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ivs.Channel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIVSChannelWithName retrieves all ivs.Channel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIVSChannelWithName(name string) (*ivs.Channel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ivs.Channel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ivs.Channel not found", name)
}

// GetAllIVSPlaybackKeyPairResources retrieves all ivs.PlaybackKeyPair items from an AWS CloudFormation template
func (t *Template) GetAllIVSPlaybackKeyPairResources() map[string]*ivs.PlaybackKeyPair[any] {
	results := map[string]*ivs.PlaybackKeyPair[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ivs.PlaybackKeyPair[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIVSPlaybackKeyPairWithName retrieves all ivs.PlaybackKeyPair items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIVSPlaybackKeyPairWithName(name string) (*ivs.PlaybackKeyPair[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ivs.PlaybackKeyPair[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ivs.PlaybackKeyPair not found", name)
}

// GetAllIVSRecordingConfigurationResources retrieves all ivs.RecordingConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllIVSRecordingConfigurationResources() map[string]*ivs.RecordingConfiguration[any] {
	results := map[string]*ivs.RecordingConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ivs.RecordingConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIVSRecordingConfigurationWithName retrieves all ivs.RecordingConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIVSRecordingConfigurationWithName(name string) (*ivs.RecordingConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ivs.RecordingConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ivs.RecordingConfiguration not found", name)
}

// GetAllIVSStreamKeyResources retrieves all ivs.StreamKey items from an AWS CloudFormation template
func (t *Template) GetAllIVSStreamKeyResources() map[string]*ivs.StreamKey[any] {
	results := map[string]*ivs.StreamKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ivs.StreamKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIVSStreamKeyWithName retrieves all ivs.StreamKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIVSStreamKeyWithName(name string) (*ivs.StreamKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ivs.StreamKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ivs.StreamKey not found", name)
}

// GetAllIVSChatLoggingConfigurationResources retrieves all ivschat.LoggingConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllIVSChatLoggingConfigurationResources() map[string]*ivschat.LoggingConfiguration[any] {
	results := map[string]*ivschat.LoggingConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ivschat.LoggingConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIVSChatLoggingConfigurationWithName retrieves all ivschat.LoggingConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIVSChatLoggingConfigurationWithName(name string) (*ivschat.LoggingConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ivschat.LoggingConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ivschat.LoggingConfiguration not found", name)
}

// GetAllIVSChatRoomResources retrieves all ivschat.Room items from an AWS CloudFormation template
func (t *Template) GetAllIVSChatRoomResources() map[string]*ivschat.Room[any] {
	results := map[string]*ivschat.Room[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ivschat.Room[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIVSChatRoomWithName retrieves all ivschat.Room items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIVSChatRoomWithName(name string) (*ivschat.Room[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ivschat.Room[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ivschat.Room not found", name)
}

// GetAllIdentityStoreGroupResources retrieves all identitystore.Group items from an AWS CloudFormation template
func (t *Template) GetAllIdentityStoreGroupResources() map[string]*identitystore.Group[any] {
	results := map[string]*identitystore.Group[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *identitystore.Group[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIdentityStoreGroupWithName retrieves all identitystore.Group items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIdentityStoreGroupWithName(name string) (*identitystore.Group[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *identitystore.Group[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type identitystore.Group not found", name)
}

// GetAllIdentityStoreGroupMembershipResources retrieves all identitystore.GroupMembership items from an AWS CloudFormation template
func (t *Template) GetAllIdentityStoreGroupMembershipResources() map[string]*identitystore.GroupMembership[any] {
	results := map[string]*identitystore.GroupMembership[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *identitystore.GroupMembership[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIdentityStoreGroupMembershipWithName retrieves all identitystore.GroupMembership items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIdentityStoreGroupMembershipWithName(name string) (*identitystore.GroupMembership[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *identitystore.GroupMembership[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type identitystore.GroupMembership not found", name)
}

// GetAllImageBuilderComponentResources retrieves all imagebuilder.Component items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderComponentResources() map[string]*imagebuilder.Component[any] {
	results := map[string]*imagebuilder.Component[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.Component[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderComponentWithName retrieves all imagebuilder.Component items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderComponentWithName(name string) (*imagebuilder.Component[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.Component[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.Component not found", name)
}

// GetAllImageBuilderContainerRecipeResources retrieves all imagebuilder.ContainerRecipe items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderContainerRecipeResources() map[string]*imagebuilder.ContainerRecipe[any] {
	results := map[string]*imagebuilder.ContainerRecipe[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.ContainerRecipe[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderContainerRecipeWithName retrieves all imagebuilder.ContainerRecipe items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderContainerRecipeWithName(name string) (*imagebuilder.ContainerRecipe[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.ContainerRecipe[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.ContainerRecipe not found", name)
}

// GetAllImageBuilderDistributionConfigurationResources retrieves all imagebuilder.DistributionConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderDistributionConfigurationResources() map[string]*imagebuilder.DistributionConfiguration[any] {
	results := map[string]*imagebuilder.DistributionConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.DistributionConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderDistributionConfigurationWithName retrieves all imagebuilder.DistributionConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderDistributionConfigurationWithName(name string) (*imagebuilder.DistributionConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.DistributionConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.DistributionConfiguration not found", name)
}

// GetAllImageBuilderImageResources retrieves all imagebuilder.Image items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderImageResources() map[string]*imagebuilder.Image[any] {
	results := map[string]*imagebuilder.Image[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.Image[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderImageWithName retrieves all imagebuilder.Image items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderImageWithName(name string) (*imagebuilder.Image[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.Image[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.Image not found", name)
}

// GetAllImageBuilderImagePipelineResources retrieves all imagebuilder.ImagePipeline items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderImagePipelineResources() map[string]*imagebuilder.ImagePipeline[any] {
	results := map[string]*imagebuilder.ImagePipeline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.ImagePipeline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderImagePipelineWithName retrieves all imagebuilder.ImagePipeline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderImagePipelineWithName(name string) (*imagebuilder.ImagePipeline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.ImagePipeline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.ImagePipeline not found", name)
}

// GetAllImageBuilderImageRecipeResources retrieves all imagebuilder.ImageRecipe items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderImageRecipeResources() map[string]*imagebuilder.ImageRecipe[any] {
	results := map[string]*imagebuilder.ImageRecipe[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.ImageRecipe[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderImageRecipeWithName retrieves all imagebuilder.ImageRecipe items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderImageRecipeWithName(name string) (*imagebuilder.ImageRecipe[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.ImageRecipe[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.ImageRecipe not found", name)
}

// GetAllImageBuilderInfrastructureConfigurationResources retrieves all imagebuilder.InfrastructureConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllImageBuilderInfrastructureConfigurationResources() map[string]*imagebuilder.InfrastructureConfiguration[any] {
	results := map[string]*imagebuilder.InfrastructureConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *imagebuilder.InfrastructureConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetImageBuilderInfrastructureConfigurationWithName retrieves all imagebuilder.InfrastructureConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetImageBuilderInfrastructureConfigurationWithName(name string) (*imagebuilder.InfrastructureConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *imagebuilder.InfrastructureConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type imagebuilder.InfrastructureConfiguration not found", name)
}

// GetAllInspectorAssessmentTargetResources retrieves all inspector.AssessmentTarget items from an AWS CloudFormation template
func (t *Template) GetAllInspectorAssessmentTargetResources() map[string]*inspector.AssessmentTarget[any] {
	results := map[string]*inspector.AssessmentTarget[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *inspector.AssessmentTarget[any]:
			results[name] = resource
		}
	}
	return results
}

// GetInspectorAssessmentTargetWithName retrieves all inspector.AssessmentTarget items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetInspectorAssessmentTargetWithName(name string) (*inspector.AssessmentTarget[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *inspector.AssessmentTarget[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type inspector.AssessmentTarget not found", name)
}

// GetAllInspectorAssessmentTemplateResources retrieves all inspector.AssessmentTemplate items from an AWS CloudFormation template
func (t *Template) GetAllInspectorAssessmentTemplateResources() map[string]*inspector.AssessmentTemplate[any] {
	results := map[string]*inspector.AssessmentTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *inspector.AssessmentTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetInspectorAssessmentTemplateWithName retrieves all inspector.AssessmentTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetInspectorAssessmentTemplateWithName(name string) (*inspector.AssessmentTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *inspector.AssessmentTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type inspector.AssessmentTemplate not found", name)
}

// GetAllInspectorResourceGroupResources retrieves all inspector.ResourceGroup items from an AWS CloudFormation template
func (t *Template) GetAllInspectorResourceGroupResources() map[string]*inspector.ResourceGroup[any] {
	results := map[string]*inspector.ResourceGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *inspector.ResourceGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetInspectorResourceGroupWithName retrieves all inspector.ResourceGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetInspectorResourceGroupWithName(name string) (*inspector.ResourceGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *inspector.ResourceGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type inspector.ResourceGroup not found", name)
}

// GetAllInspectorV2FilterResources retrieves all inspectorv2.Filter items from an AWS CloudFormation template
func (t *Template) GetAllInspectorV2FilterResources() map[string]*inspectorv2.Filter[any] {
	results := map[string]*inspectorv2.Filter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *inspectorv2.Filter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetInspectorV2FilterWithName retrieves all inspectorv2.Filter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetInspectorV2FilterWithName(name string) (*inspectorv2.Filter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *inspectorv2.Filter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type inspectorv2.Filter not found", name)
}

// GetAllInternetMonitorMonitorResources retrieves all internetmonitor.Monitor items from an AWS CloudFormation template
func (t *Template) GetAllInternetMonitorMonitorResources() map[string]*internetmonitor.Monitor[any] {
	results := map[string]*internetmonitor.Monitor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *internetmonitor.Monitor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetInternetMonitorMonitorWithName retrieves all internetmonitor.Monitor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetInternetMonitorMonitorWithName(name string) (*internetmonitor.Monitor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *internetmonitor.Monitor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type internetmonitor.Monitor not found", name)
}

// GetAllIoT1ClickDeviceResources retrieves all iot1click.Device items from an AWS CloudFormation template
func (t *Template) GetAllIoT1ClickDeviceResources() map[string]*iot1click.Device[any] {
	results := map[string]*iot1click.Device[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot1click.Device[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoT1ClickDeviceWithName retrieves all iot1click.Device items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoT1ClickDeviceWithName(name string) (*iot1click.Device[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot1click.Device[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot1click.Device not found", name)
}

// GetAllIoT1ClickPlacementResources retrieves all iot1click.Placement items from an AWS CloudFormation template
func (t *Template) GetAllIoT1ClickPlacementResources() map[string]*iot1click.Placement[any] {
	results := map[string]*iot1click.Placement[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot1click.Placement[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoT1ClickPlacementWithName retrieves all iot1click.Placement items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoT1ClickPlacementWithName(name string) (*iot1click.Placement[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot1click.Placement[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot1click.Placement not found", name)
}

// GetAllIoT1ClickProjectResources retrieves all iot1click.Project items from an AWS CloudFormation template
func (t *Template) GetAllIoT1ClickProjectResources() map[string]*iot1click.Project[any] {
	results := map[string]*iot1click.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot1click.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoT1ClickProjectWithName retrieves all iot1click.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoT1ClickProjectWithName(name string) (*iot1click.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot1click.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot1click.Project not found", name)
}

// GetAllIoTAccountAuditConfigurationResources retrieves all iot.AccountAuditConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllIoTAccountAuditConfigurationResources() map[string]*iot.AccountAuditConfiguration[any] {
	results := map[string]*iot.AccountAuditConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.AccountAuditConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTAccountAuditConfigurationWithName retrieves all iot.AccountAuditConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTAccountAuditConfigurationWithName(name string) (*iot.AccountAuditConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.AccountAuditConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.AccountAuditConfiguration not found", name)
}

// GetAllIoTAuthorizerResources retrieves all iot.Authorizer items from an AWS CloudFormation template
func (t *Template) GetAllIoTAuthorizerResources() map[string]*iot.Authorizer[any] {
	results := map[string]*iot.Authorizer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.Authorizer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTAuthorizerWithName retrieves all iot.Authorizer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTAuthorizerWithName(name string) (*iot.Authorizer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.Authorizer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.Authorizer not found", name)
}

// GetAllIoTBillingGroupResources retrieves all iot.BillingGroup items from an AWS CloudFormation template
func (t *Template) GetAllIoTBillingGroupResources() map[string]*iot.BillingGroup[any] {
	results := map[string]*iot.BillingGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.BillingGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTBillingGroupWithName retrieves all iot.BillingGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTBillingGroupWithName(name string) (*iot.BillingGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.BillingGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.BillingGroup not found", name)
}

// GetAllIoTCACertificateResources retrieves all iot.CACertificate items from an AWS CloudFormation template
func (t *Template) GetAllIoTCACertificateResources() map[string]*iot.CACertificate[any] {
	results := map[string]*iot.CACertificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.CACertificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTCACertificateWithName retrieves all iot.CACertificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTCACertificateWithName(name string) (*iot.CACertificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.CACertificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.CACertificate not found", name)
}

// GetAllIoTCertificateResources retrieves all iot.Certificate items from an AWS CloudFormation template
func (t *Template) GetAllIoTCertificateResources() map[string]*iot.Certificate[any] {
	results := map[string]*iot.Certificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.Certificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTCertificateWithName retrieves all iot.Certificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTCertificateWithName(name string) (*iot.Certificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.Certificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.Certificate not found", name)
}

// GetAllIoTCustomMetricResources retrieves all iot.CustomMetric items from an AWS CloudFormation template
func (t *Template) GetAllIoTCustomMetricResources() map[string]*iot.CustomMetric[any] {
	results := map[string]*iot.CustomMetric[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.CustomMetric[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTCustomMetricWithName retrieves all iot.CustomMetric items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTCustomMetricWithName(name string) (*iot.CustomMetric[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.CustomMetric[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.CustomMetric not found", name)
}

// GetAllIoTDimensionResources retrieves all iot.Dimension items from an AWS CloudFormation template
func (t *Template) GetAllIoTDimensionResources() map[string]*iot.Dimension[any] {
	results := map[string]*iot.Dimension[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.Dimension[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTDimensionWithName retrieves all iot.Dimension items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTDimensionWithName(name string) (*iot.Dimension[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.Dimension[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.Dimension not found", name)
}

// GetAllIoTDomainConfigurationResources retrieves all iot.DomainConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllIoTDomainConfigurationResources() map[string]*iot.DomainConfiguration[any] {
	results := map[string]*iot.DomainConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.DomainConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTDomainConfigurationWithName retrieves all iot.DomainConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTDomainConfigurationWithName(name string) (*iot.DomainConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.DomainConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.DomainConfiguration not found", name)
}

// GetAllIoTFleetMetricResources retrieves all iot.FleetMetric items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetMetricResources() map[string]*iot.FleetMetric[any] {
	results := map[string]*iot.FleetMetric[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.FleetMetric[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetMetricWithName retrieves all iot.FleetMetric items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetMetricWithName(name string) (*iot.FleetMetric[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.FleetMetric[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.FleetMetric not found", name)
}

// GetAllIoTJobTemplateResources retrieves all iot.JobTemplate items from an AWS CloudFormation template
func (t *Template) GetAllIoTJobTemplateResources() map[string]*iot.JobTemplate[any] {
	results := map[string]*iot.JobTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.JobTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTJobTemplateWithName retrieves all iot.JobTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTJobTemplateWithName(name string) (*iot.JobTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.JobTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.JobTemplate not found", name)
}

// GetAllIoTLoggingResources retrieves all iot.Logging items from an AWS CloudFormation template
func (t *Template) GetAllIoTLoggingResources() map[string]*iot.Logging[any] {
	results := map[string]*iot.Logging[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.Logging[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTLoggingWithName retrieves all iot.Logging items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTLoggingWithName(name string) (*iot.Logging[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.Logging[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.Logging not found", name)
}

// GetAllIoTMitigationActionResources retrieves all iot.MitigationAction items from an AWS CloudFormation template
func (t *Template) GetAllIoTMitigationActionResources() map[string]*iot.MitigationAction[any] {
	results := map[string]*iot.MitigationAction[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.MitigationAction[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTMitigationActionWithName retrieves all iot.MitigationAction items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTMitigationActionWithName(name string) (*iot.MitigationAction[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.MitigationAction[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.MitigationAction not found", name)
}

// GetAllIoTPolicyResources retrieves all iot.Policy items from an AWS CloudFormation template
func (t *Template) GetAllIoTPolicyResources() map[string]*iot.Policy[any] {
	results := map[string]*iot.Policy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.Policy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTPolicyWithName retrieves all iot.Policy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTPolicyWithName(name string) (*iot.Policy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.Policy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.Policy not found", name)
}

// GetAllIoTPolicyPrincipalAttachmentResources retrieves all iot.PolicyPrincipalAttachment items from an AWS CloudFormation template
func (t *Template) GetAllIoTPolicyPrincipalAttachmentResources() map[string]*iot.PolicyPrincipalAttachment[any] {
	results := map[string]*iot.PolicyPrincipalAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.PolicyPrincipalAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTPolicyPrincipalAttachmentWithName retrieves all iot.PolicyPrincipalAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTPolicyPrincipalAttachmentWithName(name string) (*iot.PolicyPrincipalAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.PolicyPrincipalAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.PolicyPrincipalAttachment not found", name)
}

// GetAllIoTProvisioningTemplateResources retrieves all iot.ProvisioningTemplate items from an AWS CloudFormation template
func (t *Template) GetAllIoTProvisioningTemplateResources() map[string]*iot.ProvisioningTemplate[any] {
	results := map[string]*iot.ProvisioningTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.ProvisioningTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTProvisioningTemplateWithName retrieves all iot.ProvisioningTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTProvisioningTemplateWithName(name string) (*iot.ProvisioningTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.ProvisioningTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.ProvisioningTemplate not found", name)
}

// GetAllIoTResourceSpecificLoggingResources retrieves all iot.ResourceSpecificLogging items from an AWS CloudFormation template
func (t *Template) GetAllIoTResourceSpecificLoggingResources() map[string]*iot.ResourceSpecificLogging[any] {
	results := map[string]*iot.ResourceSpecificLogging[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.ResourceSpecificLogging[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTResourceSpecificLoggingWithName retrieves all iot.ResourceSpecificLogging items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTResourceSpecificLoggingWithName(name string) (*iot.ResourceSpecificLogging[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.ResourceSpecificLogging[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.ResourceSpecificLogging not found", name)
}

// GetAllIoTRoleAliasResources retrieves all iot.RoleAlias items from an AWS CloudFormation template
func (t *Template) GetAllIoTRoleAliasResources() map[string]*iot.RoleAlias[any] {
	results := map[string]*iot.RoleAlias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.RoleAlias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTRoleAliasWithName retrieves all iot.RoleAlias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTRoleAliasWithName(name string) (*iot.RoleAlias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.RoleAlias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.RoleAlias not found", name)
}

// GetAllIoTScheduledAuditResources retrieves all iot.ScheduledAudit items from an AWS CloudFormation template
func (t *Template) GetAllIoTScheduledAuditResources() map[string]*iot.ScheduledAudit[any] {
	results := map[string]*iot.ScheduledAudit[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.ScheduledAudit[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTScheduledAuditWithName retrieves all iot.ScheduledAudit items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTScheduledAuditWithName(name string) (*iot.ScheduledAudit[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.ScheduledAudit[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.ScheduledAudit not found", name)
}

// GetAllIoTSecurityProfileResources retrieves all iot.SecurityProfile items from an AWS CloudFormation template
func (t *Template) GetAllIoTSecurityProfileResources() map[string]*iot.SecurityProfile[any] {
	results := map[string]*iot.SecurityProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.SecurityProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSecurityProfileWithName retrieves all iot.SecurityProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSecurityProfileWithName(name string) (*iot.SecurityProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.SecurityProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.SecurityProfile not found", name)
}

// GetAllIoTThingResources retrieves all iot.Thing items from an AWS CloudFormation template
func (t *Template) GetAllIoTThingResources() map[string]*iot.Thing[any] {
	results := map[string]*iot.Thing[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.Thing[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTThingWithName retrieves all iot.Thing items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTThingWithName(name string) (*iot.Thing[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.Thing[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.Thing not found", name)
}

// GetAllIoTThingGroupResources retrieves all iot.ThingGroup items from an AWS CloudFormation template
func (t *Template) GetAllIoTThingGroupResources() map[string]*iot.ThingGroup[any] {
	results := map[string]*iot.ThingGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.ThingGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTThingGroupWithName retrieves all iot.ThingGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTThingGroupWithName(name string) (*iot.ThingGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.ThingGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.ThingGroup not found", name)
}

// GetAllIoTThingPrincipalAttachmentResources retrieves all iot.ThingPrincipalAttachment items from an AWS CloudFormation template
func (t *Template) GetAllIoTThingPrincipalAttachmentResources() map[string]*iot.ThingPrincipalAttachment[any] {
	results := map[string]*iot.ThingPrincipalAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.ThingPrincipalAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTThingPrincipalAttachmentWithName retrieves all iot.ThingPrincipalAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTThingPrincipalAttachmentWithName(name string) (*iot.ThingPrincipalAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.ThingPrincipalAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.ThingPrincipalAttachment not found", name)
}

// GetAllIoTThingTypeResources retrieves all iot.ThingType items from an AWS CloudFormation template
func (t *Template) GetAllIoTThingTypeResources() map[string]*iot.ThingType[any] {
	results := map[string]*iot.ThingType[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.ThingType[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTThingTypeWithName retrieves all iot.ThingType items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTThingTypeWithName(name string) (*iot.ThingType[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.ThingType[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.ThingType not found", name)
}

// GetAllIoTTopicRuleResources retrieves all iot.TopicRule items from an AWS CloudFormation template
func (t *Template) GetAllIoTTopicRuleResources() map[string]*iot.TopicRule[any] {
	results := map[string]*iot.TopicRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.TopicRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTopicRuleWithName retrieves all iot.TopicRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTopicRuleWithName(name string) (*iot.TopicRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.TopicRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.TopicRule not found", name)
}

// GetAllIoTTopicRuleDestinationResources retrieves all iot.TopicRuleDestination items from an AWS CloudFormation template
func (t *Template) GetAllIoTTopicRuleDestinationResources() map[string]*iot.TopicRuleDestination[any] {
	results := map[string]*iot.TopicRuleDestination[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iot.TopicRuleDestination[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTopicRuleDestinationWithName retrieves all iot.TopicRuleDestination items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTopicRuleDestinationWithName(name string) (*iot.TopicRuleDestination[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iot.TopicRuleDestination[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iot.TopicRuleDestination not found", name)
}

// GetAllIoTAnalyticsChannelResources retrieves all iotanalytics.Channel items from an AWS CloudFormation template
func (t *Template) GetAllIoTAnalyticsChannelResources() map[string]*iotanalytics.Channel[any] {
	results := map[string]*iotanalytics.Channel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotanalytics.Channel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTAnalyticsChannelWithName retrieves all iotanalytics.Channel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTAnalyticsChannelWithName(name string) (*iotanalytics.Channel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotanalytics.Channel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotanalytics.Channel not found", name)
}

// GetAllIoTAnalyticsDatasetResources retrieves all iotanalytics.Dataset items from an AWS CloudFormation template
func (t *Template) GetAllIoTAnalyticsDatasetResources() map[string]*iotanalytics.Dataset[any] {
	results := map[string]*iotanalytics.Dataset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotanalytics.Dataset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTAnalyticsDatasetWithName retrieves all iotanalytics.Dataset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTAnalyticsDatasetWithName(name string) (*iotanalytics.Dataset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotanalytics.Dataset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotanalytics.Dataset not found", name)
}

// GetAllIoTAnalyticsDatastoreResources retrieves all iotanalytics.Datastore items from an AWS CloudFormation template
func (t *Template) GetAllIoTAnalyticsDatastoreResources() map[string]*iotanalytics.Datastore[any] {
	results := map[string]*iotanalytics.Datastore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotanalytics.Datastore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTAnalyticsDatastoreWithName retrieves all iotanalytics.Datastore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTAnalyticsDatastoreWithName(name string) (*iotanalytics.Datastore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotanalytics.Datastore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotanalytics.Datastore not found", name)
}

// GetAllIoTAnalyticsPipelineResources retrieves all iotanalytics.Pipeline items from an AWS CloudFormation template
func (t *Template) GetAllIoTAnalyticsPipelineResources() map[string]*iotanalytics.Pipeline[any] {
	results := map[string]*iotanalytics.Pipeline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotanalytics.Pipeline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTAnalyticsPipelineWithName retrieves all iotanalytics.Pipeline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTAnalyticsPipelineWithName(name string) (*iotanalytics.Pipeline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotanalytics.Pipeline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotanalytics.Pipeline not found", name)
}

// GetAllIoTCoreDeviceAdvisorSuiteDefinitionResources retrieves all iotcoredeviceadvisor.SuiteDefinition items from an AWS CloudFormation template
func (t *Template) GetAllIoTCoreDeviceAdvisorSuiteDefinitionResources() map[string]*iotcoredeviceadvisor.SuiteDefinition[any] {
	results := map[string]*iotcoredeviceadvisor.SuiteDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotcoredeviceadvisor.SuiteDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTCoreDeviceAdvisorSuiteDefinitionWithName retrieves all iotcoredeviceadvisor.SuiteDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTCoreDeviceAdvisorSuiteDefinitionWithName(name string) (*iotcoredeviceadvisor.SuiteDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotcoredeviceadvisor.SuiteDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotcoredeviceadvisor.SuiteDefinition not found", name)
}

// GetAllIoTEventsAlarmModelResources retrieves all iotevents.AlarmModel items from an AWS CloudFormation template
func (t *Template) GetAllIoTEventsAlarmModelResources() map[string]*iotevents.AlarmModel[any] {
	results := map[string]*iotevents.AlarmModel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotevents.AlarmModel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTEventsAlarmModelWithName retrieves all iotevents.AlarmModel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTEventsAlarmModelWithName(name string) (*iotevents.AlarmModel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotevents.AlarmModel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotevents.AlarmModel not found", name)
}

// GetAllIoTEventsDetectorModelResources retrieves all iotevents.DetectorModel items from an AWS CloudFormation template
func (t *Template) GetAllIoTEventsDetectorModelResources() map[string]*iotevents.DetectorModel[any] {
	results := map[string]*iotevents.DetectorModel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotevents.DetectorModel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTEventsDetectorModelWithName retrieves all iotevents.DetectorModel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTEventsDetectorModelWithName(name string) (*iotevents.DetectorModel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotevents.DetectorModel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotevents.DetectorModel not found", name)
}

// GetAllIoTEventsInputResources retrieves all iotevents.Input items from an AWS CloudFormation template
func (t *Template) GetAllIoTEventsInputResources() map[string]*iotevents.Input[any] {
	results := map[string]*iotevents.Input[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotevents.Input[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTEventsInputWithName retrieves all iotevents.Input items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTEventsInputWithName(name string) (*iotevents.Input[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotevents.Input[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotevents.Input not found", name)
}

// GetAllIoTFleetHubApplicationResources retrieves all iotfleethub.Application items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetHubApplicationResources() map[string]*iotfleethub.Application[any] {
	results := map[string]*iotfleethub.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleethub.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetHubApplicationWithName retrieves all iotfleethub.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetHubApplicationWithName(name string) (*iotfleethub.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleethub.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleethub.Application not found", name)
}

// GetAllIoTFleetWiseCampaignResources retrieves all iotfleetwise.Campaign items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetWiseCampaignResources() map[string]*iotfleetwise.Campaign[any] {
	results := map[string]*iotfleetwise.Campaign[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleetwise.Campaign[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetWiseCampaignWithName retrieves all iotfleetwise.Campaign items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetWiseCampaignWithName(name string) (*iotfleetwise.Campaign[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleetwise.Campaign[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleetwise.Campaign not found", name)
}

// GetAllIoTFleetWiseDecoderManifestResources retrieves all iotfleetwise.DecoderManifest items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetWiseDecoderManifestResources() map[string]*iotfleetwise.DecoderManifest[any] {
	results := map[string]*iotfleetwise.DecoderManifest[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleetwise.DecoderManifest[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetWiseDecoderManifestWithName retrieves all iotfleetwise.DecoderManifest items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetWiseDecoderManifestWithName(name string) (*iotfleetwise.DecoderManifest[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleetwise.DecoderManifest[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleetwise.DecoderManifest not found", name)
}

// GetAllIoTFleetWiseFleetResources retrieves all iotfleetwise.Fleet items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetWiseFleetResources() map[string]*iotfleetwise.Fleet[any] {
	results := map[string]*iotfleetwise.Fleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleetwise.Fleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetWiseFleetWithName retrieves all iotfleetwise.Fleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetWiseFleetWithName(name string) (*iotfleetwise.Fleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleetwise.Fleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleetwise.Fleet not found", name)
}

// GetAllIoTFleetWiseModelManifestResources retrieves all iotfleetwise.ModelManifest items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetWiseModelManifestResources() map[string]*iotfleetwise.ModelManifest[any] {
	results := map[string]*iotfleetwise.ModelManifest[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleetwise.ModelManifest[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetWiseModelManifestWithName retrieves all iotfleetwise.ModelManifest items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetWiseModelManifestWithName(name string) (*iotfleetwise.ModelManifest[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleetwise.ModelManifest[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleetwise.ModelManifest not found", name)
}

// GetAllIoTFleetWiseSignalCatalogResources retrieves all iotfleetwise.SignalCatalog items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetWiseSignalCatalogResources() map[string]*iotfleetwise.SignalCatalog[any] {
	results := map[string]*iotfleetwise.SignalCatalog[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleetwise.SignalCatalog[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetWiseSignalCatalogWithName retrieves all iotfleetwise.SignalCatalog items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetWiseSignalCatalogWithName(name string) (*iotfleetwise.SignalCatalog[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleetwise.SignalCatalog[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleetwise.SignalCatalog not found", name)
}

// GetAllIoTFleetWiseVehicleResources retrieves all iotfleetwise.Vehicle items from an AWS CloudFormation template
func (t *Template) GetAllIoTFleetWiseVehicleResources() map[string]*iotfleetwise.Vehicle[any] {
	results := map[string]*iotfleetwise.Vehicle[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotfleetwise.Vehicle[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTFleetWiseVehicleWithName retrieves all iotfleetwise.Vehicle items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTFleetWiseVehicleWithName(name string) (*iotfleetwise.Vehicle[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotfleetwise.Vehicle[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotfleetwise.Vehicle not found", name)
}

// GetAllIoTSiteWiseAccessPolicyResources retrieves all iotsitewise.AccessPolicy items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWiseAccessPolicyResources() map[string]*iotsitewise.AccessPolicy[any] {
	results := map[string]*iotsitewise.AccessPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.AccessPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWiseAccessPolicyWithName retrieves all iotsitewise.AccessPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWiseAccessPolicyWithName(name string) (*iotsitewise.AccessPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.AccessPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.AccessPolicy not found", name)
}

// GetAllIoTSiteWiseAssetResources retrieves all iotsitewise.Asset items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWiseAssetResources() map[string]*iotsitewise.Asset[any] {
	results := map[string]*iotsitewise.Asset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.Asset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWiseAssetWithName retrieves all iotsitewise.Asset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWiseAssetWithName(name string) (*iotsitewise.Asset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.Asset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.Asset not found", name)
}

// GetAllIoTSiteWiseAssetModelResources retrieves all iotsitewise.AssetModel items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWiseAssetModelResources() map[string]*iotsitewise.AssetModel[any] {
	results := map[string]*iotsitewise.AssetModel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.AssetModel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWiseAssetModelWithName retrieves all iotsitewise.AssetModel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWiseAssetModelWithName(name string) (*iotsitewise.AssetModel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.AssetModel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.AssetModel not found", name)
}

// GetAllIoTSiteWiseDashboardResources retrieves all iotsitewise.Dashboard items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWiseDashboardResources() map[string]*iotsitewise.Dashboard[any] {
	results := map[string]*iotsitewise.Dashboard[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.Dashboard[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWiseDashboardWithName retrieves all iotsitewise.Dashboard items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWiseDashboardWithName(name string) (*iotsitewise.Dashboard[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.Dashboard[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.Dashboard not found", name)
}

// GetAllIoTSiteWiseGatewayResources retrieves all iotsitewise.Gateway items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWiseGatewayResources() map[string]*iotsitewise.Gateway[any] {
	results := map[string]*iotsitewise.Gateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.Gateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWiseGatewayWithName retrieves all iotsitewise.Gateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWiseGatewayWithName(name string) (*iotsitewise.Gateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.Gateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.Gateway not found", name)
}

// GetAllIoTSiteWisePortalResources retrieves all iotsitewise.Portal items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWisePortalResources() map[string]*iotsitewise.Portal[any] {
	results := map[string]*iotsitewise.Portal[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.Portal[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWisePortalWithName retrieves all iotsitewise.Portal items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWisePortalWithName(name string) (*iotsitewise.Portal[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.Portal[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.Portal not found", name)
}

// GetAllIoTSiteWiseProjectResources retrieves all iotsitewise.Project items from an AWS CloudFormation template
func (t *Template) GetAllIoTSiteWiseProjectResources() map[string]*iotsitewise.Project[any] {
	results := map[string]*iotsitewise.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotsitewise.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTSiteWiseProjectWithName retrieves all iotsitewise.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTSiteWiseProjectWithName(name string) (*iotsitewise.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotsitewise.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotsitewise.Project not found", name)
}

// GetAllIoTThingsGraphFlowTemplateResources retrieves all iotthingsgraph.FlowTemplate items from an AWS CloudFormation template
func (t *Template) GetAllIoTThingsGraphFlowTemplateResources() map[string]*iotthingsgraph.FlowTemplate[any] {
	results := map[string]*iotthingsgraph.FlowTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotthingsgraph.FlowTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTThingsGraphFlowTemplateWithName retrieves all iotthingsgraph.FlowTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTThingsGraphFlowTemplateWithName(name string) (*iotthingsgraph.FlowTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotthingsgraph.FlowTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotthingsgraph.FlowTemplate not found", name)
}

// GetAllIoTTwinMakerComponentTypeResources retrieves all iottwinmaker.ComponentType items from an AWS CloudFormation template
func (t *Template) GetAllIoTTwinMakerComponentTypeResources() map[string]*iottwinmaker.ComponentType[any] {
	results := map[string]*iottwinmaker.ComponentType[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iottwinmaker.ComponentType[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTwinMakerComponentTypeWithName retrieves all iottwinmaker.ComponentType items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTwinMakerComponentTypeWithName(name string) (*iottwinmaker.ComponentType[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iottwinmaker.ComponentType[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iottwinmaker.ComponentType not found", name)
}

// GetAllIoTTwinMakerEntityResources retrieves all iottwinmaker.Entity items from an AWS CloudFormation template
func (t *Template) GetAllIoTTwinMakerEntityResources() map[string]*iottwinmaker.Entity[any] {
	results := map[string]*iottwinmaker.Entity[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iottwinmaker.Entity[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTwinMakerEntityWithName retrieves all iottwinmaker.Entity items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTwinMakerEntityWithName(name string) (*iottwinmaker.Entity[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iottwinmaker.Entity[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iottwinmaker.Entity not found", name)
}

// GetAllIoTTwinMakerSceneResources retrieves all iottwinmaker.Scene items from an AWS CloudFormation template
func (t *Template) GetAllIoTTwinMakerSceneResources() map[string]*iottwinmaker.Scene[any] {
	results := map[string]*iottwinmaker.Scene[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iottwinmaker.Scene[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTwinMakerSceneWithName retrieves all iottwinmaker.Scene items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTwinMakerSceneWithName(name string) (*iottwinmaker.Scene[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iottwinmaker.Scene[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iottwinmaker.Scene not found", name)
}

// GetAllIoTTwinMakerSyncJobResources retrieves all iottwinmaker.SyncJob items from an AWS CloudFormation template
func (t *Template) GetAllIoTTwinMakerSyncJobResources() map[string]*iottwinmaker.SyncJob[any] {
	results := map[string]*iottwinmaker.SyncJob[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iottwinmaker.SyncJob[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTwinMakerSyncJobWithName retrieves all iottwinmaker.SyncJob items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTwinMakerSyncJobWithName(name string) (*iottwinmaker.SyncJob[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iottwinmaker.SyncJob[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iottwinmaker.SyncJob not found", name)
}

// GetAllIoTTwinMakerWorkspaceResources retrieves all iottwinmaker.Workspace items from an AWS CloudFormation template
func (t *Template) GetAllIoTTwinMakerWorkspaceResources() map[string]*iottwinmaker.Workspace[any] {
	results := map[string]*iottwinmaker.Workspace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iottwinmaker.Workspace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTTwinMakerWorkspaceWithName retrieves all iottwinmaker.Workspace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTTwinMakerWorkspaceWithName(name string) (*iottwinmaker.Workspace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iottwinmaker.Workspace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iottwinmaker.Workspace not found", name)
}

// GetAllIoTWirelessDestinationResources retrieves all iotwireless.Destination items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessDestinationResources() map[string]*iotwireless.Destination[any] {
	results := map[string]*iotwireless.Destination[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.Destination[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessDestinationWithName retrieves all iotwireless.Destination items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessDestinationWithName(name string) (*iotwireless.Destination[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.Destination[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.Destination not found", name)
}

// GetAllIoTWirelessDeviceProfileResources retrieves all iotwireless.DeviceProfile items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessDeviceProfileResources() map[string]*iotwireless.DeviceProfile[any] {
	results := map[string]*iotwireless.DeviceProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.DeviceProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessDeviceProfileWithName retrieves all iotwireless.DeviceProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessDeviceProfileWithName(name string) (*iotwireless.DeviceProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.DeviceProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.DeviceProfile not found", name)
}

// GetAllIoTWirelessFuotaTaskResources retrieves all iotwireless.FuotaTask items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessFuotaTaskResources() map[string]*iotwireless.FuotaTask[any] {
	results := map[string]*iotwireless.FuotaTask[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.FuotaTask[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessFuotaTaskWithName retrieves all iotwireless.FuotaTask items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessFuotaTaskWithName(name string) (*iotwireless.FuotaTask[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.FuotaTask[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.FuotaTask not found", name)
}

// GetAllIoTWirelessMulticastGroupResources retrieves all iotwireless.MulticastGroup items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessMulticastGroupResources() map[string]*iotwireless.MulticastGroup[any] {
	results := map[string]*iotwireless.MulticastGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.MulticastGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessMulticastGroupWithName retrieves all iotwireless.MulticastGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessMulticastGroupWithName(name string) (*iotwireless.MulticastGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.MulticastGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.MulticastGroup not found", name)
}

// GetAllIoTWirelessNetworkAnalyzerConfigurationResources retrieves all iotwireless.NetworkAnalyzerConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessNetworkAnalyzerConfigurationResources() map[string]*iotwireless.NetworkAnalyzerConfiguration[any] {
	results := map[string]*iotwireless.NetworkAnalyzerConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.NetworkAnalyzerConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessNetworkAnalyzerConfigurationWithName retrieves all iotwireless.NetworkAnalyzerConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessNetworkAnalyzerConfigurationWithName(name string) (*iotwireless.NetworkAnalyzerConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.NetworkAnalyzerConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.NetworkAnalyzerConfiguration not found", name)
}

// GetAllIoTWirelessPartnerAccountResources retrieves all iotwireless.PartnerAccount items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessPartnerAccountResources() map[string]*iotwireless.PartnerAccount[any] {
	results := map[string]*iotwireless.PartnerAccount[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.PartnerAccount[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessPartnerAccountWithName retrieves all iotwireless.PartnerAccount items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessPartnerAccountWithName(name string) (*iotwireless.PartnerAccount[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.PartnerAccount[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.PartnerAccount not found", name)
}

// GetAllIoTWirelessServiceProfileResources retrieves all iotwireless.ServiceProfile items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessServiceProfileResources() map[string]*iotwireless.ServiceProfile[any] {
	results := map[string]*iotwireless.ServiceProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.ServiceProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessServiceProfileWithName retrieves all iotwireless.ServiceProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessServiceProfileWithName(name string) (*iotwireless.ServiceProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.ServiceProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.ServiceProfile not found", name)
}

// GetAllIoTWirelessTaskDefinitionResources retrieves all iotwireless.TaskDefinition items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessTaskDefinitionResources() map[string]*iotwireless.TaskDefinition[any] {
	results := map[string]*iotwireless.TaskDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.TaskDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessTaskDefinitionWithName retrieves all iotwireless.TaskDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessTaskDefinitionWithName(name string) (*iotwireless.TaskDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.TaskDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.TaskDefinition not found", name)
}

// GetAllIoTWirelessWirelessDeviceResources retrieves all iotwireless.WirelessDevice items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessWirelessDeviceResources() map[string]*iotwireless.WirelessDevice[any] {
	results := map[string]*iotwireless.WirelessDevice[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.WirelessDevice[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessWirelessDeviceWithName retrieves all iotwireless.WirelessDevice items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessWirelessDeviceWithName(name string) (*iotwireless.WirelessDevice[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.WirelessDevice[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.WirelessDevice not found", name)
}

// GetAllIoTWirelessWirelessDeviceImportTaskResources retrieves all iotwireless.WirelessDeviceImportTask items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessWirelessDeviceImportTaskResources() map[string]*iotwireless.WirelessDeviceImportTask[any] {
	results := map[string]*iotwireless.WirelessDeviceImportTask[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.WirelessDeviceImportTask[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessWirelessDeviceImportTaskWithName retrieves all iotwireless.WirelessDeviceImportTask items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessWirelessDeviceImportTaskWithName(name string) (*iotwireless.WirelessDeviceImportTask[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.WirelessDeviceImportTask[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.WirelessDeviceImportTask not found", name)
}

// GetAllIoTWirelessWirelessGatewayResources retrieves all iotwireless.WirelessGateway items from an AWS CloudFormation template
func (t *Template) GetAllIoTWirelessWirelessGatewayResources() map[string]*iotwireless.WirelessGateway[any] {
	results := map[string]*iotwireless.WirelessGateway[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *iotwireless.WirelessGateway[any]:
			results[name] = resource
		}
	}
	return results
}

// GetIoTWirelessWirelessGatewayWithName retrieves all iotwireless.WirelessGateway items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetIoTWirelessWirelessGatewayWithName(name string) (*iotwireless.WirelessGateway[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *iotwireless.WirelessGateway[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type iotwireless.WirelessGateway not found", name)
}

// GetAllKMSAliasResources retrieves all kms.Alias items from an AWS CloudFormation template
func (t *Template) GetAllKMSAliasResources() map[string]*kms.Alias[any] {
	results := map[string]*kms.Alias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kms.Alias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKMSAliasWithName retrieves all kms.Alias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKMSAliasWithName(name string) (*kms.Alias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kms.Alias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kms.Alias not found", name)
}

// GetAllKMSKeyResources retrieves all kms.Key items from an AWS CloudFormation template
func (t *Template) GetAllKMSKeyResources() map[string]*kms.Key[any] {
	results := map[string]*kms.Key[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kms.Key[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKMSKeyWithName retrieves all kms.Key items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKMSKeyWithName(name string) (*kms.Key[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kms.Key[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kms.Key not found", name)
}

// GetAllKMSReplicaKeyResources retrieves all kms.ReplicaKey items from an AWS CloudFormation template
func (t *Template) GetAllKMSReplicaKeyResources() map[string]*kms.ReplicaKey[any] {
	results := map[string]*kms.ReplicaKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kms.ReplicaKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKMSReplicaKeyWithName retrieves all kms.ReplicaKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKMSReplicaKeyWithName(name string) (*kms.ReplicaKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kms.ReplicaKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kms.ReplicaKey not found", name)
}

// GetAllKafkaConnectConnectorResources retrieves all kafkaconnect.Connector items from an AWS CloudFormation template
func (t *Template) GetAllKafkaConnectConnectorResources() map[string]*kafkaconnect.Connector[any] {
	results := map[string]*kafkaconnect.Connector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kafkaconnect.Connector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKafkaConnectConnectorWithName retrieves all kafkaconnect.Connector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKafkaConnectConnectorWithName(name string) (*kafkaconnect.Connector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kafkaconnect.Connector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kafkaconnect.Connector not found", name)
}

// GetAllKendraDataSourceResources retrieves all kendra.DataSource items from an AWS CloudFormation template
func (t *Template) GetAllKendraDataSourceResources() map[string]*kendra.DataSource[any] {
	results := map[string]*kendra.DataSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kendra.DataSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKendraDataSourceWithName retrieves all kendra.DataSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKendraDataSourceWithName(name string) (*kendra.DataSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kendra.DataSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kendra.DataSource not found", name)
}

// GetAllKendraFaqResources retrieves all kendra.Faq items from an AWS CloudFormation template
func (t *Template) GetAllKendraFaqResources() map[string]*kendra.Faq[any] {
	results := map[string]*kendra.Faq[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kendra.Faq[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKendraFaqWithName retrieves all kendra.Faq items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKendraFaqWithName(name string) (*kendra.Faq[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kendra.Faq[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kendra.Faq not found", name)
}

// GetAllKendraIndexResources retrieves all kendra.Index items from an AWS CloudFormation template
func (t *Template) GetAllKendraIndexResources() map[string]*kendra.Index[any] {
	results := map[string]*kendra.Index[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kendra.Index[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKendraIndexWithName retrieves all kendra.Index items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKendraIndexWithName(name string) (*kendra.Index[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kendra.Index[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kendra.Index not found", name)
}

// GetAllKendraRankingExecutionPlanResources retrieves all kendraranking.ExecutionPlan items from an AWS CloudFormation template
func (t *Template) GetAllKendraRankingExecutionPlanResources() map[string]*kendraranking.ExecutionPlan[any] {
	results := map[string]*kendraranking.ExecutionPlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kendraranking.ExecutionPlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKendraRankingExecutionPlanWithName retrieves all kendraranking.ExecutionPlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKendraRankingExecutionPlanWithName(name string) (*kendraranking.ExecutionPlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kendraranking.ExecutionPlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kendraranking.ExecutionPlan not found", name)
}

// GetAllKinesisStreamResources retrieves all kinesis.Stream items from an AWS CloudFormation template
func (t *Template) GetAllKinesisStreamResources() map[string]*kinesis.Stream[any] {
	results := map[string]*kinesis.Stream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesis.Stream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisStreamWithName retrieves all kinesis.Stream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisStreamWithName(name string) (*kinesis.Stream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesis.Stream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesis.Stream not found", name)
}

// GetAllKinesisStreamConsumerResources retrieves all kinesis.StreamConsumer items from an AWS CloudFormation template
func (t *Template) GetAllKinesisStreamConsumerResources() map[string]*kinesis.StreamConsumer[any] {
	results := map[string]*kinesis.StreamConsumer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesis.StreamConsumer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisStreamConsumerWithName retrieves all kinesis.StreamConsumer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisStreamConsumerWithName(name string) (*kinesis.StreamConsumer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesis.StreamConsumer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesis.StreamConsumer not found", name)
}

// GetAllKinesisAnalyticsApplicationResources retrieves all kinesisanalytics.Application items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsApplicationResources() map[string]*kinesisanalytics.Application[any] {
	results := map[string]*kinesisanalytics.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalytics.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsApplicationWithName retrieves all kinesisanalytics.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsApplicationWithName(name string) (*kinesisanalytics.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalytics.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalytics.Application not found", name)
}

// GetAllKinesisAnalyticsApplicationOutputResources retrieves all kinesisanalytics.ApplicationOutput items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsApplicationOutputResources() map[string]*kinesisanalytics.ApplicationOutput[any] {
	results := map[string]*kinesisanalytics.ApplicationOutput[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalytics.ApplicationOutput[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsApplicationOutputWithName retrieves all kinesisanalytics.ApplicationOutput items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsApplicationOutputWithName(name string) (*kinesisanalytics.ApplicationOutput[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalytics.ApplicationOutput[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalytics.ApplicationOutput not found", name)
}

// GetAllKinesisAnalyticsApplicationReferenceDataSourceResources retrieves all kinesisanalytics.ApplicationReferenceDataSource items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsApplicationReferenceDataSourceResources() map[string]*kinesisanalytics.ApplicationReferenceDataSource[any] {
	results := map[string]*kinesisanalytics.ApplicationReferenceDataSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalytics.ApplicationReferenceDataSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsApplicationReferenceDataSourceWithName retrieves all kinesisanalytics.ApplicationReferenceDataSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsApplicationReferenceDataSourceWithName(name string) (*kinesisanalytics.ApplicationReferenceDataSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalytics.ApplicationReferenceDataSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalytics.ApplicationReferenceDataSource not found", name)
}

// GetAllKinesisAnalyticsV2ApplicationResources retrieves all kinesisanalyticsv2.Application items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsV2ApplicationResources() map[string]*kinesisanalyticsv2.Application[any] {
	results := map[string]*kinesisanalyticsv2.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsV2ApplicationWithName retrieves all kinesisanalyticsv2.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsV2ApplicationWithName(name string) (*kinesisanalyticsv2.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalyticsv2.Application not found", name)
}

// GetAllKinesisAnalyticsV2ApplicationCloudWatchLoggingOptionResources retrieves all kinesisanalyticsv2.ApplicationCloudWatchLoggingOption items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsV2ApplicationCloudWatchLoggingOptionResources() map[string]*kinesisanalyticsv2.ApplicationCloudWatchLoggingOption[any] {
	results := map[string]*kinesisanalyticsv2.ApplicationCloudWatchLoggingOption[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.ApplicationCloudWatchLoggingOption[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsV2ApplicationCloudWatchLoggingOptionWithName retrieves all kinesisanalyticsv2.ApplicationCloudWatchLoggingOption items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsV2ApplicationCloudWatchLoggingOptionWithName(name string) (*kinesisanalyticsv2.ApplicationCloudWatchLoggingOption[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.ApplicationCloudWatchLoggingOption[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalyticsv2.ApplicationCloudWatchLoggingOption not found", name)
}

// GetAllKinesisAnalyticsV2ApplicationOutputResources retrieves all kinesisanalyticsv2.ApplicationOutput items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsV2ApplicationOutputResources() map[string]*kinesisanalyticsv2.ApplicationOutput[any] {
	results := map[string]*kinesisanalyticsv2.ApplicationOutput[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.ApplicationOutput[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsV2ApplicationOutputWithName retrieves all kinesisanalyticsv2.ApplicationOutput items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsV2ApplicationOutputWithName(name string) (*kinesisanalyticsv2.ApplicationOutput[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.ApplicationOutput[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalyticsv2.ApplicationOutput not found", name)
}

// GetAllKinesisAnalyticsV2ApplicationReferenceDataSourceResources retrieves all kinesisanalyticsv2.ApplicationReferenceDataSource items from an AWS CloudFormation template
func (t *Template) GetAllKinesisAnalyticsV2ApplicationReferenceDataSourceResources() map[string]*kinesisanalyticsv2.ApplicationReferenceDataSource[any] {
	results := map[string]*kinesisanalyticsv2.ApplicationReferenceDataSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.ApplicationReferenceDataSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisAnalyticsV2ApplicationReferenceDataSourceWithName retrieves all kinesisanalyticsv2.ApplicationReferenceDataSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisAnalyticsV2ApplicationReferenceDataSourceWithName(name string) (*kinesisanalyticsv2.ApplicationReferenceDataSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisanalyticsv2.ApplicationReferenceDataSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisanalyticsv2.ApplicationReferenceDataSource not found", name)
}

// GetAllKinesisFirehoseDeliveryStreamResources retrieves all kinesisfirehose.DeliveryStream items from an AWS CloudFormation template
func (t *Template) GetAllKinesisFirehoseDeliveryStreamResources() map[string]*kinesisfirehose.DeliveryStream[any] {
	results := map[string]*kinesisfirehose.DeliveryStream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisfirehose.DeliveryStream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisFirehoseDeliveryStreamWithName retrieves all kinesisfirehose.DeliveryStream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisFirehoseDeliveryStreamWithName(name string) (*kinesisfirehose.DeliveryStream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisfirehose.DeliveryStream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisfirehose.DeliveryStream not found", name)
}

// GetAllKinesisVideoSignalingChannelResources retrieves all kinesisvideo.SignalingChannel items from an AWS CloudFormation template
func (t *Template) GetAllKinesisVideoSignalingChannelResources() map[string]*kinesisvideo.SignalingChannel[any] {
	results := map[string]*kinesisvideo.SignalingChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisvideo.SignalingChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisVideoSignalingChannelWithName retrieves all kinesisvideo.SignalingChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisVideoSignalingChannelWithName(name string) (*kinesisvideo.SignalingChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisvideo.SignalingChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisvideo.SignalingChannel not found", name)
}

// GetAllKinesisVideoStreamResources retrieves all kinesisvideo.Stream items from an AWS CloudFormation template
func (t *Template) GetAllKinesisVideoStreamResources() map[string]*kinesisvideo.Stream[any] {
	results := map[string]*kinesisvideo.Stream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *kinesisvideo.Stream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetKinesisVideoStreamWithName retrieves all kinesisvideo.Stream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetKinesisVideoStreamWithName(name string) (*kinesisvideo.Stream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *kinesisvideo.Stream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type kinesisvideo.Stream not found", name)
}

// GetAllLakeFormationDataCellsFilterResources retrieves all lakeformation.DataCellsFilter items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationDataCellsFilterResources() map[string]*lakeformation.DataCellsFilter[any] {
	results := map[string]*lakeformation.DataCellsFilter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.DataCellsFilter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationDataCellsFilterWithName retrieves all lakeformation.DataCellsFilter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationDataCellsFilterWithName(name string) (*lakeformation.DataCellsFilter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.DataCellsFilter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.DataCellsFilter not found", name)
}

// GetAllLakeFormationDataLakeSettingsResources retrieves all lakeformation.DataLakeSettings items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationDataLakeSettingsResources() map[string]*lakeformation.DataLakeSettings[any] {
	results := map[string]*lakeformation.DataLakeSettings[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.DataLakeSettings[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationDataLakeSettingsWithName retrieves all lakeformation.DataLakeSettings items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationDataLakeSettingsWithName(name string) (*lakeformation.DataLakeSettings[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.DataLakeSettings[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.DataLakeSettings not found", name)
}

// GetAllLakeFormationPermissionsResources retrieves all lakeformation.Permissions items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationPermissionsResources() map[string]*lakeformation.Permissions[any] {
	results := map[string]*lakeformation.Permissions[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.Permissions[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationPermissionsWithName retrieves all lakeformation.Permissions items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationPermissionsWithName(name string) (*lakeformation.Permissions[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.Permissions[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.Permissions not found", name)
}

// GetAllLakeFormationPrincipalPermissionsResources retrieves all lakeformation.PrincipalPermissions items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationPrincipalPermissionsResources() map[string]*lakeformation.PrincipalPermissions[any] {
	results := map[string]*lakeformation.PrincipalPermissions[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.PrincipalPermissions[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationPrincipalPermissionsWithName retrieves all lakeformation.PrincipalPermissions items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationPrincipalPermissionsWithName(name string) (*lakeformation.PrincipalPermissions[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.PrincipalPermissions[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.PrincipalPermissions not found", name)
}

// GetAllLakeFormationResourceResources retrieves all lakeformation.Resource items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationResourceResources() map[string]*lakeformation.Resource[any] {
	results := map[string]*lakeformation.Resource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.Resource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationResourceWithName retrieves all lakeformation.Resource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationResourceWithName(name string) (*lakeformation.Resource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.Resource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.Resource not found", name)
}

// GetAllLakeFormationTagResources retrieves all lakeformation.Tag items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationTagResources() map[string]*lakeformation.Tag[any] {
	results := map[string]*lakeformation.Tag[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.Tag[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationTagWithName retrieves all lakeformation.Tag items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationTagWithName(name string) (*lakeformation.Tag[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.Tag[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.Tag not found", name)
}

// GetAllLakeFormationTagAssociationResources retrieves all lakeformation.TagAssociation items from an AWS CloudFormation template
func (t *Template) GetAllLakeFormationTagAssociationResources() map[string]*lakeformation.TagAssociation[any] {
	results := map[string]*lakeformation.TagAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lakeformation.TagAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLakeFormationTagAssociationWithName retrieves all lakeformation.TagAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLakeFormationTagAssociationWithName(name string) (*lakeformation.TagAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lakeformation.TagAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lakeformation.TagAssociation not found", name)
}

// GetAllLambdaAliasResources retrieves all lambda.Alias items from an AWS CloudFormation template
func (t *Template) GetAllLambdaAliasResources() map[string]*lambda.Alias[any] {
	results := map[string]*lambda.Alias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.Alias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaAliasWithName retrieves all lambda.Alias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaAliasWithName(name string) (*lambda.Alias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.Alias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.Alias not found", name)
}

// GetAllLambdaCodeSigningConfigResources retrieves all lambda.CodeSigningConfig items from an AWS CloudFormation template
func (t *Template) GetAllLambdaCodeSigningConfigResources() map[string]*lambda.CodeSigningConfig[any] {
	results := map[string]*lambda.CodeSigningConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.CodeSigningConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaCodeSigningConfigWithName retrieves all lambda.CodeSigningConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaCodeSigningConfigWithName(name string) (*lambda.CodeSigningConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.CodeSigningConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.CodeSigningConfig not found", name)
}

// GetAllLambdaEventInvokeConfigResources retrieves all lambda.EventInvokeConfig items from an AWS CloudFormation template
func (t *Template) GetAllLambdaEventInvokeConfigResources() map[string]*lambda.EventInvokeConfig[any] {
	results := map[string]*lambda.EventInvokeConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.EventInvokeConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaEventInvokeConfigWithName retrieves all lambda.EventInvokeConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaEventInvokeConfigWithName(name string) (*lambda.EventInvokeConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.EventInvokeConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.EventInvokeConfig not found", name)
}

// GetAllLambdaEventSourceMappingResources retrieves all lambda.EventSourceMapping items from an AWS CloudFormation template
func (t *Template) GetAllLambdaEventSourceMappingResources() map[string]*lambda.EventSourceMapping[any] {
	results := map[string]*lambda.EventSourceMapping[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.EventSourceMapping[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaEventSourceMappingWithName retrieves all lambda.EventSourceMapping items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaEventSourceMappingWithName(name string) (*lambda.EventSourceMapping[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.EventSourceMapping[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.EventSourceMapping not found", name)
}

// GetAllLambdaFunctionResources retrieves all lambda.Function items from an AWS CloudFormation template
func (t *Template) GetAllLambdaFunctionResources() map[string]*lambda.Function[any] {
	results := map[string]*lambda.Function[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.Function[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaFunctionWithName retrieves all lambda.Function items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaFunctionWithName(name string) (*lambda.Function[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.Function[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.Function not found", name)
}

// GetAllLambdaLayerVersionResources retrieves all lambda.LayerVersion items from an AWS CloudFormation template
func (t *Template) GetAllLambdaLayerVersionResources() map[string]*lambda.LayerVersion[any] {
	results := map[string]*lambda.LayerVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.LayerVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaLayerVersionWithName retrieves all lambda.LayerVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaLayerVersionWithName(name string) (*lambda.LayerVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.LayerVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.LayerVersion not found", name)
}

// GetAllLambdaLayerVersionPermissionResources retrieves all lambda.LayerVersionPermission items from an AWS CloudFormation template
func (t *Template) GetAllLambdaLayerVersionPermissionResources() map[string]*lambda.LayerVersionPermission[any] {
	results := map[string]*lambda.LayerVersionPermission[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.LayerVersionPermission[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaLayerVersionPermissionWithName retrieves all lambda.LayerVersionPermission items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaLayerVersionPermissionWithName(name string) (*lambda.LayerVersionPermission[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.LayerVersionPermission[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.LayerVersionPermission not found", name)
}

// GetAllLambdaPermissionResources retrieves all lambda.Permission items from an AWS CloudFormation template
func (t *Template) GetAllLambdaPermissionResources() map[string]*lambda.Permission[any] {
	results := map[string]*lambda.Permission[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.Permission[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaPermissionWithName retrieves all lambda.Permission items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaPermissionWithName(name string) (*lambda.Permission[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.Permission[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.Permission not found", name)
}

// GetAllLambdaUrlResources retrieves all lambda.Url items from an AWS CloudFormation template
func (t *Template) GetAllLambdaUrlResources() map[string]*lambda.Url[any] {
	results := map[string]*lambda.Url[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.Url[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaUrlWithName retrieves all lambda.Url items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaUrlWithName(name string) (*lambda.Url[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.Url[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.Url not found", name)
}

// GetAllLambdaVersionResources retrieves all lambda.Version items from an AWS CloudFormation template
func (t *Template) GetAllLambdaVersionResources() map[string]*lambda.Version[any] {
	results := map[string]*lambda.Version[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lambda.Version[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLambdaVersionWithName retrieves all lambda.Version items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLambdaVersionWithName(name string) (*lambda.Version[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lambda.Version[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lambda.Version not found", name)
}

// GetAllLexBotResources retrieves all lex.Bot items from an AWS CloudFormation template
func (t *Template) GetAllLexBotResources() map[string]*lex.Bot[any] {
	results := map[string]*lex.Bot[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lex.Bot[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLexBotWithName retrieves all lex.Bot items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLexBotWithName(name string) (*lex.Bot[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lex.Bot[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lex.Bot not found", name)
}

// GetAllLexBotAliasResources retrieves all lex.BotAlias items from an AWS CloudFormation template
func (t *Template) GetAllLexBotAliasResources() map[string]*lex.BotAlias[any] {
	results := map[string]*lex.BotAlias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lex.BotAlias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLexBotAliasWithName retrieves all lex.BotAlias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLexBotAliasWithName(name string) (*lex.BotAlias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lex.BotAlias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lex.BotAlias not found", name)
}

// GetAllLexBotVersionResources retrieves all lex.BotVersion items from an AWS CloudFormation template
func (t *Template) GetAllLexBotVersionResources() map[string]*lex.BotVersion[any] {
	results := map[string]*lex.BotVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lex.BotVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLexBotVersionWithName retrieves all lex.BotVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLexBotVersionWithName(name string) (*lex.BotVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lex.BotVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lex.BotVersion not found", name)
}

// GetAllLexResourcePolicyResources retrieves all lex.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllLexResourcePolicyResources() map[string]*lex.ResourcePolicy[any] {
	results := map[string]*lex.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lex.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLexResourcePolicyWithName retrieves all lex.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLexResourcePolicyWithName(name string) (*lex.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lex.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lex.ResourcePolicy not found", name)
}

// GetAllLicenseManagerGrantResources retrieves all licensemanager.Grant items from an AWS CloudFormation template
func (t *Template) GetAllLicenseManagerGrantResources() map[string]*licensemanager.Grant[any] {
	results := map[string]*licensemanager.Grant[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *licensemanager.Grant[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLicenseManagerGrantWithName retrieves all licensemanager.Grant items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLicenseManagerGrantWithName(name string) (*licensemanager.Grant[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *licensemanager.Grant[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type licensemanager.Grant not found", name)
}

// GetAllLicenseManagerLicenseResources retrieves all licensemanager.License items from an AWS CloudFormation template
func (t *Template) GetAllLicenseManagerLicenseResources() map[string]*licensemanager.License[any] {
	results := map[string]*licensemanager.License[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *licensemanager.License[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLicenseManagerLicenseWithName retrieves all licensemanager.License items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLicenseManagerLicenseWithName(name string) (*licensemanager.License[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *licensemanager.License[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type licensemanager.License not found", name)
}

// GetAllLightsailAlarmResources retrieves all lightsail.Alarm items from an AWS CloudFormation template
func (t *Template) GetAllLightsailAlarmResources() map[string]*lightsail.Alarm[any] {
	results := map[string]*lightsail.Alarm[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Alarm[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailAlarmWithName retrieves all lightsail.Alarm items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailAlarmWithName(name string) (*lightsail.Alarm[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Alarm[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Alarm not found", name)
}

// GetAllLightsailBucketResources retrieves all lightsail.Bucket items from an AWS CloudFormation template
func (t *Template) GetAllLightsailBucketResources() map[string]*lightsail.Bucket[any] {
	results := map[string]*lightsail.Bucket[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Bucket[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailBucketWithName retrieves all lightsail.Bucket items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailBucketWithName(name string) (*lightsail.Bucket[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Bucket[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Bucket not found", name)
}

// GetAllLightsailCertificateResources retrieves all lightsail.Certificate items from an AWS CloudFormation template
func (t *Template) GetAllLightsailCertificateResources() map[string]*lightsail.Certificate[any] {
	results := map[string]*lightsail.Certificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Certificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailCertificateWithName retrieves all lightsail.Certificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailCertificateWithName(name string) (*lightsail.Certificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Certificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Certificate not found", name)
}

// GetAllLightsailContainerResources retrieves all lightsail.Container items from an AWS CloudFormation template
func (t *Template) GetAllLightsailContainerResources() map[string]*lightsail.Container[any] {
	results := map[string]*lightsail.Container[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Container[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailContainerWithName retrieves all lightsail.Container items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailContainerWithName(name string) (*lightsail.Container[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Container[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Container not found", name)
}

// GetAllLightsailDatabaseResources retrieves all lightsail.Database items from an AWS CloudFormation template
func (t *Template) GetAllLightsailDatabaseResources() map[string]*lightsail.Database[any] {
	results := map[string]*lightsail.Database[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Database[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailDatabaseWithName retrieves all lightsail.Database items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailDatabaseWithName(name string) (*lightsail.Database[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Database[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Database not found", name)
}

// GetAllLightsailDiskResources retrieves all lightsail.Disk items from an AWS CloudFormation template
func (t *Template) GetAllLightsailDiskResources() map[string]*lightsail.Disk[any] {
	results := map[string]*lightsail.Disk[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Disk[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailDiskWithName retrieves all lightsail.Disk items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailDiskWithName(name string) (*lightsail.Disk[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Disk[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Disk not found", name)
}

// GetAllLightsailDistributionResources retrieves all lightsail.Distribution items from an AWS CloudFormation template
func (t *Template) GetAllLightsailDistributionResources() map[string]*lightsail.Distribution[any] {
	results := map[string]*lightsail.Distribution[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Distribution[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailDistributionWithName retrieves all lightsail.Distribution items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailDistributionWithName(name string) (*lightsail.Distribution[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Distribution[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Distribution not found", name)
}

// GetAllLightsailInstanceResources retrieves all lightsail.Instance items from an AWS CloudFormation template
func (t *Template) GetAllLightsailInstanceResources() map[string]*lightsail.Instance[any] {
	results := map[string]*lightsail.Instance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.Instance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailInstanceWithName retrieves all lightsail.Instance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailInstanceWithName(name string) (*lightsail.Instance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.Instance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.Instance not found", name)
}

// GetAllLightsailLoadBalancerResources retrieves all lightsail.LoadBalancer items from an AWS CloudFormation template
func (t *Template) GetAllLightsailLoadBalancerResources() map[string]*lightsail.LoadBalancer[any] {
	results := map[string]*lightsail.LoadBalancer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.LoadBalancer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailLoadBalancerWithName retrieves all lightsail.LoadBalancer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailLoadBalancerWithName(name string) (*lightsail.LoadBalancer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.LoadBalancer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.LoadBalancer not found", name)
}

// GetAllLightsailLoadBalancerTlsCertificateResources retrieves all lightsail.LoadBalancerTlsCertificate items from an AWS CloudFormation template
func (t *Template) GetAllLightsailLoadBalancerTlsCertificateResources() map[string]*lightsail.LoadBalancerTlsCertificate[any] {
	results := map[string]*lightsail.LoadBalancerTlsCertificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.LoadBalancerTlsCertificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailLoadBalancerTlsCertificateWithName retrieves all lightsail.LoadBalancerTlsCertificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailLoadBalancerTlsCertificateWithName(name string) (*lightsail.LoadBalancerTlsCertificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.LoadBalancerTlsCertificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.LoadBalancerTlsCertificate not found", name)
}

// GetAllLightsailStaticIpResources retrieves all lightsail.StaticIp items from an AWS CloudFormation template
func (t *Template) GetAllLightsailStaticIpResources() map[string]*lightsail.StaticIp[any] {
	results := map[string]*lightsail.StaticIp[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lightsail.StaticIp[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLightsailStaticIpWithName retrieves all lightsail.StaticIp items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLightsailStaticIpWithName(name string) (*lightsail.StaticIp[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lightsail.StaticIp[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lightsail.StaticIp not found", name)
}

// GetAllLocationGeofenceCollectionResources retrieves all location.GeofenceCollection items from an AWS CloudFormation template
func (t *Template) GetAllLocationGeofenceCollectionResources() map[string]*location.GeofenceCollection[any] {
	results := map[string]*location.GeofenceCollection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *location.GeofenceCollection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLocationGeofenceCollectionWithName retrieves all location.GeofenceCollection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLocationGeofenceCollectionWithName(name string) (*location.GeofenceCollection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *location.GeofenceCollection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type location.GeofenceCollection not found", name)
}

// GetAllLocationMapResources retrieves all location.Map items from an AWS CloudFormation template
func (t *Template) GetAllLocationMapResources() map[string]*location.Map[any] {
	results := map[string]*location.Map[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *location.Map[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLocationMapWithName retrieves all location.Map items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLocationMapWithName(name string) (*location.Map[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *location.Map[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type location.Map not found", name)
}

// GetAllLocationPlaceIndexResources retrieves all location.PlaceIndex items from an AWS CloudFormation template
func (t *Template) GetAllLocationPlaceIndexResources() map[string]*location.PlaceIndex[any] {
	results := map[string]*location.PlaceIndex[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *location.PlaceIndex[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLocationPlaceIndexWithName retrieves all location.PlaceIndex items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLocationPlaceIndexWithName(name string) (*location.PlaceIndex[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *location.PlaceIndex[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type location.PlaceIndex not found", name)
}

// GetAllLocationRouteCalculatorResources retrieves all location.RouteCalculator items from an AWS CloudFormation template
func (t *Template) GetAllLocationRouteCalculatorResources() map[string]*location.RouteCalculator[any] {
	results := map[string]*location.RouteCalculator[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *location.RouteCalculator[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLocationRouteCalculatorWithName retrieves all location.RouteCalculator items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLocationRouteCalculatorWithName(name string) (*location.RouteCalculator[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *location.RouteCalculator[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type location.RouteCalculator not found", name)
}

// GetAllLocationTrackerResources retrieves all location.Tracker items from an AWS CloudFormation template
func (t *Template) GetAllLocationTrackerResources() map[string]*location.Tracker[any] {
	results := map[string]*location.Tracker[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *location.Tracker[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLocationTrackerWithName retrieves all location.Tracker items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLocationTrackerWithName(name string) (*location.Tracker[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *location.Tracker[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type location.Tracker not found", name)
}

// GetAllLocationTrackerConsumerResources retrieves all location.TrackerConsumer items from an AWS CloudFormation template
func (t *Template) GetAllLocationTrackerConsumerResources() map[string]*location.TrackerConsumer[any] {
	results := map[string]*location.TrackerConsumer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *location.TrackerConsumer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLocationTrackerConsumerWithName retrieves all location.TrackerConsumer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLocationTrackerConsumerWithName(name string) (*location.TrackerConsumer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *location.TrackerConsumer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type location.TrackerConsumer not found", name)
}

// GetAllLogsDestinationResources retrieves all logs.Destination items from an AWS CloudFormation template
func (t *Template) GetAllLogsDestinationResources() map[string]*logs.Destination[any] {
	results := map[string]*logs.Destination[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.Destination[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsDestinationWithName retrieves all logs.Destination items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsDestinationWithName(name string) (*logs.Destination[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.Destination[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.Destination not found", name)
}

// GetAllLogsLogGroupResources retrieves all logs.LogGroup items from an AWS CloudFormation template
func (t *Template) GetAllLogsLogGroupResources() map[string]*logs.LogGroup[any] {
	results := map[string]*logs.LogGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.LogGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsLogGroupWithName retrieves all logs.LogGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsLogGroupWithName(name string) (*logs.LogGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.LogGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.LogGroup not found", name)
}

// GetAllLogsLogStreamResources retrieves all logs.LogStream items from an AWS CloudFormation template
func (t *Template) GetAllLogsLogStreamResources() map[string]*logs.LogStream[any] {
	results := map[string]*logs.LogStream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.LogStream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsLogStreamWithName retrieves all logs.LogStream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsLogStreamWithName(name string) (*logs.LogStream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.LogStream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.LogStream not found", name)
}

// GetAllLogsMetricFilterResources retrieves all logs.MetricFilter items from an AWS CloudFormation template
func (t *Template) GetAllLogsMetricFilterResources() map[string]*logs.MetricFilter[any] {
	results := map[string]*logs.MetricFilter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.MetricFilter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsMetricFilterWithName retrieves all logs.MetricFilter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsMetricFilterWithName(name string) (*logs.MetricFilter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.MetricFilter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.MetricFilter not found", name)
}

// GetAllLogsQueryDefinitionResources retrieves all logs.QueryDefinition items from an AWS CloudFormation template
func (t *Template) GetAllLogsQueryDefinitionResources() map[string]*logs.QueryDefinition[any] {
	results := map[string]*logs.QueryDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.QueryDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsQueryDefinitionWithName retrieves all logs.QueryDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsQueryDefinitionWithName(name string) (*logs.QueryDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.QueryDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.QueryDefinition not found", name)
}

// GetAllLogsResourcePolicyResources retrieves all logs.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllLogsResourcePolicyResources() map[string]*logs.ResourcePolicy[any] {
	results := map[string]*logs.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsResourcePolicyWithName retrieves all logs.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsResourcePolicyWithName(name string) (*logs.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.ResourcePolicy not found", name)
}

// GetAllLogsSubscriptionFilterResources retrieves all logs.SubscriptionFilter items from an AWS CloudFormation template
func (t *Template) GetAllLogsSubscriptionFilterResources() map[string]*logs.SubscriptionFilter[any] {
	results := map[string]*logs.SubscriptionFilter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *logs.SubscriptionFilter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLogsSubscriptionFilterWithName retrieves all logs.SubscriptionFilter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLogsSubscriptionFilterWithName(name string) (*logs.SubscriptionFilter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *logs.SubscriptionFilter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type logs.SubscriptionFilter not found", name)
}

// GetAllLookoutEquipmentInferenceSchedulerResources retrieves all lookoutequipment.InferenceScheduler items from an AWS CloudFormation template
func (t *Template) GetAllLookoutEquipmentInferenceSchedulerResources() map[string]*lookoutequipment.InferenceScheduler[any] {
	results := map[string]*lookoutequipment.InferenceScheduler[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lookoutequipment.InferenceScheduler[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLookoutEquipmentInferenceSchedulerWithName retrieves all lookoutequipment.InferenceScheduler items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLookoutEquipmentInferenceSchedulerWithName(name string) (*lookoutequipment.InferenceScheduler[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lookoutequipment.InferenceScheduler[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lookoutequipment.InferenceScheduler not found", name)
}

// GetAllLookoutMetricsAlertResources retrieves all lookoutmetrics.Alert items from an AWS CloudFormation template
func (t *Template) GetAllLookoutMetricsAlertResources() map[string]*lookoutmetrics.Alert[any] {
	results := map[string]*lookoutmetrics.Alert[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lookoutmetrics.Alert[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLookoutMetricsAlertWithName retrieves all lookoutmetrics.Alert items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLookoutMetricsAlertWithName(name string) (*lookoutmetrics.Alert[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lookoutmetrics.Alert[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lookoutmetrics.Alert not found", name)
}

// GetAllLookoutMetricsAnomalyDetectorResources retrieves all lookoutmetrics.AnomalyDetector items from an AWS CloudFormation template
func (t *Template) GetAllLookoutMetricsAnomalyDetectorResources() map[string]*lookoutmetrics.AnomalyDetector[any] {
	results := map[string]*lookoutmetrics.AnomalyDetector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lookoutmetrics.AnomalyDetector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLookoutMetricsAnomalyDetectorWithName retrieves all lookoutmetrics.AnomalyDetector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLookoutMetricsAnomalyDetectorWithName(name string) (*lookoutmetrics.AnomalyDetector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lookoutmetrics.AnomalyDetector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lookoutmetrics.AnomalyDetector not found", name)
}

// GetAllLookoutVisionProjectResources retrieves all lookoutvision.Project items from an AWS CloudFormation template
func (t *Template) GetAllLookoutVisionProjectResources() map[string]*lookoutvision.Project[any] {
	results := map[string]*lookoutvision.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *lookoutvision.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetLookoutVisionProjectWithName retrieves all lookoutvision.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetLookoutVisionProjectWithName(name string) (*lookoutvision.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *lookoutvision.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type lookoutvision.Project not found", name)
}

// GetAllM2ApplicationResources retrieves all m2.Application items from an AWS CloudFormation template
func (t *Template) GetAllM2ApplicationResources() map[string]*m2.Application[any] {
	results := map[string]*m2.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *m2.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetM2ApplicationWithName retrieves all m2.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetM2ApplicationWithName(name string) (*m2.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *m2.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type m2.Application not found", name)
}

// GetAllM2EnvironmentResources retrieves all m2.Environment items from an AWS CloudFormation template
func (t *Template) GetAllM2EnvironmentResources() map[string]*m2.Environment[any] {
	results := map[string]*m2.Environment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *m2.Environment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetM2EnvironmentWithName retrieves all m2.Environment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetM2EnvironmentWithName(name string) (*m2.Environment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *m2.Environment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type m2.Environment not found", name)
}

// GetAllMSKBatchScramSecretResources retrieves all msk.BatchScramSecret items from an AWS CloudFormation template
func (t *Template) GetAllMSKBatchScramSecretResources() map[string]*msk.BatchScramSecret[any] {
	results := map[string]*msk.BatchScramSecret[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *msk.BatchScramSecret[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMSKBatchScramSecretWithName retrieves all msk.BatchScramSecret items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMSKBatchScramSecretWithName(name string) (*msk.BatchScramSecret[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *msk.BatchScramSecret[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type msk.BatchScramSecret not found", name)
}

// GetAllMSKClusterResources retrieves all msk.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllMSKClusterResources() map[string]*msk.Cluster[any] {
	results := map[string]*msk.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *msk.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMSKClusterWithName retrieves all msk.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMSKClusterWithName(name string) (*msk.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *msk.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type msk.Cluster not found", name)
}

// GetAllMSKClusterPolicyResources retrieves all msk.ClusterPolicy items from an AWS CloudFormation template
func (t *Template) GetAllMSKClusterPolicyResources() map[string]*msk.ClusterPolicy[any] {
	results := map[string]*msk.ClusterPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *msk.ClusterPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMSKClusterPolicyWithName retrieves all msk.ClusterPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMSKClusterPolicyWithName(name string) (*msk.ClusterPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *msk.ClusterPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type msk.ClusterPolicy not found", name)
}

// GetAllMSKConfigurationResources retrieves all msk.Configuration items from an AWS CloudFormation template
func (t *Template) GetAllMSKConfigurationResources() map[string]*msk.Configuration[any] {
	results := map[string]*msk.Configuration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *msk.Configuration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMSKConfigurationWithName retrieves all msk.Configuration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMSKConfigurationWithName(name string) (*msk.Configuration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *msk.Configuration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type msk.Configuration not found", name)
}

// GetAllMSKServerlessClusterResources retrieves all msk.ServerlessCluster items from an AWS CloudFormation template
func (t *Template) GetAllMSKServerlessClusterResources() map[string]*msk.ServerlessCluster[any] {
	results := map[string]*msk.ServerlessCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *msk.ServerlessCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMSKServerlessClusterWithName retrieves all msk.ServerlessCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMSKServerlessClusterWithName(name string) (*msk.ServerlessCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *msk.ServerlessCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type msk.ServerlessCluster not found", name)
}

// GetAllMSKVpcConnectionResources retrieves all msk.VpcConnection items from an AWS CloudFormation template
func (t *Template) GetAllMSKVpcConnectionResources() map[string]*msk.VpcConnection[any] {
	results := map[string]*msk.VpcConnection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *msk.VpcConnection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMSKVpcConnectionWithName retrieves all msk.VpcConnection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMSKVpcConnectionWithName(name string) (*msk.VpcConnection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *msk.VpcConnection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type msk.VpcConnection not found", name)
}

// GetAllMWAAEnvironmentResources retrieves all mwaa.Environment items from an AWS CloudFormation template
func (t *Template) GetAllMWAAEnvironmentResources() map[string]*mwaa.Environment[any] {
	results := map[string]*mwaa.Environment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mwaa.Environment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMWAAEnvironmentWithName retrieves all mwaa.Environment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMWAAEnvironmentWithName(name string) (*mwaa.Environment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mwaa.Environment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mwaa.Environment not found", name)
}

// GetAllMacieAllowListResources retrieves all macie.AllowList items from an AWS CloudFormation template
func (t *Template) GetAllMacieAllowListResources() map[string]*macie.AllowList[any] {
	results := map[string]*macie.AllowList[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *macie.AllowList[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMacieAllowListWithName retrieves all macie.AllowList items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMacieAllowListWithName(name string) (*macie.AllowList[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *macie.AllowList[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type macie.AllowList not found", name)
}

// GetAllMacieCustomDataIdentifierResources retrieves all macie.CustomDataIdentifier items from an AWS CloudFormation template
func (t *Template) GetAllMacieCustomDataIdentifierResources() map[string]*macie.CustomDataIdentifier[any] {
	results := map[string]*macie.CustomDataIdentifier[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *macie.CustomDataIdentifier[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMacieCustomDataIdentifierWithName retrieves all macie.CustomDataIdentifier items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMacieCustomDataIdentifierWithName(name string) (*macie.CustomDataIdentifier[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *macie.CustomDataIdentifier[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type macie.CustomDataIdentifier not found", name)
}

// GetAllMacieFindingsFilterResources retrieves all macie.FindingsFilter items from an AWS CloudFormation template
func (t *Template) GetAllMacieFindingsFilterResources() map[string]*macie.FindingsFilter[any] {
	results := map[string]*macie.FindingsFilter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *macie.FindingsFilter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMacieFindingsFilterWithName retrieves all macie.FindingsFilter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMacieFindingsFilterWithName(name string) (*macie.FindingsFilter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *macie.FindingsFilter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type macie.FindingsFilter not found", name)
}

// GetAllMacieSessionResources retrieves all macie.Session items from an AWS CloudFormation template
func (t *Template) GetAllMacieSessionResources() map[string]*macie.Session[any] {
	results := map[string]*macie.Session[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *macie.Session[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMacieSessionWithName retrieves all macie.Session items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMacieSessionWithName(name string) (*macie.Session[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *macie.Session[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type macie.Session not found", name)
}

// GetAllManagedBlockchainAccessorResources retrieves all managedblockchain.Accessor items from an AWS CloudFormation template
func (t *Template) GetAllManagedBlockchainAccessorResources() map[string]*managedblockchain.Accessor[any] {
	results := map[string]*managedblockchain.Accessor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *managedblockchain.Accessor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetManagedBlockchainAccessorWithName retrieves all managedblockchain.Accessor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetManagedBlockchainAccessorWithName(name string) (*managedblockchain.Accessor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *managedblockchain.Accessor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type managedblockchain.Accessor not found", name)
}

// GetAllManagedBlockchainMemberResources retrieves all managedblockchain.Member items from an AWS CloudFormation template
func (t *Template) GetAllManagedBlockchainMemberResources() map[string]*managedblockchain.Member[any] {
	results := map[string]*managedblockchain.Member[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *managedblockchain.Member[any]:
			results[name] = resource
		}
	}
	return results
}

// GetManagedBlockchainMemberWithName retrieves all managedblockchain.Member items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetManagedBlockchainMemberWithName(name string) (*managedblockchain.Member[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *managedblockchain.Member[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type managedblockchain.Member not found", name)
}

// GetAllManagedBlockchainNodeResources retrieves all managedblockchain.Node items from an AWS CloudFormation template
func (t *Template) GetAllManagedBlockchainNodeResources() map[string]*managedblockchain.Node[any] {
	results := map[string]*managedblockchain.Node[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *managedblockchain.Node[any]:
			results[name] = resource
		}
	}
	return results
}

// GetManagedBlockchainNodeWithName retrieves all managedblockchain.Node items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetManagedBlockchainNodeWithName(name string) (*managedblockchain.Node[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *managedblockchain.Node[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type managedblockchain.Node not found", name)
}

// GetAllMediaConnectFlowResources retrieves all mediaconnect.Flow items from an AWS CloudFormation template
func (t *Template) GetAllMediaConnectFlowResources() map[string]*mediaconnect.Flow[any] {
	results := map[string]*mediaconnect.Flow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconnect.Flow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConnectFlowWithName retrieves all mediaconnect.Flow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConnectFlowWithName(name string) (*mediaconnect.Flow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconnect.Flow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconnect.Flow not found", name)
}

// GetAllMediaConnectFlowEntitlementResources retrieves all mediaconnect.FlowEntitlement items from an AWS CloudFormation template
func (t *Template) GetAllMediaConnectFlowEntitlementResources() map[string]*mediaconnect.FlowEntitlement[any] {
	results := map[string]*mediaconnect.FlowEntitlement[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowEntitlement[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConnectFlowEntitlementWithName retrieves all mediaconnect.FlowEntitlement items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConnectFlowEntitlementWithName(name string) (*mediaconnect.FlowEntitlement[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowEntitlement[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconnect.FlowEntitlement not found", name)
}

// GetAllMediaConnectFlowOutputResources retrieves all mediaconnect.FlowOutput items from an AWS CloudFormation template
func (t *Template) GetAllMediaConnectFlowOutputResources() map[string]*mediaconnect.FlowOutput[any] {
	results := map[string]*mediaconnect.FlowOutput[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowOutput[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConnectFlowOutputWithName retrieves all mediaconnect.FlowOutput items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConnectFlowOutputWithName(name string) (*mediaconnect.FlowOutput[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowOutput[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconnect.FlowOutput not found", name)
}

// GetAllMediaConnectFlowSourceResources retrieves all mediaconnect.FlowSource items from an AWS CloudFormation template
func (t *Template) GetAllMediaConnectFlowSourceResources() map[string]*mediaconnect.FlowSource[any] {
	results := map[string]*mediaconnect.FlowSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConnectFlowSourceWithName retrieves all mediaconnect.FlowSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConnectFlowSourceWithName(name string) (*mediaconnect.FlowSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconnect.FlowSource not found", name)
}

// GetAllMediaConnectFlowVpcInterfaceResources retrieves all mediaconnect.FlowVpcInterface items from an AWS CloudFormation template
func (t *Template) GetAllMediaConnectFlowVpcInterfaceResources() map[string]*mediaconnect.FlowVpcInterface[any] {
	results := map[string]*mediaconnect.FlowVpcInterface[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowVpcInterface[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConnectFlowVpcInterfaceWithName retrieves all mediaconnect.FlowVpcInterface items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConnectFlowVpcInterfaceWithName(name string) (*mediaconnect.FlowVpcInterface[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconnect.FlowVpcInterface[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconnect.FlowVpcInterface not found", name)
}

// GetAllMediaConvertJobTemplateResources retrieves all mediaconvert.JobTemplate items from an AWS CloudFormation template
func (t *Template) GetAllMediaConvertJobTemplateResources() map[string]*mediaconvert.JobTemplate[any] {
	results := map[string]*mediaconvert.JobTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconvert.JobTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConvertJobTemplateWithName retrieves all mediaconvert.JobTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConvertJobTemplateWithName(name string) (*mediaconvert.JobTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconvert.JobTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconvert.JobTemplate not found", name)
}

// GetAllMediaConvertPresetResources retrieves all mediaconvert.Preset items from an AWS CloudFormation template
func (t *Template) GetAllMediaConvertPresetResources() map[string]*mediaconvert.Preset[any] {
	results := map[string]*mediaconvert.Preset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconvert.Preset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConvertPresetWithName retrieves all mediaconvert.Preset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConvertPresetWithName(name string) (*mediaconvert.Preset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconvert.Preset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconvert.Preset not found", name)
}

// GetAllMediaConvertQueueResources retrieves all mediaconvert.Queue items from an AWS CloudFormation template
func (t *Template) GetAllMediaConvertQueueResources() map[string]*mediaconvert.Queue[any] {
	results := map[string]*mediaconvert.Queue[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediaconvert.Queue[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaConvertQueueWithName retrieves all mediaconvert.Queue items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaConvertQueueWithName(name string) (*mediaconvert.Queue[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediaconvert.Queue[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediaconvert.Queue not found", name)
}

// GetAllMediaLiveChannelResources retrieves all medialive.Channel items from an AWS CloudFormation template
func (t *Template) GetAllMediaLiveChannelResources() map[string]*medialive.Channel[any] {
	results := map[string]*medialive.Channel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *medialive.Channel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaLiveChannelWithName retrieves all medialive.Channel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaLiveChannelWithName(name string) (*medialive.Channel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *medialive.Channel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type medialive.Channel not found", name)
}

// GetAllMediaLiveInputResources retrieves all medialive.Input items from an AWS CloudFormation template
func (t *Template) GetAllMediaLiveInputResources() map[string]*medialive.Input[any] {
	results := map[string]*medialive.Input[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *medialive.Input[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaLiveInputWithName retrieves all medialive.Input items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaLiveInputWithName(name string) (*medialive.Input[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *medialive.Input[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type medialive.Input not found", name)
}

// GetAllMediaLiveInputSecurityGroupResources retrieves all medialive.InputSecurityGroup items from an AWS CloudFormation template
func (t *Template) GetAllMediaLiveInputSecurityGroupResources() map[string]*medialive.InputSecurityGroup[any] {
	results := map[string]*medialive.InputSecurityGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *medialive.InputSecurityGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaLiveInputSecurityGroupWithName retrieves all medialive.InputSecurityGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaLiveInputSecurityGroupWithName(name string) (*medialive.InputSecurityGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *medialive.InputSecurityGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type medialive.InputSecurityGroup not found", name)
}

// GetAllMediaPackageAssetResources retrieves all mediapackage.Asset items from an AWS CloudFormation template
func (t *Template) GetAllMediaPackageAssetResources() map[string]*mediapackage.Asset[any] {
	results := map[string]*mediapackage.Asset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediapackage.Asset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaPackageAssetWithName retrieves all mediapackage.Asset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaPackageAssetWithName(name string) (*mediapackage.Asset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediapackage.Asset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediapackage.Asset not found", name)
}

// GetAllMediaPackageChannelResources retrieves all mediapackage.Channel items from an AWS CloudFormation template
func (t *Template) GetAllMediaPackageChannelResources() map[string]*mediapackage.Channel[any] {
	results := map[string]*mediapackage.Channel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediapackage.Channel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaPackageChannelWithName retrieves all mediapackage.Channel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaPackageChannelWithName(name string) (*mediapackage.Channel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediapackage.Channel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediapackage.Channel not found", name)
}

// GetAllMediaPackageOriginEndpointResources retrieves all mediapackage.OriginEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllMediaPackageOriginEndpointResources() map[string]*mediapackage.OriginEndpoint[any] {
	results := map[string]*mediapackage.OriginEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediapackage.OriginEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaPackageOriginEndpointWithName retrieves all mediapackage.OriginEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaPackageOriginEndpointWithName(name string) (*mediapackage.OriginEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediapackage.OriginEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediapackage.OriginEndpoint not found", name)
}

// GetAllMediaPackagePackagingConfigurationResources retrieves all mediapackage.PackagingConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllMediaPackagePackagingConfigurationResources() map[string]*mediapackage.PackagingConfiguration[any] {
	results := map[string]*mediapackage.PackagingConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediapackage.PackagingConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaPackagePackagingConfigurationWithName retrieves all mediapackage.PackagingConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaPackagePackagingConfigurationWithName(name string) (*mediapackage.PackagingConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediapackage.PackagingConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediapackage.PackagingConfiguration not found", name)
}

// GetAllMediaPackagePackagingGroupResources retrieves all mediapackage.PackagingGroup items from an AWS CloudFormation template
func (t *Template) GetAllMediaPackagePackagingGroupResources() map[string]*mediapackage.PackagingGroup[any] {
	results := map[string]*mediapackage.PackagingGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediapackage.PackagingGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaPackagePackagingGroupWithName retrieves all mediapackage.PackagingGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaPackagePackagingGroupWithName(name string) (*mediapackage.PackagingGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediapackage.PackagingGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediapackage.PackagingGroup not found", name)
}

// GetAllMediaStoreContainerResources retrieves all mediastore.Container items from an AWS CloudFormation template
func (t *Template) GetAllMediaStoreContainerResources() map[string]*mediastore.Container[any] {
	results := map[string]*mediastore.Container[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediastore.Container[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaStoreContainerWithName retrieves all mediastore.Container items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaStoreContainerWithName(name string) (*mediastore.Container[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediastore.Container[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediastore.Container not found", name)
}

// GetAllMediaTailorPlaybackConfigurationResources retrieves all mediatailor.PlaybackConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllMediaTailorPlaybackConfigurationResources() map[string]*mediatailor.PlaybackConfiguration[any] {
	results := map[string]*mediatailor.PlaybackConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *mediatailor.PlaybackConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMediaTailorPlaybackConfigurationWithName retrieves all mediatailor.PlaybackConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMediaTailorPlaybackConfigurationWithName(name string) (*mediatailor.PlaybackConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *mediatailor.PlaybackConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type mediatailor.PlaybackConfiguration not found", name)
}

// GetAllMemoryDBACLResources retrieves all memorydb.ACL items from an AWS CloudFormation template
func (t *Template) GetAllMemoryDBACLResources() map[string]*memorydb.ACL[any] {
	results := map[string]*memorydb.ACL[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *memorydb.ACL[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMemoryDBACLWithName retrieves all memorydb.ACL items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMemoryDBACLWithName(name string) (*memorydb.ACL[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *memorydb.ACL[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type memorydb.ACL not found", name)
}

// GetAllMemoryDBClusterResources retrieves all memorydb.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllMemoryDBClusterResources() map[string]*memorydb.Cluster[any] {
	results := map[string]*memorydb.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *memorydb.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMemoryDBClusterWithName retrieves all memorydb.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMemoryDBClusterWithName(name string) (*memorydb.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *memorydb.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type memorydb.Cluster not found", name)
}

// GetAllMemoryDBParameterGroupResources retrieves all memorydb.ParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllMemoryDBParameterGroupResources() map[string]*memorydb.ParameterGroup[any] {
	results := map[string]*memorydb.ParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *memorydb.ParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMemoryDBParameterGroupWithName retrieves all memorydb.ParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMemoryDBParameterGroupWithName(name string) (*memorydb.ParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *memorydb.ParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type memorydb.ParameterGroup not found", name)
}

// GetAllMemoryDBSubnetGroupResources retrieves all memorydb.SubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllMemoryDBSubnetGroupResources() map[string]*memorydb.SubnetGroup[any] {
	results := map[string]*memorydb.SubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *memorydb.SubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMemoryDBSubnetGroupWithName retrieves all memorydb.SubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMemoryDBSubnetGroupWithName(name string) (*memorydb.SubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *memorydb.SubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type memorydb.SubnetGroup not found", name)
}

// GetAllMemoryDBUserResources retrieves all memorydb.User items from an AWS CloudFormation template
func (t *Template) GetAllMemoryDBUserResources() map[string]*memorydb.User[any] {
	results := map[string]*memorydb.User[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *memorydb.User[any]:
			results[name] = resource
		}
	}
	return results
}

// GetMemoryDBUserWithName retrieves all memorydb.User items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetMemoryDBUserWithName(name string) (*memorydb.User[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *memorydb.User[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type memorydb.User not found", name)
}

// GetAllNeptuneDBClusterResources retrieves all neptune.DBCluster items from an AWS CloudFormation template
func (t *Template) GetAllNeptuneDBClusterResources() map[string]*neptune.DBCluster[any] {
	results := map[string]*neptune.DBCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *neptune.DBCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNeptuneDBClusterWithName retrieves all neptune.DBCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNeptuneDBClusterWithName(name string) (*neptune.DBCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *neptune.DBCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type neptune.DBCluster not found", name)
}

// GetAllNeptuneDBClusterParameterGroupResources retrieves all neptune.DBClusterParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllNeptuneDBClusterParameterGroupResources() map[string]*neptune.DBClusterParameterGroup[any] {
	results := map[string]*neptune.DBClusterParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *neptune.DBClusterParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNeptuneDBClusterParameterGroupWithName retrieves all neptune.DBClusterParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNeptuneDBClusterParameterGroupWithName(name string) (*neptune.DBClusterParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *neptune.DBClusterParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type neptune.DBClusterParameterGroup not found", name)
}

// GetAllNeptuneDBInstanceResources retrieves all neptune.DBInstance items from an AWS CloudFormation template
func (t *Template) GetAllNeptuneDBInstanceResources() map[string]*neptune.DBInstance[any] {
	results := map[string]*neptune.DBInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *neptune.DBInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNeptuneDBInstanceWithName retrieves all neptune.DBInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNeptuneDBInstanceWithName(name string) (*neptune.DBInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *neptune.DBInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type neptune.DBInstance not found", name)
}

// GetAllNeptuneDBParameterGroupResources retrieves all neptune.DBParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllNeptuneDBParameterGroupResources() map[string]*neptune.DBParameterGroup[any] {
	results := map[string]*neptune.DBParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *neptune.DBParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNeptuneDBParameterGroupWithName retrieves all neptune.DBParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNeptuneDBParameterGroupWithName(name string) (*neptune.DBParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *neptune.DBParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type neptune.DBParameterGroup not found", name)
}

// GetAllNeptuneDBSubnetGroupResources retrieves all neptune.DBSubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllNeptuneDBSubnetGroupResources() map[string]*neptune.DBSubnetGroup[any] {
	results := map[string]*neptune.DBSubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *neptune.DBSubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNeptuneDBSubnetGroupWithName retrieves all neptune.DBSubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNeptuneDBSubnetGroupWithName(name string) (*neptune.DBSubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *neptune.DBSubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type neptune.DBSubnetGroup not found", name)
}

// GetAllNetworkFirewallFirewallResources retrieves all networkfirewall.Firewall items from an AWS CloudFormation template
func (t *Template) GetAllNetworkFirewallFirewallResources() map[string]*networkfirewall.Firewall[any] {
	results := map[string]*networkfirewall.Firewall[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkfirewall.Firewall[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkFirewallFirewallWithName retrieves all networkfirewall.Firewall items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkFirewallFirewallWithName(name string) (*networkfirewall.Firewall[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkfirewall.Firewall[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkfirewall.Firewall not found", name)
}

// GetAllNetworkFirewallFirewallPolicyResources retrieves all networkfirewall.FirewallPolicy items from an AWS CloudFormation template
func (t *Template) GetAllNetworkFirewallFirewallPolicyResources() map[string]*networkfirewall.FirewallPolicy[any] {
	results := map[string]*networkfirewall.FirewallPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkfirewall.FirewallPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkFirewallFirewallPolicyWithName retrieves all networkfirewall.FirewallPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkFirewallFirewallPolicyWithName(name string) (*networkfirewall.FirewallPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkfirewall.FirewallPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkfirewall.FirewallPolicy not found", name)
}

// GetAllNetworkFirewallLoggingConfigurationResources retrieves all networkfirewall.LoggingConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllNetworkFirewallLoggingConfigurationResources() map[string]*networkfirewall.LoggingConfiguration[any] {
	results := map[string]*networkfirewall.LoggingConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkfirewall.LoggingConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkFirewallLoggingConfigurationWithName retrieves all networkfirewall.LoggingConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkFirewallLoggingConfigurationWithName(name string) (*networkfirewall.LoggingConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkfirewall.LoggingConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkfirewall.LoggingConfiguration not found", name)
}

// GetAllNetworkFirewallRuleGroupResources retrieves all networkfirewall.RuleGroup items from an AWS CloudFormation template
func (t *Template) GetAllNetworkFirewallRuleGroupResources() map[string]*networkfirewall.RuleGroup[any] {
	results := map[string]*networkfirewall.RuleGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkfirewall.RuleGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkFirewallRuleGroupWithName retrieves all networkfirewall.RuleGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkFirewallRuleGroupWithName(name string) (*networkfirewall.RuleGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkfirewall.RuleGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkfirewall.RuleGroup not found", name)
}

// GetAllNetworkManagerConnectAttachmentResources retrieves all networkmanager.ConnectAttachment items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerConnectAttachmentResources() map[string]*networkmanager.ConnectAttachment[any] {
	results := map[string]*networkmanager.ConnectAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.ConnectAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerConnectAttachmentWithName retrieves all networkmanager.ConnectAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerConnectAttachmentWithName(name string) (*networkmanager.ConnectAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.ConnectAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.ConnectAttachment not found", name)
}

// GetAllNetworkManagerConnectPeerResources retrieves all networkmanager.ConnectPeer items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerConnectPeerResources() map[string]*networkmanager.ConnectPeer[any] {
	results := map[string]*networkmanager.ConnectPeer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.ConnectPeer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerConnectPeerWithName retrieves all networkmanager.ConnectPeer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerConnectPeerWithName(name string) (*networkmanager.ConnectPeer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.ConnectPeer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.ConnectPeer not found", name)
}

// GetAllNetworkManagerCoreNetworkResources retrieves all networkmanager.CoreNetwork items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerCoreNetworkResources() map[string]*networkmanager.CoreNetwork[any] {
	results := map[string]*networkmanager.CoreNetwork[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.CoreNetwork[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerCoreNetworkWithName retrieves all networkmanager.CoreNetwork items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerCoreNetworkWithName(name string) (*networkmanager.CoreNetwork[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.CoreNetwork[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.CoreNetwork not found", name)
}

// GetAllNetworkManagerCustomerGatewayAssociationResources retrieves all networkmanager.CustomerGatewayAssociation items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerCustomerGatewayAssociationResources() map[string]*networkmanager.CustomerGatewayAssociation[any] {
	results := map[string]*networkmanager.CustomerGatewayAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.CustomerGatewayAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerCustomerGatewayAssociationWithName retrieves all networkmanager.CustomerGatewayAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerCustomerGatewayAssociationWithName(name string) (*networkmanager.CustomerGatewayAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.CustomerGatewayAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.CustomerGatewayAssociation not found", name)
}

// GetAllNetworkManagerDeviceResources retrieves all networkmanager.Device items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerDeviceResources() map[string]*networkmanager.Device[any] {
	results := map[string]*networkmanager.Device[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.Device[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerDeviceWithName retrieves all networkmanager.Device items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerDeviceWithName(name string) (*networkmanager.Device[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.Device[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.Device not found", name)
}

// GetAllNetworkManagerGlobalNetworkResources retrieves all networkmanager.GlobalNetwork items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerGlobalNetworkResources() map[string]*networkmanager.GlobalNetwork[any] {
	results := map[string]*networkmanager.GlobalNetwork[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.GlobalNetwork[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerGlobalNetworkWithName retrieves all networkmanager.GlobalNetwork items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerGlobalNetworkWithName(name string) (*networkmanager.GlobalNetwork[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.GlobalNetwork[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.GlobalNetwork not found", name)
}

// GetAllNetworkManagerLinkResources retrieves all networkmanager.Link items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerLinkResources() map[string]*networkmanager.Link[any] {
	results := map[string]*networkmanager.Link[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.Link[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerLinkWithName retrieves all networkmanager.Link items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerLinkWithName(name string) (*networkmanager.Link[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.Link[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.Link not found", name)
}

// GetAllNetworkManagerLinkAssociationResources retrieves all networkmanager.LinkAssociation items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerLinkAssociationResources() map[string]*networkmanager.LinkAssociation[any] {
	results := map[string]*networkmanager.LinkAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.LinkAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerLinkAssociationWithName retrieves all networkmanager.LinkAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerLinkAssociationWithName(name string) (*networkmanager.LinkAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.LinkAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.LinkAssociation not found", name)
}

// GetAllNetworkManagerSiteResources retrieves all networkmanager.Site items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerSiteResources() map[string]*networkmanager.Site[any] {
	results := map[string]*networkmanager.Site[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.Site[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerSiteWithName retrieves all networkmanager.Site items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerSiteWithName(name string) (*networkmanager.Site[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.Site[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.Site not found", name)
}

// GetAllNetworkManagerSiteToSiteVpnAttachmentResources retrieves all networkmanager.SiteToSiteVpnAttachment items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerSiteToSiteVpnAttachmentResources() map[string]*networkmanager.SiteToSiteVpnAttachment[any] {
	results := map[string]*networkmanager.SiteToSiteVpnAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.SiteToSiteVpnAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerSiteToSiteVpnAttachmentWithName retrieves all networkmanager.SiteToSiteVpnAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerSiteToSiteVpnAttachmentWithName(name string) (*networkmanager.SiteToSiteVpnAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.SiteToSiteVpnAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.SiteToSiteVpnAttachment not found", name)
}

// GetAllNetworkManagerTransitGatewayPeeringResources retrieves all networkmanager.TransitGatewayPeering items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerTransitGatewayPeeringResources() map[string]*networkmanager.TransitGatewayPeering[any] {
	results := map[string]*networkmanager.TransitGatewayPeering[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.TransitGatewayPeering[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerTransitGatewayPeeringWithName retrieves all networkmanager.TransitGatewayPeering items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerTransitGatewayPeeringWithName(name string) (*networkmanager.TransitGatewayPeering[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.TransitGatewayPeering[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.TransitGatewayPeering not found", name)
}

// GetAllNetworkManagerTransitGatewayRegistrationResources retrieves all networkmanager.TransitGatewayRegistration items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerTransitGatewayRegistrationResources() map[string]*networkmanager.TransitGatewayRegistration[any] {
	results := map[string]*networkmanager.TransitGatewayRegistration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.TransitGatewayRegistration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerTransitGatewayRegistrationWithName retrieves all networkmanager.TransitGatewayRegistration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerTransitGatewayRegistrationWithName(name string) (*networkmanager.TransitGatewayRegistration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.TransitGatewayRegistration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.TransitGatewayRegistration not found", name)
}

// GetAllNetworkManagerTransitGatewayRouteTableAttachmentResources retrieves all networkmanager.TransitGatewayRouteTableAttachment items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerTransitGatewayRouteTableAttachmentResources() map[string]*networkmanager.TransitGatewayRouteTableAttachment[any] {
	results := map[string]*networkmanager.TransitGatewayRouteTableAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.TransitGatewayRouteTableAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerTransitGatewayRouteTableAttachmentWithName retrieves all networkmanager.TransitGatewayRouteTableAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerTransitGatewayRouteTableAttachmentWithName(name string) (*networkmanager.TransitGatewayRouteTableAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.TransitGatewayRouteTableAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.TransitGatewayRouteTableAttachment not found", name)
}

// GetAllNetworkManagerVpcAttachmentResources retrieves all networkmanager.VpcAttachment items from an AWS CloudFormation template
func (t *Template) GetAllNetworkManagerVpcAttachmentResources() map[string]*networkmanager.VpcAttachment[any] {
	results := map[string]*networkmanager.VpcAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *networkmanager.VpcAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNetworkManagerVpcAttachmentWithName retrieves all networkmanager.VpcAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNetworkManagerVpcAttachmentWithName(name string) (*networkmanager.VpcAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *networkmanager.VpcAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type networkmanager.VpcAttachment not found", name)
}

// GetAllNimbleStudioLaunchProfileResources retrieves all nimblestudio.LaunchProfile items from an AWS CloudFormation template
func (t *Template) GetAllNimbleStudioLaunchProfileResources() map[string]*nimblestudio.LaunchProfile[any] {
	results := map[string]*nimblestudio.LaunchProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *nimblestudio.LaunchProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNimbleStudioLaunchProfileWithName retrieves all nimblestudio.LaunchProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNimbleStudioLaunchProfileWithName(name string) (*nimblestudio.LaunchProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *nimblestudio.LaunchProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type nimblestudio.LaunchProfile not found", name)
}

// GetAllNimbleStudioStreamingImageResources retrieves all nimblestudio.StreamingImage items from an AWS CloudFormation template
func (t *Template) GetAllNimbleStudioStreamingImageResources() map[string]*nimblestudio.StreamingImage[any] {
	results := map[string]*nimblestudio.StreamingImage[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *nimblestudio.StreamingImage[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNimbleStudioStreamingImageWithName retrieves all nimblestudio.StreamingImage items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNimbleStudioStreamingImageWithName(name string) (*nimblestudio.StreamingImage[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *nimblestudio.StreamingImage[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type nimblestudio.StreamingImage not found", name)
}

// GetAllNimbleStudioStudioResources retrieves all nimblestudio.Studio items from an AWS CloudFormation template
func (t *Template) GetAllNimbleStudioStudioResources() map[string]*nimblestudio.Studio[any] {
	results := map[string]*nimblestudio.Studio[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *nimblestudio.Studio[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNimbleStudioStudioWithName retrieves all nimblestudio.Studio items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNimbleStudioStudioWithName(name string) (*nimblestudio.Studio[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *nimblestudio.Studio[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type nimblestudio.Studio not found", name)
}

// GetAllNimbleStudioStudioComponentResources retrieves all nimblestudio.StudioComponent items from an AWS CloudFormation template
func (t *Template) GetAllNimbleStudioStudioComponentResources() map[string]*nimblestudio.StudioComponent[any] {
	results := map[string]*nimblestudio.StudioComponent[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *nimblestudio.StudioComponent[any]:
			results[name] = resource
		}
	}
	return results
}

// GetNimbleStudioStudioComponentWithName retrieves all nimblestudio.StudioComponent items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetNimbleStudioStudioComponentWithName(name string) (*nimblestudio.StudioComponent[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *nimblestudio.StudioComponent[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type nimblestudio.StudioComponent not found", name)
}

// GetAllOSISPipelineResources retrieves all osis.Pipeline items from an AWS CloudFormation template
func (t *Template) GetAllOSISPipelineResources() map[string]*osis.Pipeline[any] {
	results := map[string]*osis.Pipeline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *osis.Pipeline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOSISPipelineWithName retrieves all osis.Pipeline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOSISPipelineWithName(name string) (*osis.Pipeline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *osis.Pipeline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type osis.Pipeline not found", name)
}

// GetAllOamLinkResources retrieves all oam.Link items from an AWS CloudFormation template
func (t *Template) GetAllOamLinkResources() map[string]*oam.Link[any] {
	results := map[string]*oam.Link[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *oam.Link[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOamLinkWithName retrieves all oam.Link items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOamLinkWithName(name string) (*oam.Link[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *oam.Link[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type oam.Link not found", name)
}

// GetAllOamSinkResources retrieves all oam.Sink items from an AWS CloudFormation template
func (t *Template) GetAllOamSinkResources() map[string]*oam.Sink[any] {
	results := map[string]*oam.Sink[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *oam.Sink[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOamSinkWithName retrieves all oam.Sink items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOamSinkWithName(name string) (*oam.Sink[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *oam.Sink[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type oam.Sink not found", name)
}

// GetAllOmicsAnnotationStoreResources retrieves all omics.AnnotationStore items from an AWS CloudFormation template
func (t *Template) GetAllOmicsAnnotationStoreResources() map[string]*omics.AnnotationStore[any] {
	results := map[string]*omics.AnnotationStore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *omics.AnnotationStore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOmicsAnnotationStoreWithName retrieves all omics.AnnotationStore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOmicsAnnotationStoreWithName(name string) (*omics.AnnotationStore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *omics.AnnotationStore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type omics.AnnotationStore not found", name)
}

// GetAllOmicsReferenceStoreResources retrieves all omics.ReferenceStore items from an AWS CloudFormation template
func (t *Template) GetAllOmicsReferenceStoreResources() map[string]*omics.ReferenceStore[any] {
	results := map[string]*omics.ReferenceStore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *omics.ReferenceStore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOmicsReferenceStoreWithName retrieves all omics.ReferenceStore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOmicsReferenceStoreWithName(name string) (*omics.ReferenceStore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *omics.ReferenceStore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type omics.ReferenceStore not found", name)
}

// GetAllOmicsRunGroupResources retrieves all omics.RunGroup items from an AWS CloudFormation template
func (t *Template) GetAllOmicsRunGroupResources() map[string]*omics.RunGroup[any] {
	results := map[string]*omics.RunGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *omics.RunGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOmicsRunGroupWithName retrieves all omics.RunGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOmicsRunGroupWithName(name string) (*omics.RunGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *omics.RunGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type omics.RunGroup not found", name)
}

// GetAllOmicsSequenceStoreResources retrieves all omics.SequenceStore items from an AWS CloudFormation template
func (t *Template) GetAllOmicsSequenceStoreResources() map[string]*omics.SequenceStore[any] {
	results := map[string]*omics.SequenceStore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *omics.SequenceStore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOmicsSequenceStoreWithName retrieves all omics.SequenceStore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOmicsSequenceStoreWithName(name string) (*omics.SequenceStore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *omics.SequenceStore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type omics.SequenceStore not found", name)
}

// GetAllOmicsVariantStoreResources retrieves all omics.VariantStore items from an AWS CloudFormation template
func (t *Template) GetAllOmicsVariantStoreResources() map[string]*omics.VariantStore[any] {
	results := map[string]*omics.VariantStore[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *omics.VariantStore[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOmicsVariantStoreWithName retrieves all omics.VariantStore items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOmicsVariantStoreWithName(name string) (*omics.VariantStore[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *omics.VariantStore[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type omics.VariantStore not found", name)
}

// GetAllOmicsWorkflowResources retrieves all omics.Workflow items from an AWS CloudFormation template
func (t *Template) GetAllOmicsWorkflowResources() map[string]*omics.Workflow[any] {
	results := map[string]*omics.Workflow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *omics.Workflow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOmicsWorkflowWithName retrieves all omics.Workflow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOmicsWorkflowWithName(name string) (*omics.Workflow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *omics.Workflow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type omics.Workflow not found", name)
}

// GetAllOpenSearchServerlessAccessPolicyResources retrieves all opensearchserverless.AccessPolicy items from an AWS CloudFormation template
func (t *Template) GetAllOpenSearchServerlessAccessPolicyResources() map[string]*opensearchserverless.AccessPolicy[any] {
	results := map[string]*opensearchserverless.AccessPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opensearchserverless.AccessPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpenSearchServerlessAccessPolicyWithName retrieves all opensearchserverless.AccessPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpenSearchServerlessAccessPolicyWithName(name string) (*opensearchserverless.AccessPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opensearchserverless.AccessPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opensearchserverless.AccessPolicy not found", name)
}

// GetAllOpenSearchServerlessCollectionResources retrieves all opensearchserverless.Collection items from an AWS CloudFormation template
func (t *Template) GetAllOpenSearchServerlessCollectionResources() map[string]*opensearchserverless.Collection[any] {
	results := map[string]*opensearchserverless.Collection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opensearchserverless.Collection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpenSearchServerlessCollectionWithName retrieves all opensearchserverless.Collection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpenSearchServerlessCollectionWithName(name string) (*opensearchserverless.Collection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opensearchserverless.Collection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opensearchserverless.Collection not found", name)
}

// GetAllOpenSearchServerlessSecurityConfigResources retrieves all opensearchserverless.SecurityConfig items from an AWS CloudFormation template
func (t *Template) GetAllOpenSearchServerlessSecurityConfigResources() map[string]*opensearchserverless.SecurityConfig[any] {
	results := map[string]*opensearchserverless.SecurityConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opensearchserverless.SecurityConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpenSearchServerlessSecurityConfigWithName retrieves all opensearchserverless.SecurityConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpenSearchServerlessSecurityConfigWithName(name string) (*opensearchserverless.SecurityConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opensearchserverless.SecurityConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opensearchserverless.SecurityConfig not found", name)
}

// GetAllOpenSearchServerlessSecurityPolicyResources retrieves all opensearchserverless.SecurityPolicy items from an AWS CloudFormation template
func (t *Template) GetAllOpenSearchServerlessSecurityPolicyResources() map[string]*opensearchserverless.SecurityPolicy[any] {
	results := map[string]*opensearchserverless.SecurityPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opensearchserverless.SecurityPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpenSearchServerlessSecurityPolicyWithName retrieves all opensearchserverless.SecurityPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpenSearchServerlessSecurityPolicyWithName(name string) (*opensearchserverless.SecurityPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opensearchserverless.SecurityPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opensearchserverless.SecurityPolicy not found", name)
}

// GetAllOpenSearchServerlessVpcEndpointResources retrieves all opensearchserverless.VpcEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllOpenSearchServerlessVpcEndpointResources() map[string]*opensearchserverless.VpcEndpoint[any] {
	results := map[string]*opensearchserverless.VpcEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opensearchserverless.VpcEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpenSearchServerlessVpcEndpointWithName retrieves all opensearchserverless.VpcEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpenSearchServerlessVpcEndpointWithName(name string) (*opensearchserverless.VpcEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opensearchserverless.VpcEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opensearchserverless.VpcEndpoint not found", name)
}

// GetAllOpenSearchServiceDomainResources retrieves all opensearchservice.Domain items from an AWS CloudFormation template
func (t *Template) GetAllOpenSearchServiceDomainResources() map[string]*opensearchservice.Domain[any] {
	results := map[string]*opensearchservice.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opensearchservice.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpenSearchServiceDomainWithName retrieves all opensearchservice.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpenSearchServiceDomainWithName(name string) (*opensearchservice.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opensearchservice.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opensearchservice.Domain not found", name)
}

// GetAllOpsWorksAppResources retrieves all opsworks.App items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksAppResources() map[string]*opsworks.App[any] {
	results := map[string]*opsworks.App[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.App[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksAppWithName retrieves all opsworks.App items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksAppWithName(name string) (*opsworks.App[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.App[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.App not found", name)
}

// GetAllOpsWorksElasticLoadBalancerAttachmentResources retrieves all opsworks.ElasticLoadBalancerAttachment items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksElasticLoadBalancerAttachmentResources() map[string]*opsworks.ElasticLoadBalancerAttachment[any] {
	results := map[string]*opsworks.ElasticLoadBalancerAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.ElasticLoadBalancerAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksElasticLoadBalancerAttachmentWithName retrieves all opsworks.ElasticLoadBalancerAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksElasticLoadBalancerAttachmentWithName(name string) (*opsworks.ElasticLoadBalancerAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.ElasticLoadBalancerAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.ElasticLoadBalancerAttachment not found", name)
}

// GetAllOpsWorksInstanceResources retrieves all opsworks.Instance items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksInstanceResources() map[string]*opsworks.Instance[any] {
	results := map[string]*opsworks.Instance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.Instance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksInstanceWithName retrieves all opsworks.Instance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksInstanceWithName(name string) (*opsworks.Instance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.Instance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.Instance not found", name)
}

// GetAllOpsWorksLayerResources retrieves all opsworks.Layer items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksLayerResources() map[string]*opsworks.Layer[any] {
	results := map[string]*opsworks.Layer[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.Layer[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksLayerWithName retrieves all opsworks.Layer items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksLayerWithName(name string) (*opsworks.Layer[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.Layer[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.Layer not found", name)
}

// GetAllOpsWorksStackResources retrieves all opsworks.Stack items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksStackResources() map[string]*opsworks.Stack[any] {
	results := map[string]*opsworks.Stack[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.Stack[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksStackWithName retrieves all opsworks.Stack items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksStackWithName(name string) (*opsworks.Stack[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.Stack[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.Stack not found", name)
}

// GetAllOpsWorksUserProfileResources retrieves all opsworks.UserProfile items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksUserProfileResources() map[string]*opsworks.UserProfile[any] {
	results := map[string]*opsworks.UserProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.UserProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksUserProfileWithName retrieves all opsworks.UserProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksUserProfileWithName(name string) (*opsworks.UserProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.UserProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.UserProfile not found", name)
}

// GetAllOpsWorksVolumeResources retrieves all opsworks.Volume items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksVolumeResources() map[string]*opsworks.Volume[any] {
	results := map[string]*opsworks.Volume[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworks.Volume[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksVolumeWithName retrieves all opsworks.Volume items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksVolumeWithName(name string) (*opsworks.Volume[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworks.Volume[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworks.Volume not found", name)
}

// GetAllOpsWorksCMServerResources retrieves all opsworkscm.Server items from an AWS CloudFormation template
func (t *Template) GetAllOpsWorksCMServerResources() map[string]*opsworkscm.Server[any] {
	results := map[string]*opsworkscm.Server[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *opsworkscm.Server[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOpsWorksCMServerWithName retrieves all opsworkscm.Server items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOpsWorksCMServerWithName(name string) (*opsworkscm.Server[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *opsworkscm.Server[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type opsworkscm.Server not found", name)
}

// GetAllOrganizationsAccountResources retrieves all organizations.Account items from an AWS CloudFormation template
func (t *Template) GetAllOrganizationsAccountResources() map[string]*organizations.Account[any] {
	results := map[string]*organizations.Account[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *organizations.Account[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOrganizationsAccountWithName retrieves all organizations.Account items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOrganizationsAccountWithName(name string) (*organizations.Account[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *organizations.Account[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type organizations.Account not found", name)
}

// GetAllOrganizationsOrganizationalUnitResources retrieves all organizations.OrganizationalUnit items from an AWS CloudFormation template
func (t *Template) GetAllOrganizationsOrganizationalUnitResources() map[string]*organizations.OrganizationalUnit[any] {
	results := map[string]*organizations.OrganizationalUnit[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *organizations.OrganizationalUnit[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOrganizationsOrganizationalUnitWithName retrieves all organizations.OrganizationalUnit items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOrganizationsOrganizationalUnitWithName(name string) (*organizations.OrganizationalUnit[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *organizations.OrganizationalUnit[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type organizations.OrganizationalUnit not found", name)
}

// GetAllOrganizationsPolicyResources retrieves all organizations.Policy items from an AWS CloudFormation template
func (t *Template) GetAllOrganizationsPolicyResources() map[string]*organizations.Policy[any] {
	results := map[string]*organizations.Policy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *organizations.Policy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOrganizationsPolicyWithName retrieves all organizations.Policy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOrganizationsPolicyWithName(name string) (*organizations.Policy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *organizations.Policy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type organizations.Policy not found", name)
}

// GetAllOrganizationsResourcePolicyResources retrieves all organizations.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllOrganizationsResourcePolicyResources() map[string]*organizations.ResourcePolicy[any] {
	results := map[string]*organizations.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *organizations.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetOrganizationsResourcePolicyWithName retrieves all organizations.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetOrganizationsResourcePolicyWithName(name string) (*organizations.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *organizations.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type organizations.ResourcePolicy not found", name)
}

// GetAllPanoramaApplicationInstanceResources retrieves all panorama.ApplicationInstance items from an AWS CloudFormation template
func (t *Template) GetAllPanoramaApplicationInstanceResources() map[string]*panorama.ApplicationInstance[any] {
	results := map[string]*panorama.ApplicationInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *panorama.ApplicationInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPanoramaApplicationInstanceWithName retrieves all panorama.ApplicationInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPanoramaApplicationInstanceWithName(name string) (*panorama.ApplicationInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *panorama.ApplicationInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type panorama.ApplicationInstance not found", name)
}

// GetAllPanoramaPackageResources retrieves all panorama.Package items from an AWS CloudFormation template
func (t *Template) GetAllPanoramaPackageResources() map[string]*panorama.Package[any] {
	results := map[string]*panorama.Package[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *panorama.Package[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPanoramaPackageWithName retrieves all panorama.Package items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPanoramaPackageWithName(name string) (*panorama.Package[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *panorama.Package[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type panorama.Package not found", name)
}

// GetAllPanoramaPackageVersionResources retrieves all panorama.PackageVersion items from an AWS CloudFormation template
func (t *Template) GetAllPanoramaPackageVersionResources() map[string]*panorama.PackageVersion[any] {
	results := map[string]*panorama.PackageVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *panorama.PackageVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPanoramaPackageVersionWithName retrieves all panorama.PackageVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPanoramaPackageVersionWithName(name string) (*panorama.PackageVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *panorama.PackageVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type panorama.PackageVersion not found", name)
}

// GetAllPersonalizeDatasetResources retrieves all personalize.Dataset items from an AWS CloudFormation template
func (t *Template) GetAllPersonalizeDatasetResources() map[string]*personalize.Dataset[any] {
	results := map[string]*personalize.Dataset[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *personalize.Dataset[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPersonalizeDatasetWithName retrieves all personalize.Dataset items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPersonalizeDatasetWithName(name string) (*personalize.Dataset[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *personalize.Dataset[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type personalize.Dataset not found", name)
}

// GetAllPersonalizeDatasetGroupResources retrieves all personalize.DatasetGroup items from an AWS CloudFormation template
func (t *Template) GetAllPersonalizeDatasetGroupResources() map[string]*personalize.DatasetGroup[any] {
	results := map[string]*personalize.DatasetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *personalize.DatasetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPersonalizeDatasetGroupWithName retrieves all personalize.DatasetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPersonalizeDatasetGroupWithName(name string) (*personalize.DatasetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *personalize.DatasetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type personalize.DatasetGroup not found", name)
}

// GetAllPersonalizeSchemaResources retrieves all personalize.Schema items from an AWS CloudFormation template
func (t *Template) GetAllPersonalizeSchemaResources() map[string]*personalize.Schema[any] {
	results := map[string]*personalize.Schema[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *personalize.Schema[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPersonalizeSchemaWithName retrieves all personalize.Schema items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPersonalizeSchemaWithName(name string) (*personalize.Schema[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *personalize.Schema[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type personalize.Schema not found", name)
}

// GetAllPersonalizeSolutionResources retrieves all personalize.Solution items from an AWS CloudFormation template
func (t *Template) GetAllPersonalizeSolutionResources() map[string]*personalize.Solution[any] {
	results := map[string]*personalize.Solution[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *personalize.Solution[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPersonalizeSolutionWithName retrieves all personalize.Solution items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPersonalizeSolutionWithName(name string) (*personalize.Solution[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *personalize.Solution[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type personalize.Solution not found", name)
}

// GetAllPinpointADMChannelResources retrieves all pinpoint.ADMChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointADMChannelResources() map[string]*pinpoint.ADMChannel[any] {
	results := map[string]*pinpoint.ADMChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.ADMChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointADMChannelWithName retrieves all pinpoint.ADMChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointADMChannelWithName(name string) (*pinpoint.ADMChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.ADMChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.ADMChannel not found", name)
}

// GetAllPinpointAPNSChannelResources retrieves all pinpoint.APNSChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointAPNSChannelResources() map[string]*pinpoint.APNSChannel[any] {
	results := map[string]*pinpoint.APNSChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.APNSChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointAPNSChannelWithName retrieves all pinpoint.APNSChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointAPNSChannelWithName(name string) (*pinpoint.APNSChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.APNSChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.APNSChannel not found", name)
}

// GetAllPinpointAPNSSandboxChannelResources retrieves all pinpoint.APNSSandboxChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointAPNSSandboxChannelResources() map[string]*pinpoint.APNSSandboxChannel[any] {
	results := map[string]*pinpoint.APNSSandboxChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.APNSSandboxChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointAPNSSandboxChannelWithName retrieves all pinpoint.APNSSandboxChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointAPNSSandboxChannelWithName(name string) (*pinpoint.APNSSandboxChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.APNSSandboxChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.APNSSandboxChannel not found", name)
}

// GetAllPinpointAPNSVoipChannelResources retrieves all pinpoint.APNSVoipChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointAPNSVoipChannelResources() map[string]*pinpoint.APNSVoipChannel[any] {
	results := map[string]*pinpoint.APNSVoipChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.APNSVoipChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointAPNSVoipChannelWithName retrieves all pinpoint.APNSVoipChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointAPNSVoipChannelWithName(name string) (*pinpoint.APNSVoipChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.APNSVoipChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.APNSVoipChannel not found", name)
}

// GetAllPinpointAPNSVoipSandboxChannelResources retrieves all pinpoint.APNSVoipSandboxChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointAPNSVoipSandboxChannelResources() map[string]*pinpoint.APNSVoipSandboxChannel[any] {
	results := map[string]*pinpoint.APNSVoipSandboxChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.APNSVoipSandboxChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointAPNSVoipSandboxChannelWithName retrieves all pinpoint.APNSVoipSandboxChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointAPNSVoipSandboxChannelWithName(name string) (*pinpoint.APNSVoipSandboxChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.APNSVoipSandboxChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.APNSVoipSandboxChannel not found", name)
}

// GetAllPinpointAppResources retrieves all pinpoint.App items from an AWS CloudFormation template
func (t *Template) GetAllPinpointAppResources() map[string]*pinpoint.App[any] {
	results := map[string]*pinpoint.App[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.App[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointAppWithName retrieves all pinpoint.App items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointAppWithName(name string) (*pinpoint.App[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.App[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.App not found", name)
}

// GetAllPinpointApplicationSettingsResources retrieves all pinpoint.ApplicationSettings items from an AWS CloudFormation template
func (t *Template) GetAllPinpointApplicationSettingsResources() map[string]*pinpoint.ApplicationSettings[any] {
	results := map[string]*pinpoint.ApplicationSettings[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.ApplicationSettings[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointApplicationSettingsWithName retrieves all pinpoint.ApplicationSettings items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointApplicationSettingsWithName(name string) (*pinpoint.ApplicationSettings[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.ApplicationSettings[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.ApplicationSettings not found", name)
}

// GetAllPinpointBaiduChannelResources retrieves all pinpoint.BaiduChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointBaiduChannelResources() map[string]*pinpoint.BaiduChannel[any] {
	results := map[string]*pinpoint.BaiduChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.BaiduChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointBaiduChannelWithName retrieves all pinpoint.BaiduChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointBaiduChannelWithName(name string) (*pinpoint.BaiduChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.BaiduChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.BaiduChannel not found", name)
}

// GetAllPinpointCampaignResources retrieves all pinpoint.Campaign items from an AWS CloudFormation template
func (t *Template) GetAllPinpointCampaignResources() map[string]*pinpoint.Campaign[any] {
	results := map[string]*pinpoint.Campaign[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.Campaign[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointCampaignWithName retrieves all pinpoint.Campaign items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointCampaignWithName(name string) (*pinpoint.Campaign[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.Campaign[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.Campaign not found", name)
}

// GetAllPinpointEmailChannelResources retrieves all pinpoint.EmailChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEmailChannelResources() map[string]*pinpoint.EmailChannel[any] {
	results := map[string]*pinpoint.EmailChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.EmailChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEmailChannelWithName retrieves all pinpoint.EmailChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEmailChannelWithName(name string) (*pinpoint.EmailChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.EmailChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.EmailChannel not found", name)
}

// GetAllPinpointEmailTemplateResources retrieves all pinpoint.EmailTemplate items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEmailTemplateResources() map[string]*pinpoint.EmailTemplate[any] {
	results := map[string]*pinpoint.EmailTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.EmailTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEmailTemplateWithName retrieves all pinpoint.EmailTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEmailTemplateWithName(name string) (*pinpoint.EmailTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.EmailTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.EmailTemplate not found", name)
}

// GetAllPinpointEventStreamResources retrieves all pinpoint.EventStream items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEventStreamResources() map[string]*pinpoint.EventStream[any] {
	results := map[string]*pinpoint.EventStream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.EventStream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEventStreamWithName retrieves all pinpoint.EventStream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEventStreamWithName(name string) (*pinpoint.EventStream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.EventStream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.EventStream not found", name)
}

// GetAllPinpointGCMChannelResources retrieves all pinpoint.GCMChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointGCMChannelResources() map[string]*pinpoint.GCMChannel[any] {
	results := map[string]*pinpoint.GCMChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.GCMChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointGCMChannelWithName retrieves all pinpoint.GCMChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointGCMChannelWithName(name string) (*pinpoint.GCMChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.GCMChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.GCMChannel not found", name)
}

// GetAllPinpointInAppTemplateResources retrieves all pinpoint.InAppTemplate items from an AWS CloudFormation template
func (t *Template) GetAllPinpointInAppTemplateResources() map[string]*pinpoint.InAppTemplate[any] {
	results := map[string]*pinpoint.InAppTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.InAppTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointInAppTemplateWithName retrieves all pinpoint.InAppTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointInAppTemplateWithName(name string) (*pinpoint.InAppTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.InAppTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.InAppTemplate not found", name)
}

// GetAllPinpointPushTemplateResources retrieves all pinpoint.PushTemplate items from an AWS CloudFormation template
func (t *Template) GetAllPinpointPushTemplateResources() map[string]*pinpoint.PushTemplate[any] {
	results := map[string]*pinpoint.PushTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.PushTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointPushTemplateWithName retrieves all pinpoint.PushTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointPushTemplateWithName(name string) (*pinpoint.PushTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.PushTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.PushTemplate not found", name)
}

// GetAllPinpointSMSChannelResources retrieves all pinpoint.SMSChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointSMSChannelResources() map[string]*pinpoint.SMSChannel[any] {
	results := map[string]*pinpoint.SMSChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.SMSChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointSMSChannelWithName retrieves all pinpoint.SMSChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointSMSChannelWithName(name string) (*pinpoint.SMSChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.SMSChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.SMSChannel not found", name)
}

// GetAllPinpointSegmentResources retrieves all pinpoint.Segment items from an AWS CloudFormation template
func (t *Template) GetAllPinpointSegmentResources() map[string]*pinpoint.Segment[any] {
	results := map[string]*pinpoint.Segment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.Segment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointSegmentWithName retrieves all pinpoint.Segment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointSegmentWithName(name string) (*pinpoint.Segment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.Segment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.Segment not found", name)
}

// GetAllPinpointSmsTemplateResources retrieves all pinpoint.SmsTemplate items from an AWS CloudFormation template
func (t *Template) GetAllPinpointSmsTemplateResources() map[string]*pinpoint.SmsTemplate[any] {
	results := map[string]*pinpoint.SmsTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.SmsTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointSmsTemplateWithName retrieves all pinpoint.SmsTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointSmsTemplateWithName(name string) (*pinpoint.SmsTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.SmsTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.SmsTemplate not found", name)
}

// GetAllPinpointVoiceChannelResources retrieves all pinpoint.VoiceChannel items from an AWS CloudFormation template
func (t *Template) GetAllPinpointVoiceChannelResources() map[string]*pinpoint.VoiceChannel[any] {
	results := map[string]*pinpoint.VoiceChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpoint.VoiceChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointVoiceChannelWithName retrieves all pinpoint.VoiceChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointVoiceChannelWithName(name string) (*pinpoint.VoiceChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpoint.VoiceChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpoint.VoiceChannel not found", name)
}

// GetAllPinpointEmailConfigurationSetResources retrieves all pinpointemail.ConfigurationSet items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEmailConfigurationSetResources() map[string]*pinpointemail.ConfigurationSet[any] {
	results := map[string]*pinpointemail.ConfigurationSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpointemail.ConfigurationSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEmailConfigurationSetWithName retrieves all pinpointemail.ConfigurationSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEmailConfigurationSetWithName(name string) (*pinpointemail.ConfigurationSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpointemail.ConfigurationSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpointemail.ConfigurationSet not found", name)
}

// GetAllPinpointEmailConfigurationSetEventDestinationResources retrieves all pinpointemail.ConfigurationSetEventDestination items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEmailConfigurationSetEventDestinationResources() map[string]*pinpointemail.ConfigurationSetEventDestination[any] {
	results := map[string]*pinpointemail.ConfigurationSetEventDestination[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpointemail.ConfigurationSetEventDestination[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEmailConfigurationSetEventDestinationWithName retrieves all pinpointemail.ConfigurationSetEventDestination items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEmailConfigurationSetEventDestinationWithName(name string) (*pinpointemail.ConfigurationSetEventDestination[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpointemail.ConfigurationSetEventDestination[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpointemail.ConfigurationSetEventDestination not found", name)
}

// GetAllPinpointEmailDedicatedIpPoolResources retrieves all pinpointemail.DedicatedIpPool items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEmailDedicatedIpPoolResources() map[string]*pinpointemail.DedicatedIpPool[any] {
	results := map[string]*pinpointemail.DedicatedIpPool[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpointemail.DedicatedIpPool[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEmailDedicatedIpPoolWithName retrieves all pinpointemail.DedicatedIpPool items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEmailDedicatedIpPoolWithName(name string) (*pinpointemail.DedicatedIpPool[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpointemail.DedicatedIpPool[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpointemail.DedicatedIpPool not found", name)
}

// GetAllPinpointEmailIdentityResources retrieves all pinpointemail.Identity items from an AWS CloudFormation template
func (t *Template) GetAllPinpointEmailIdentityResources() map[string]*pinpointemail.Identity[any] {
	results := map[string]*pinpointemail.Identity[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pinpointemail.Identity[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPinpointEmailIdentityWithName retrieves all pinpointemail.Identity items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPinpointEmailIdentityWithName(name string) (*pinpointemail.Identity[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pinpointemail.Identity[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pinpointemail.Identity not found", name)
}

// GetAllPipesPipeResources retrieves all pipes.Pipe items from an AWS CloudFormation template
func (t *Template) GetAllPipesPipeResources() map[string]*pipes.Pipe[any] {
	results := map[string]*pipes.Pipe[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *pipes.Pipe[any]:
			results[name] = resource
		}
	}
	return results
}

// GetPipesPipeWithName retrieves all pipes.Pipe items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetPipesPipeWithName(name string) (*pipes.Pipe[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *pipes.Pipe[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type pipes.Pipe not found", name)
}

// GetAllProtonEnvironmentAccountConnectionResources retrieves all proton.EnvironmentAccountConnection items from an AWS CloudFormation template
func (t *Template) GetAllProtonEnvironmentAccountConnectionResources() map[string]*proton.EnvironmentAccountConnection[any] {
	results := map[string]*proton.EnvironmentAccountConnection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *proton.EnvironmentAccountConnection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetProtonEnvironmentAccountConnectionWithName retrieves all proton.EnvironmentAccountConnection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetProtonEnvironmentAccountConnectionWithName(name string) (*proton.EnvironmentAccountConnection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *proton.EnvironmentAccountConnection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type proton.EnvironmentAccountConnection not found", name)
}

// GetAllProtonEnvironmentTemplateResources retrieves all proton.EnvironmentTemplate items from an AWS CloudFormation template
func (t *Template) GetAllProtonEnvironmentTemplateResources() map[string]*proton.EnvironmentTemplate[any] {
	results := map[string]*proton.EnvironmentTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *proton.EnvironmentTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetProtonEnvironmentTemplateWithName retrieves all proton.EnvironmentTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetProtonEnvironmentTemplateWithName(name string) (*proton.EnvironmentTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *proton.EnvironmentTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type proton.EnvironmentTemplate not found", name)
}

// GetAllProtonServiceTemplateResources retrieves all proton.ServiceTemplate items from an AWS CloudFormation template
func (t *Template) GetAllProtonServiceTemplateResources() map[string]*proton.ServiceTemplate[any] {
	results := map[string]*proton.ServiceTemplate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *proton.ServiceTemplate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetProtonServiceTemplateWithName retrieves all proton.ServiceTemplate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetProtonServiceTemplateWithName(name string) (*proton.ServiceTemplate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *proton.ServiceTemplate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type proton.ServiceTemplate not found", name)
}

// GetAllQLDBLedgerResources retrieves all qldb.Ledger items from an AWS CloudFormation template
func (t *Template) GetAllQLDBLedgerResources() map[string]*qldb.Ledger[any] {
	results := map[string]*qldb.Ledger[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *qldb.Ledger[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQLDBLedgerWithName retrieves all qldb.Ledger items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQLDBLedgerWithName(name string) (*qldb.Ledger[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *qldb.Ledger[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type qldb.Ledger not found", name)
}

// GetAllQLDBStreamResources retrieves all qldb.Stream items from an AWS CloudFormation template
func (t *Template) GetAllQLDBStreamResources() map[string]*qldb.Stream[any] {
	results := map[string]*qldb.Stream[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *qldb.Stream[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQLDBStreamWithName retrieves all qldb.Stream items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQLDBStreamWithName(name string) (*qldb.Stream[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *qldb.Stream[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type qldb.Stream not found", name)
}

// GetAllQuickSightAnalysisResources retrieves all quicksight.Analysis items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightAnalysisResources() map[string]*quicksight.Analysis[any] {
	results := map[string]*quicksight.Analysis[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.Analysis[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightAnalysisWithName retrieves all quicksight.Analysis items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightAnalysisWithName(name string) (*quicksight.Analysis[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.Analysis[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.Analysis not found", name)
}

// GetAllQuickSightDashboardResources retrieves all quicksight.Dashboard items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightDashboardResources() map[string]*quicksight.Dashboard[any] {
	results := map[string]*quicksight.Dashboard[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.Dashboard[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightDashboardWithName retrieves all quicksight.Dashboard items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightDashboardWithName(name string) (*quicksight.Dashboard[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.Dashboard[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.Dashboard not found", name)
}

// GetAllQuickSightDataSetResources retrieves all quicksight.DataSet items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightDataSetResources() map[string]*quicksight.DataSet[any] {
	results := map[string]*quicksight.DataSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.DataSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightDataSetWithName retrieves all quicksight.DataSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightDataSetWithName(name string) (*quicksight.DataSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.DataSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.DataSet not found", name)
}

// GetAllQuickSightDataSourceResources retrieves all quicksight.DataSource items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightDataSourceResources() map[string]*quicksight.DataSource[any] {
	results := map[string]*quicksight.DataSource[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.DataSource[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightDataSourceWithName retrieves all quicksight.DataSource items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightDataSourceWithName(name string) (*quicksight.DataSource[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.DataSource[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.DataSource not found", name)
}

// GetAllQuickSightRefreshScheduleResources retrieves all quicksight.RefreshSchedule items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightRefreshScheduleResources() map[string]*quicksight.RefreshSchedule[any] {
	results := map[string]*quicksight.RefreshSchedule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.RefreshSchedule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightRefreshScheduleWithName retrieves all quicksight.RefreshSchedule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightRefreshScheduleWithName(name string) (*quicksight.RefreshSchedule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.RefreshSchedule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.RefreshSchedule not found", name)
}

// GetAllQuickSightTemplateResources retrieves all quicksight.Template items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightTemplateResources() map[string]*quicksight.Template[any] {
	results := map[string]*quicksight.Template[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.Template[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightTemplateWithName retrieves all quicksight.Template items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightTemplateWithName(name string) (*quicksight.Template[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.Template[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.Template not found", name)
}

// GetAllQuickSightThemeResources retrieves all quicksight.Theme items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightThemeResources() map[string]*quicksight.Theme[any] {
	results := map[string]*quicksight.Theme[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.Theme[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightThemeWithName retrieves all quicksight.Theme items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightThemeWithName(name string) (*quicksight.Theme[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.Theme[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.Theme not found", name)
}

// GetAllQuickSightTopicResources retrieves all quicksight.Topic items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightTopicResources() map[string]*quicksight.Topic[any] {
	results := map[string]*quicksight.Topic[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.Topic[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightTopicWithName retrieves all quicksight.Topic items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightTopicWithName(name string) (*quicksight.Topic[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.Topic[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.Topic not found", name)
}

// GetAllQuickSightVPCConnectionResources retrieves all quicksight.VPCConnection items from an AWS CloudFormation template
func (t *Template) GetAllQuickSightVPCConnectionResources() map[string]*quicksight.VPCConnection[any] {
	results := map[string]*quicksight.VPCConnection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *quicksight.VPCConnection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetQuickSightVPCConnectionWithName retrieves all quicksight.VPCConnection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetQuickSightVPCConnectionWithName(name string) (*quicksight.VPCConnection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *quicksight.VPCConnection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type quicksight.VPCConnection not found", name)
}

// GetAllRAMPermissionResources retrieves all ram.Permission items from an AWS CloudFormation template
func (t *Template) GetAllRAMPermissionResources() map[string]*ram.Permission[any] {
	results := map[string]*ram.Permission[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ram.Permission[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRAMPermissionWithName retrieves all ram.Permission items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRAMPermissionWithName(name string) (*ram.Permission[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ram.Permission[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ram.Permission not found", name)
}

// GetAllRAMResourceShareResources retrieves all ram.ResourceShare items from an AWS CloudFormation template
func (t *Template) GetAllRAMResourceShareResources() map[string]*ram.ResourceShare[any] {
	results := map[string]*ram.ResourceShare[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ram.ResourceShare[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRAMResourceShareWithName retrieves all ram.ResourceShare items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRAMResourceShareWithName(name string) (*ram.ResourceShare[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ram.ResourceShare[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ram.ResourceShare not found", name)
}

// GetAllRDSDBClusterResources retrieves all rds.DBCluster items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBClusterResources() map[string]*rds.DBCluster[any] {
	results := map[string]*rds.DBCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBClusterWithName retrieves all rds.DBCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBClusterWithName(name string) (*rds.DBCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBCluster not found", name)
}

// GetAllRDSDBClusterParameterGroupResources retrieves all rds.DBClusterParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBClusterParameterGroupResources() map[string]*rds.DBClusterParameterGroup[any] {
	results := map[string]*rds.DBClusterParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBClusterParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBClusterParameterGroupWithName retrieves all rds.DBClusterParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBClusterParameterGroupWithName(name string) (*rds.DBClusterParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBClusterParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBClusterParameterGroup not found", name)
}

// GetAllRDSDBInstanceResources retrieves all rds.DBInstance items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBInstanceResources() map[string]*rds.DBInstance[any] {
	results := map[string]*rds.DBInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBInstanceWithName retrieves all rds.DBInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBInstanceWithName(name string) (*rds.DBInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBInstance not found", name)
}

// GetAllRDSDBParameterGroupResources retrieves all rds.DBParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBParameterGroupResources() map[string]*rds.DBParameterGroup[any] {
	results := map[string]*rds.DBParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBParameterGroupWithName retrieves all rds.DBParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBParameterGroupWithName(name string) (*rds.DBParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBParameterGroup not found", name)
}

// GetAllRDSDBProxyResources retrieves all rds.DBProxy items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBProxyResources() map[string]*rds.DBProxy[any] {
	results := map[string]*rds.DBProxy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBProxy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBProxyWithName retrieves all rds.DBProxy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBProxyWithName(name string) (*rds.DBProxy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBProxy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBProxy not found", name)
}

// GetAllRDSDBProxyEndpointResources retrieves all rds.DBProxyEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBProxyEndpointResources() map[string]*rds.DBProxyEndpoint[any] {
	results := map[string]*rds.DBProxyEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBProxyEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBProxyEndpointWithName retrieves all rds.DBProxyEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBProxyEndpointWithName(name string) (*rds.DBProxyEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBProxyEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBProxyEndpoint not found", name)
}

// GetAllRDSDBProxyTargetGroupResources retrieves all rds.DBProxyTargetGroup items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBProxyTargetGroupResources() map[string]*rds.DBProxyTargetGroup[any] {
	results := map[string]*rds.DBProxyTargetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBProxyTargetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBProxyTargetGroupWithName retrieves all rds.DBProxyTargetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBProxyTargetGroupWithName(name string) (*rds.DBProxyTargetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBProxyTargetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBProxyTargetGroup not found", name)
}

// GetAllRDSDBSecurityGroupResources retrieves all rds.DBSecurityGroup items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBSecurityGroupResources() map[string]*rds.DBSecurityGroup[any] {
	results := map[string]*rds.DBSecurityGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBSecurityGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBSecurityGroupWithName retrieves all rds.DBSecurityGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBSecurityGroupWithName(name string) (*rds.DBSecurityGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBSecurityGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBSecurityGroup not found", name)
}

// GetAllRDSDBSecurityGroupIngressResources retrieves all rds.DBSecurityGroupIngress items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBSecurityGroupIngressResources() map[string]*rds.DBSecurityGroupIngress[any] {
	results := map[string]*rds.DBSecurityGroupIngress[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBSecurityGroupIngress[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBSecurityGroupIngressWithName retrieves all rds.DBSecurityGroupIngress items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBSecurityGroupIngressWithName(name string) (*rds.DBSecurityGroupIngress[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBSecurityGroupIngress[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBSecurityGroupIngress not found", name)
}

// GetAllRDSDBSubnetGroupResources retrieves all rds.DBSubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllRDSDBSubnetGroupResources() map[string]*rds.DBSubnetGroup[any] {
	results := map[string]*rds.DBSubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.DBSubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSDBSubnetGroupWithName retrieves all rds.DBSubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSDBSubnetGroupWithName(name string) (*rds.DBSubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.DBSubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.DBSubnetGroup not found", name)
}

// GetAllRDSEventSubscriptionResources retrieves all rds.EventSubscription items from an AWS CloudFormation template
func (t *Template) GetAllRDSEventSubscriptionResources() map[string]*rds.EventSubscription[any] {
	results := map[string]*rds.EventSubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.EventSubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSEventSubscriptionWithName retrieves all rds.EventSubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSEventSubscriptionWithName(name string) (*rds.EventSubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.EventSubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.EventSubscription not found", name)
}

// GetAllRDSGlobalClusterResources retrieves all rds.GlobalCluster items from an AWS CloudFormation template
func (t *Template) GetAllRDSGlobalClusterResources() map[string]*rds.GlobalCluster[any] {
	results := map[string]*rds.GlobalCluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.GlobalCluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSGlobalClusterWithName retrieves all rds.GlobalCluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSGlobalClusterWithName(name string) (*rds.GlobalCluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.GlobalCluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.GlobalCluster not found", name)
}

// GetAllRDSOptionGroupResources retrieves all rds.OptionGroup items from an AWS CloudFormation template
func (t *Template) GetAllRDSOptionGroupResources() map[string]*rds.OptionGroup[any] {
	results := map[string]*rds.OptionGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rds.OptionGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRDSOptionGroupWithName retrieves all rds.OptionGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRDSOptionGroupWithName(name string) (*rds.OptionGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rds.OptionGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rds.OptionGroup not found", name)
}

// GetAllRUMAppMonitorResources retrieves all rum.AppMonitor items from an AWS CloudFormation template
func (t *Template) GetAllRUMAppMonitorResources() map[string]*rum.AppMonitor[any] {
	results := map[string]*rum.AppMonitor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rum.AppMonitor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRUMAppMonitorWithName retrieves all rum.AppMonitor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRUMAppMonitorWithName(name string) (*rum.AppMonitor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rum.AppMonitor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rum.AppMonitor not found", name)
}

// GetAllRedshiftClusterResources retrieves all redshift.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftClusterResources() map[string]*redshift.Cluster[any] {
	results := map[string]*redshift.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftClusterWithName retrieves all redshift.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftClusterWithName(name string) (*redshift.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.Cluster not found", name)
}

// GetAllRedshiftClusterParameterGroupResources retrieves all redshift.ClusterParameterGroup items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftClusterParameterGroupResources() map[string]*redshift.ClusterParameterGroup[any] {
	results := map[string]*redshift.ClusterParameterGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.ClusterParameterGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftClusterParameterGroupWithName retrieves all redshift.ClusterParameterGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftClusterParameterGroupWithName(name string) (*redshift.ClusterParameterGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.ClusterParameterGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.ClusterParameterGroup not found", name)
}

// GetAllRedshiftClusterSecurityGroupResources retrieves all redshift.ClusterSecurityGroup items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftClusterSecurityGroupResources() map[string]*redshift.ClusterSecurityGroup[any] {
	results := map[string]*redshift.ClusterSecurityGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.ClusterSecurityGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftClusterSecurityGroupWithName retrieves all redshift.ClusterSecurityGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftClusterSecurityGroupWithName(name string) (*redshift.ClusterSecurityGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.ClusterSecurityGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.ClusterSecurityGroup not found", name)
}

// GetAllRedshiftClusterSecurityGroupIngressResources retrieves all redshift.ClusterSecurityGroupIngress items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftClusterSecurityGroupIngressResources() map[string]*redshift.ClusterSecurityGroupIngress[any] {
	results := map[string]*redshift.ClusterSecurityGroupIngress[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.ClusterSecurityGroupIngress[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftClusterSecurityGroupIngressWithName retrieves all redshift.ClusterSecurityGroupIngress items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftClusterSecurityGroupIngressWithName(name string) (*redshift.ClusterSecurityGroupIngress[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.ClusterSecurityGroupIngress[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.ClusterSecurityGroupIngress not found", name)
}

// GetAllRedshiftClusterSubnetGroupResources retrieves all redshift.ClusterSubnetGroup items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftClusterSubnetGroupResources() map[string]*redshift.ClusterSubnetGroup[any] {
	results := map[string]*redshift.ClusterSubnetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.ClusterSubnetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftClusterSubnetGroupWithName retrieves all redshift.ClusterSubnetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftClusterSubnetGroupWithName(name string) (*redshift.ClusterSubnetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.ClusterSubnetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.ClusterSubnetGroup not found", name)
}

// GetAllRedshiftEndpointAccessResources retrieves all redshift.EndpointAccess items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftEndpointAccessResources() map[string]*redshift.EndpointAccess[any] {
	results := map[string]*redshift.EndpointAccess[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.EndpointAccess[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftEndpointAccessWithName retrieves all redshift.EndpointAccess items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftEndpointAccessWithName(name string) (*redshift.EndpointAccess[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.EndpointAccess[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.EndpointAccess not found", name)
}

// GetAllRedshiftEndpointAuthorizationResources retrieves all redshift.EndpointAuthorization items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftEndpointAuthorizationResources() map[string]*redshift.EndpointAuthorization[any] {
	results := map[string]*redshift.EndpointAuthorization[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.EndpointAuthorization[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftEndpointAuthorizationWithName retrieves all redshift.EndpointAuthorization items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftEndpointAuthorizationWithName(name string) (*redshift.EndpointAuthorization[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.EndpointAuthorization[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.EndpointAuthorization not found", name)
}

// GetAllRedshiftEventSubscriptionResources retrieves all redshift.EventSubscription items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftEventSubscriptionResources() map[string]*redshift.EventSubscription[any] {
	results := map[string]*redshift.EventSubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.EventSubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftEventSubscriptionWithName retrieves all redshift.EventSubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftEventSubscriptionWithName(name string) (*redshift.EventSubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.EventSubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.EventSubscription not found", name)
}

// GetAllRedshiftScheduledActionResources retrieves all redshift.ScheduledAction items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftScheduledActionResources() map[string]*redshift.ScheduledAction[any] {
	results := map[string]*redshift.ScheduledAction[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshift.ScheduledAction[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftScheduledActionWithName retrieves all redshift.ScheduledAction items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftScheduledActionWithName(name string) (*redshift.ScheduledAction[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshift.ScheduledAction[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshift.ScheduledAction not found", name)
}

// GetAllRedshiftServerlessNamespaceResources retrieves all redshiftserverless.Namespace items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftServerlessNamespaceResources() map[string]*redshiftserverless.Namespace[any] {
	results := map[string]*redshiftserverless.Namespace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshiftserverless.Namespace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftServerlessNamespaceWithName retrieves all redshiftserverless.Namespace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftServerlessNamespaceWithName(name string) (*redshiftserverless.Namespace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshiftserverless.Namespace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshiftserverless.Namespace not found", name)
}

// GetAllRedshiftServerlessWorkgroupResources retrieves all redshiftserverless.Workgroup items from an AWS CloudFormation template
func (t *Template) GetAllRedshiftServerlessWorkgroupResources() map[string]*redshiftserverless.Workgroup[any] {
	results := map[string]*redshiftserverless.Workgroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *redshiftserverless.Workgroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRedshiftServerlessWorkgroupWithName retrieves all redshiftserverless.Workgroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRedshiftServerlessWorkgroupWithName(name string) (*redshiftserverless.Workgroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *redshiftserverless.Workgroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type redshiftserverless.Workgroup not found", name)
}

// GetAllRefactorSpacesApplicationResources retrieves all refactorspaces.Application items from an AWS CloudFormation template
func (t *Template) GetAllRefactorSpacesApplicationResources() map[string]*refactorspaces.Application[any] {
	results := map[string]*refactorspaces.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *refactorspaces.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRefactorSpacesApplicationWithName retrieves all refactorspaces.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRefactorSpacesApplicationWithName(name string) (*refactorspaces.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *refactorspaces.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type refactorspaces.Application not found", name)
}

// GetAllRefactorSpacesEnvironmentResources retrieves all refactorspaces.Environment items from an AWS CloudFormation template
func (t *Template) GetAllRefactorSpacesEnvironmentResources() map[string]*refactorspaces.Environment[any] {
	results := map[string]*refactorspaces.Environment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *refactorspaces.Environment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRefactorSpacesEnvironmentWithName retrieves all refactorspaces.Environment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRefactorSpacesEnvironmentWithName(name string) (*refactorspaces.Environment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *refactorspaces.Environment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type refactorspaces.Environment not found", name)
}

// GetAllRefactorSpacesRouteResources retrieves all refactorspaces.Route items from an AWS CloudFormation template
func (t *Template) GetAllRefactorSpacesRouteResources() map[string]*refactorspaces.Route[any] {
	results := map[string]*refactorspaces.Route[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *refactorspaces.Route[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRefactorSpacesRouteWithName retrieves all refactorspaces.Route items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRefactorSpacesRouteWithName(name string) (*refactorspaces.Route[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *refactorspaces.Route[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type refactorspaces.Route not found", name)
}

// GetAllRefactorSpacesServiceResources retrieves all refactorspaces.Service items from an AWS CloudFormation template
func (t *Template) GetAllRefactorSpacesServiceResources() map[string]*refactorspaces.Service[any] {
	results := map[string]*refactorspaces.Service[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *refactorspaces.Service[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRefactorSpacesServiceWithName retrieves all refactorspaces.Service items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRefactorSpacesServiceWithName(name string) (*refactorspaces.Service[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *refactorspaces.Service[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type refactorspaces.Service not found", name)
}

// GetAllRekognitionCollectionResources retrieves all rekognition.Collection items from an AWS CloudFormation template
func (t *Template) GetAllRekognitionCollectionResources() map[string]*rekognition.Collection[any] {
	results := map[string]*rekognition.Collection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rekognition.Collection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRekognitionCollectionWithName retrieves all rekognition.Collection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRekognitionCollectionWithName(name string) (*rekognition.Collection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rekognition.Collection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rekognition.Collection not found", name)
}

// GetAllRekognitionProjectResources retrieves all rekognition.Project items from an AWS CloudFormation template
func (t *Template) GetAllRekognitionProjectResources() map[string]*rekognition.Project[any] {
	results := map[string]*rekognition.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rekognition.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRekognitionProjectWithName retrieves all rekognition.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRekognitionProjectWithName(name string) (*rekognition.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rekognition.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rekognition.Project not found", name)
}

// GetAllRekognitionStreamProcessorResources retrieves all rekognition.StreamProcessor items from an AWS CloudFormation template
func (t *Template) GetAllRekognitionStreamProcessorResources() map[string]*rekognition.StreamProcessor[any] {
	results := map[string]*rekognition.StreamProcessor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rekognition.StreamProcessor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRekognitionStreamProcessorWithName retrieves all rekognition.StreamProcessor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRekognitionStreamProcessorWithName(name string) (*rekognition.StreamProcessor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rekognition.StreamProcessor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rekognition.StreamProcessor not found", name)
}

// GetAllResilienceHubAppResources retrieves all resiliencehub.App items from an AWS CloudFormation template
func (t *Template) GetAllResilienceHubAppResources() map[string]*resiliencehub.App[any] {
	results := map[string]*resiliencehub.App[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *resiliencehub.App[any]:
			results[name] = resource
		}
	}
	return results
}

// GetResilienceHubAppWithName retrieves all resiliencehub.App items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetResilienceHubAppWithName(name string) (*resiliencehub.App[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *resiliencehub.App[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type resiliencehub.App not found", name)
}

// GetAllResilienceHubResiliencyPolicyResources retrieves all resiliencehub.ResiliencyPolicy items from an AWS CloudFormation template
func (t *Template) GetAllResilienceHubResiliencyPolicyResources() map[string]*resiliencehub.ResiliencyPolicy[any] {
	results := map[string]*resiliencehub.ResiliencyPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *resiliencehub.ResiliencyPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetResilienceHubResiliencyPolicyWithName retrieves all resiliencehub.ResiliencyPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetResilienceHubResiliencyPolicyWithName(name string) (*resiliencehub.ResiliencyPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *resiliencehub.ResiliencyPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type resiliencehub.ResiliencyPolicy not found", name)
}

// GetAllResourceExplorer2DefaultViewAssociationResources retrieves all resourceexplorer2.DefaultViewAssociation items from an AWS CloudFormation template
func (t *Template) GetAllResourceExplorer2DefaultViewAssociationResources() map[string]*resourceexplorer2.DefaultViewAssociation[any] {
	results := map[string]*resourceexplorer2.DefaultViewAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *resourceexplorer2.DefaultViewAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetResourceExplorer2DefaultViewAssociationWithName retrieves all resourceexplorer2.DefaultViewAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetResourceExplorer2DefaultViewAssociationWithName(name string) (*resourceexplorer2.DefaultViewAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *resourceexplorer2.DefaultViewAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type resourceexplorer2.DefaultViewAssociation not found", name)
}

// GetAllResourceExplorer2IndexResources retrieves all resourceexplorer2.Index items from an AWS CloudFormation template
func (t *Template) GetAllResourceExplorer2IndexResources() map[string]*resourceexplorer2.Index[any] {
	results := map[string]*resourceexplorer2.Index[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *resourceexplorer2.Index[any]:
			results[name] = resource
		}
	}
	return results
}

// GetResourceExplorer2IndexWithName retrieves all resourceexplorer2.Index items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetResourceExplorer2IndexWithName(name string) (*resourceexplorer2.Index[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *resourceexplorer2.Index[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type resourceexplorer2.Index not found", name)
}

// GetAllResourceExplorer2ViewResources retrieves all resourceexplorer2.View items from an AWS CloudFormation template
func (t *Template) GetAllResourceExplorer2ViewResources() map[string]*resourceexplorer2.View[any] {
	results := map[string]*resourceexplorer2.View[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *resourceexplorer2.View[any]:
			results[name] = resource
		}
	}
	return results
}

// GetResourceExplorer2ViewWithName retrieves all resourceexplorer2.View items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetResourceExplorer2ViewWithName(name string) (*resourceexplorer2.View[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *resourceexplorer2.View[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type resourceexplorer2.View not found", name)
}

// GetAllResourceGroupsGroupResources retrieves all resourcegroups.Group items from an AWS CloudFormation template
func (t *Template) GetAllResourceGroupsGroupResources() map[string]*resourcegroups.Group[any] {
	results := map[string]*resourcegroups.Group[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *resourcegroups.Group[any]:
			results[name] = resource
		}
	}
	return results
}

// GetResourceGroupsGroupWithName retrieves all resourcegroups.Group items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetResourceGroupsGroupWithName(name string) (*resourcegroups.Group[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *resourcegroups.Group[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type resourcegroups.Group not found", name)
}

// GetAllRoboMakerFleetResources retrieves all robomaker.Fleet items from an AWS CloudFormation template
func (t *Template) GetAllRoboMakerFleetResources() map[string]*robomaker.Fleet[any] {
	results := map[string]*robomaker.Fleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *robomaker.Fleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoboMakerFleetWithName retrieves all robomaker.Fleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoboMakerFleetWithName(name string) (*robomaker.Fleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *robomaker.Fleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type robomaker.Fleet not found", name)
}

// GetAllRoboMakerRobotResources retrieves all robomaker.Robot items from an AWS CloudFormation template
func (t *Template) GetAllRoboMakerRobotResources() map[string]*robomaker.Robot[any] {
	results := map[string]*robomaker.Robot[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *robomaker.Robot[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoboMakerRobotWithName retrieves all robomaker.Robot items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoboMakerRobotWithName(name string) (*robomaker.Robot[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *robomaker.Robot[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type robomaker.Robot not found", name)
}

// GetAllRoboMakerRobotApplicationResources retrieves all robomaker.RobotApplication items from an AWS CloudFormation template
func (t *Template) GetAllRoboMakerRobotApplicationResources() map[string]*robomaker.RobotApplication[any] {
	results := map[string]*robomaker.RobotApplication[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *robomaker.RobotApplication[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoboMakerRobotApplicationWithName retrieves all robomaker.RobotApplication items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoboMakerRobotApplicationWithName(name string) (*robomaker.RobotApplication[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *robomaker.RobotApplication[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type robomaker.RobotApplication not found", name)
}

// GetAllRoboMakerRobotApplicationVersionResources retrieves all robomaker.RobotApplicationVersion items from an AWS CloudFormation template
func (t *Template) GetAllRoboMakerRobotApplicationVersionResources() map[string]*robomaker.RobotApplicationVersion[any] {
	results := map[string]*robomaker.RobotApplicationVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *robomaker.RobotApplicationVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoboMakerRobotApplicationVersionWithName retrieves all robomaker.RobotApplicationVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoboMakerRobotApplicationVersionWithName(name string) (*robomaker.RobotApplicationVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *robomaker.RobotApplicationVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type robomaker.RobotApplicationVersion not found", name)
}

// GetAllRoboMakerSimulationApplicationResources retrieves all robomaker.SimulationApplication items from an AWS CloudFormation template
func (t *Template) GetAllRoboMakerSimulationApplicationResources() map[string]*robomaker.SimulationApplication[any] {
	results := map[string]*robomaker.SimulationApplication[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *robomaker.SimulationApplication[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoboMakerSimulationApplicationWithName retrieves all robomaker.SimulationApplication items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoboMakerSimulationApplicationWithName(name string) (*robomaker.SimulationApplication[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *robomaker.SimulationApplication[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type robomaker.SimulationApplication not found", name)
}

// GetAllRoboMakerSimulationApplicationVersionResources retrieves all robomaker.SimulationApplicationVersion items from an AWS CloudFormation template
func (t *Template) GetAllRoboMakerSimulationApplicationVersionResources() map[string]*robomaker.SimulationApplicationVersion[any] {
	results := map[string]*robomaker.SimulationApplicationVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *robomaker.SimulationApplicationVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoboMakerSimulationApplicationVersionWithName retrieves all robomaker.SimulationApplicationVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoboMakerSimulationApplicationVersionWithName(name string) (*robomaker.SimulationApplicationVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *robomaker.SimulationApplicationVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type robomaker.SimulationApplicationVersion not found", name)
}

// GetAllRolesAnywhereCRLResources retrieves all rolesanywhere.CRL items from an AWS CloudFormation template
func (t *Template) GetAllRolesAnywhereCRLResources() map[string]*rolesanywhere.CRL[any] {
	results := map[string]*rolesanywhere.CRL[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rolesanywhere.CRL[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRolesAnywhereCRLWithName retrieves all rolesanywhere.CRL items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRolesAnywhereCRLWithName(name string) (*rolesanywhere.CRL[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rolesanywhere.CRL[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rolesanywhere.CRL not found", name)
}

// GetAllRolesAnywhereProfileResources retrieves all rolesanywhere.Profile items from an AWS CloudFormation template
func (t *Template) GetAllRolesAnywhereProfileResources() map[string]*rolesanywhere.Profile[any] {
	results := map[string]*rolesanywhere.Profile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rolesanywhere.Profile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRolesAnywhereProfileWithName retrieves all rolesanywhere.Profile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRolesAnywhereProfileWithName(name string) (*rolesanywhere.Profile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rolesanywhere.Profile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rolesanywhere.Profile not found", name)
}

// GetAllRolesAnywhereTrustAnchorResources retrieves all rolesanywhere.TrustAnchor items from an AWS CloudFormation template
func (t *Template) GetAllRolesAnywhereTrustAnchorResources() map[string]*rolesanywhere.TrustAnchor[any] {
	results := map[string]*rolesanywhere.TrustAnchor[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *rolesanywhere.TrustAnchor[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRolesAnywhereTrustAnchorWithName retrieves all rolesanywhere.TrustAnchor items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRolesAnywhereTrustAnchorWithName(name string) (*rolesanywhere.TrustAnchor[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *rolesanywhere.TrustAnchor[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type rolesanywhere.TrustAnchor not found", name)
}

// GetAllRoute53CidrCollectionResources retrieves all route53.CidrCollection items from an AWS CloudFormation template
func (t *Template) GetAllRoute53CidrCollectionResources() map[string]*route53.CidrCollection[any] {
	results := map[string]*route53.CidrCollection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.CidrCollection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53CidrCollectionWithName retrieves all route53.CidrCollection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53CidrCollectionWithName(name string) (*route53.CidrCollection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.CidrCollection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.CidrCollection not found", name)
}

// GetAllRoute53DNSSECResources retrieves all route53.DNSSEC items from an AWS CloudFormation template
func (t *Template) GetAllRoute53DNSSECResources() map[string]*route53.DNSSEC[any] {
	results := map[string]*route53.DNSSEC[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.DNSSEC[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53DNSSECWithName retrieves all route53.DNSSEC items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53DNSSECWithName(name string) (*route53.DNSSEC[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.DNSSEC[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.DNSSEC not found", name)
}

// GetAllRoute53HealthCheckResources retrieves all route53.HealthCheck items from an AWS CloudFormation template
func (t *Template) GetAllRoute53HealthCheckResources() map[string]*route53.HealthCheck[any] {
	results := map[string]*route53.HealthCheck[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.HealthCheck[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53HealthCheckWithName retrieves all route53.HealthCheck items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53HealthCheckWithName(name string) (*route53.HealthCheck[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.HealthCheck[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.HealthCheck not found", name)
}

// GetAllRoute53HostedZoneResources retrieves all route53.HostedZone items from an AWS CloudFormation template
func (t *Template) GetAllRoute53HostedZoneResources() map[string]*route53.HostedZone[any] {
	results := map[string]*route53.HostedZone[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.HostedZone[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53HostedZoneWithName retrieves all route53.HostedZone items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53HostedZoneWithName(name string) (*route53.HostedZone[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.HostedZone[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.HostedZone not found", name)
}

// GetAllRoute53KeySigningKeyResources retrieves all route53.KeySigningKey items from an AWS CloudFormation template
func (t *Template) GetAllRoute53KeySigningKeyResources() map[string]*route53.KeySigningKey[any] {
	results := map[string]*route53.KeySigningKey[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.KeySigningKey[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53KeySigningKeyWithName retrieves all route53.KeySigningKey items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53KeySigningKeyWithName(name string) (*route53.KeySigningKey[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.KeySigningKey[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.KeySigningKey not found", name)
}

// GetAllRoute53RecordSetResources retrieves all route53.RecordSet items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecordSetResources() map[string]*route53.RecordSet[any] {
	results := map[string]*route53.RecordSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.RecordSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecordSetWithName retrieves all route53.RecordSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecordSetWithName(name string) (*route53.RecordSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.RecordSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.RecordSet not found", name)
}

// GetAllRoute53RecordSetGroupResources retrieves all route53.RecordSetGroup items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecordSetGroupResources() map[string]*route53.RecordSetGroup[any] {
	results := map[string]*route53.RecordSetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53.RecordSetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecordSetGroupWithName retrieves all route53.RecordSetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecordSetGroupWithName(name string) (*route53.RecordSetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53.RecordSetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53.RecordSetGroup not found", name)
}

// GetAllRoute53RecoveryControlClusterResources retrieves all route53recoverycontrol.Cluster items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryControlClusterResources() map[string]*route53recoverycontrol.Cluster[any] {
	results := map[string]*route53recoverycontrol.Cluster[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.Cluster[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryControlClusterWithName retrieves all route53recoverycontrol.Cluster items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryControlClusterWithName(name string) (*route53recoverycontrol.Cluster[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.Cluster[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoverycontrol.Cluster not found", name)
}

// GetAllRoute53RecoveryControlControlPanelResources retrieves all route53recoverycontrol.ControlPanel items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryControlControlPanelResources() map[string]*route53recoverycontrol.ControlPanel[any] {
	results := map[string]*route53recoverycontrol.ControlPanel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.ControlPanel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryControlControlPanelWithName retrieves all route53recoverycontrol.ControlPanel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryControlControlPanelWithName(name string) (*route53recoverycontrol.ControlPanel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.ControlPanel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoverycontrol.ControlPanel not found", name)
}

// GetAllRoute53RecoveryControlRoutingControlResources retrieves all route53recoverycontrol.RoutingControl items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryControlRoutingControlResources() map[string]*route53recoverycontrol.RoutingControl[any] {
	results := map[string]*route53recoverycontrol.RoutingControl[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.RoutingControl[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryControlRoutingControlWithName retrieves all route53recoverycontrol.RoutingControl items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryControlRoutingControlWithName(name string) (*route53recoverycontrol.RoutingControl[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.RoutingControl[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoverycontrol.RoutingControl not found", name)
}

// GetAllRoute53RecoveryControlSafetyRuleResources retrieves all route53recoverycontrol.SafetyRule items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryControlSafetyRuleResources() map[string]*route53recoverycontrol.SafetyRule[any] {
	results := map[string]*route53recoverycontrol.SafetyRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.SafetyRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryControlSafetyRuleWithName retrieves all route53recoverycontrol.SafetyRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryControlSafetyRuleWithName(name string) (*route53recoverycontrol.SafetyRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoverycontrol.SafetyRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoverycontrol.SafetyRule not found", name)
}

// GetAllRoute53RecoveryReadinessCellResources retrieves all route53recoveryreadiness.Cell items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryReadinessCellResources() map[string]*route53recoveryreadiness.Cell[any] {
	results := map[string]*route53recoveryreadiness.Cell[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.Cell[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryReadinessCellWithName retrieves all route53recoveryreadiness.Cell items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryReadinessCellWithName(name string) (*route53recoveryreadiness.Cell[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.Cell[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoveryreadiness.Cell not found", name)
}

// GetAllRoute53RecoveryReadinessReadinessCheckResources retrieves all route53recoveryreadiness.ReadinessCheck items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryReadinessReadinessCheckResources() map[string]*route53recoveryreadiness.ReadinessCheck[any] {
	results := map[string]*route53recoveryreadiness.ReadinessCheck[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.ReadinessCheck[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryReadinessReadinessCheckWithName retrieves all route53recoveryreadiness.ReadinessCheck items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryReadinessReadinessCheckWithName(name string) (*route53recoveryreadiness.ReadinessCheck[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.ReadinessCheck[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoveryreadiness.ReadinessCheck not found", name)
}

// GetAllRoute53RecoveryReadinessRecoveryGroupResources retrieves all route53recoveryreadiness.RecoveryGroup items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryReadinessRecoveryGroupResources() map[string]*route53recoveryreadiness.RecoveryGroup[any] {
	results := map[string]*route53recoveryreadiness.RecoveryGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.RecoveryGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryReadinessRecoveryGroupWithName retrieves all route53recoveryreadiness.RecoveryGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryReadinessRecoveryGroupWithName(name string) (*route53recoveryreadiness.RecoveryGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.RecoveryGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoveryreadiness.RecoveryGroup not found", name)
}

// GetAllRoute53RecoveryReadinessResourceSetResources retrieves all route53recoveryreadiness.ResourceSet items from an AWS CloudFormation template
func (t *Template) GetAllRoute53RecoveryReadinessResourceSetResources() map[string]*route53recoveryreadiness.ResourceSet[any] {
	results := map[string]*route53recoveryreadiness.ResourceSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.ResourceSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53RecoveryReadinessResourceSetWithName retrieves all route53recoveryreadiness.ResourceSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53RecoveryReadinessResourceSetWithName(name string) (*route53recoveryreadiness.ResourceSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53recoveryreadiness.ResourceSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53recoveryreadiness.ResourceSet not found", name)
}

// GetAllRoute53ResolverFirewallDomainListResources retrieves all route53resolver.FirewallDomainList items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverFirewallDomainListResources() map[string]*route53resolver.FirewallDomainList[any] {
	results := map[string]*route53resolver.FirewallDomainList[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.FirewallDomainList[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverFirewallDomainListWithName retrieves all route53resolver.FirewallDomainList items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverFirewallDomainListWithName(name string) (*route53resolver.FirewallDomainList[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.FirewallDomainList[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.FirewallDomainList not found", name)
}

// GetAllRoute53ResolverFirewallRuleGroupResources retrieves all route53resolver.FirewallRuleGroup items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverFirewallRuleGroupResources() map[string]*route53resolver.FirewallRuleGroup[any] {
	results := map[string]*route53resolver.FirewallRuleGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.FirewallRuleGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverFirewallRuleGroupWithName retrieves all route53resolver.FirewallRuleGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverFirewallRuleGroupWithName(name string) (*route53resolver.FirewallRuleGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.FirewallRuleGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.FirewallRuleGroup not found", name)
}

// GetAllRoute53ResolverFirewallRuleGroupAssociationResources retrieves all route53resolver.FirewallRuleGroupAssociation items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverFirewallRuleGroupAssociationResources() map[string]*route53resolver.FirewallRuleGroupAssociation[any] {
	results := map[string]*route53resolver.FirewallRuleGroupAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.FirewallRuleGroupAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverFirewallRuleGroupAssociationWithName retrieves all route53resolver.FirewallRuleGroupAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverFirewallRuleGroupAssociationWithName(name string) (*route53resolver.FirewallRuleGroupAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.FirewallRuleGroupAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.FirewallRuleGroupAssociation not found", name)
}

// GetAllRoute53ResolverResolverConfigResources retrieves all route53resolver.ResolverConfig items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverConfigResources() map[string]*route53resolver.ResolverConfig[any] {
	results := map[string]*route53resolver.ResolverConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverConfigWithName retrieves all route53resolver.ResolverConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverConfigWithName(name string) (*route53resolver.ResolverConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverConfig not found", name)
}

// GetAllRoute53ResolverResolverDNSSECConfigResources retrieves all route53resolver.ResolverDNSSECConfig items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverDNSSECConfigResources() map[string]*route53resolver.ResolverDNSSECConfig[any] {
	results := map[string]*route53resolver.ResolverDNSSECConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverDNSSECConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverDNSSECConfigWithName retrieves all route53resolver.ResolverDNSSECConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverDNSSECConfigWithName(name string) (*route53resolver.ResolverDNSSECConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverDNSSECConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverDNSSECConfig not found", name)
}

// GetAllRoute53ResolverResolverEndpointResources retrieves all route53resolver.ResolverEndpoint items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverEndpointResources() map[string]*route53resolver.ResolverEndpoint[any] {
	results := map[string]*route53resolver.ResolverEndpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverEndpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverEndpointWithName retrieves all route53resolver.ResolverEndpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverEndpointWithName(name string) (*route53resolver.ResolverEndpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverEndpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverEndpoint not found", name)
}

// GetAllRoute53ResolverResolverQueryLoggingConfigResources retrieves all route53resolver.ResolverQueryLoggingConfig items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverQueryLoggingConfigResources() map[string]*route53resolver.ResolverQueryLoggingConfig[any] {
	results := map[string]*route53resolver.ResolverQueryLoggingConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverQueryLoggingConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverQueryLoggingConfigWithName retrieves all route53resolver.ResolverQueryLoggingConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverQueryLoggingConfigWithName(name string) (*route53resolver.ResolverQueryLoggingConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverQueryLoggingConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverQueryLoggingConfig not found", name)
}

// GetAllRoute53ResolverResolverQueryLoggingConfigAssociationResources retrieves all route53resolver.ResolverQueryLoggingConfigAssociation items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverQueryLoggingConfigAssociationResources() map[string]*route53resolver.ResolverQueryLoggingConfigAssociation[any] {
	results := map[string]*route53resolver.ResolverQueryLoggingConfigAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverQueryLoggingConfigAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverQueryLoggingConfigAssociationWithName retrieves all route53resolver.ResolverQueryLoggingConfigAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverQueryLoggingConfigAssociationWithName(name string) (*route53resolver.ResolverQueryLoggingConfigAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverQueryLoggingConfigAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverQueryLoggingConfigAssociation not found", name)
}

// GetAllRoute53ResolverResolverRuleResources retrieves all route53resolver.ResolverRule items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverRuleResources() map[string]*route53resolver.ResolverRule[any] {
	results := map[string]*route53resolver.ResolverRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverRuleWithName retrieves all route53resolver.ResolverRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverRuleWithName(name string) (*route53resolver.ResolverRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverRule not found", name)
}

// GetAllRoute53ResolverResolverRuleAssociationResources retrieves all route53resolver.ResolverRuleAssociation items from an AWS CloudFormation template
func (t *Template) GetAllRoute53ResolverResolverRuleAssociationResources() map[string]*route53resolver.ResolverRuleAssociation[any] {
	results := map[string]*route53resolver.ResolverRuleAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverRuleAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetRoute53ResolverResolverRuleAssociationWithName retrieves all route53resolver.ResolverRuleAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetRoute53ResolverResolverRuleAssociationWithName(name string) (*route53resolver.ResolverRuleAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *route53resolver.ResolverRuleAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type route53resolver.ResolverRuleAssociation not found", name)
}

// GetAllS3AccessPointResources retrieves all s3.AccessPoint items from an AWS CloudFormation template
func (t *Template) GetAllS3AccessPointResources() map[string]*s3.AccessPoint[any] {
	results := map[string]*s3.AccessPoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3.AccessPoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3AccessPointWithName retrieves all s3.AccessPoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3AccessPointWithName(name string) (*s3.AccessPoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3.AccessPoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3.AccessPoint not found", name)
}

// GetAllS3BucketResources retrieves all s3.Bucket items from an AWS CloudFormation template
func (t *Template) GetAllS3BucketResources() map[string]*s3.Bucket[any] {
	results := map[string]*s3.Bucket[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3.Bucket[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3BucketWithName retrieves all s3.Bucket items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3BucketWithName(name string) (*s3.Bucket[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3.Bucket[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3.Bucket not found", name)
}

// GetAllS3BucketPolicyResources retrieves all s3.BucketPolicy items from an AWS CloudFormation template
func (t *Template) GetAllS3BucketPolicyResources() map[string]*s3.BucketPolicy[any] {
	results := map[string]*s3.BucketPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3.BucketPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3BucketPolicyWithName retrieves all s3.BucketPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3BucketPolicyWithName(name string) (*s3.BucketPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3.BucketPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3.BucketPolicy not found", name)
}

// GetAllS3MultiRegionAccessPointResources retrieves all s3.MultiRegionAccessPoint items from an AWS CloudFormation template
func (t *Template) GetAllS3MultiRegionAccessPointResources() map[string]*s3.MultiRegionAccessPoint[any] {
	results := map[string]*s3.MultiRegionAccessPoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3.MultiRegionAccessPoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3MultiRegionAccessPointWithName retrieves all s3.MultiRegionAccessPoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3MultiRegionAccessPointWithName(name string) (*s3.MultiRegionAccessPoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3.MultiRegionAccessPoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3.MultiRegionAccessPoint not found", name)
}

// GetAllS3MultiRegionAccessPointPolicyResources retrieves all s3.MultiRegionAccessPointPolicy items from an AWS CloudFormation template
func (t *Template) GetAllS3MultiRegionAccessPointPolicyResources() map[string]*s3.MultiRegionAccessPointPolicy[any] {
	results := map[string]*s3.MultiRegionAccessPointPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3.MultiRegionAccessPointPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3MultiRegionAccessPointPolicyWithName retrieves all s3.MultiRegionAccessPointPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3MultiRegionAccessPointPolicyWithName(name string) (*s3.MultiRegionAccessPointPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3.MultiRegionAccessPointPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3.MultiRegionAccessPointPolicy not found", name)
}

// GetAllS3StorageLensResources retrieves all s3.StorageLens items from an AWS CloudFormation template
func (t *Template) GetAllS3StorageLensResources() map[string]*s3.StorageLens[any] {
	results := map[string]*s3.StorageLens[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3.StorageLens[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3StorageLensWithName retrieves all s3.StorageLens items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3StorageLensWithName(name string) (*s3.StorageLens[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3.StorageLens[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3.StorageLens not found", name)
}

// GetAllS3ObjectLambdaAccessPointResources retrieves all s3objectlambda.AccessPoint items from an AWS CloudFormation template
func (t *Template) GetAllS3ObjectLambdaAccessPointResources() map[string]*s3objectlambda.AccessPoint[any] {
	results := map[string]*s3objectlambda.AccessPoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3objectlambda.AccessPoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3ObjectLambdaAccessPointWithName retrieves all s3objectlambda.AccessPoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3ObjectLambdaAccessPointWithName(name string) (*s3objectlambda.AccessPoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3objectlambda.AccessPoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3objectlambda.AccessPoint not found", name)
}

// GetAllS3ObjectLambdaAccessPointPolicyResources retrieves all s3objectlambda.AccessPointPolicy items from an AWS CloudFormation template
func (t *Template) GetAllS3ObjectLambdaAccessPointPolicyResources() map[string]*s3objectlambda.AccessPointPolicy[any] {
	results := map[string]*s3objectlambda.AccessPointPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3objectlambda.AccessPointPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3ObjectLambdaAccessPointPolicyWithName retrieves all s3objectlambda.AccessPointPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3ObjectLambdaAccessPointPolicyWithName(name string) (*s3objectlambda.AccessPointPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3objectlambda.AccessPointPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3objectlambda.AccessPointPolicy not found", name)
}

// GetAllS3OutpostsAccessPointResources retrieves all s3outposts.AccessPoint items from an AWS CloudFormation template
func (t *Template) GetAllS3OutpostsAccessPointResources() map[string]*s3outposts.AccessPoint[any] {
	results := map[string]*s3outposts.AccessPoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3outposts.AccessPoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3OutpostsAccessPointWithName retrieves all s3outposts.AccessPoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3OutpostsAccessPointWithName(name string) (*s3outposts.AccessPoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3outposts.AccessPoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3outposts.AccessPoint not found", name)
}

// GetAllS3OutpostsBucketResources retrieves all s3outposts.Bucket items from an AWS CloudFormation template
func (t *Template) GetAllS3OutpostsBucketResources() map[string]*s3outposts.Bucket[any] {
	results := map[string]*s3outposts.Bucket[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3outposts.Bucket[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3OutpostsBucketWithName retrieves all s3outposts.Bucket items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3OutpostsBucketWithName(name string) (*s3outposts.Bucket[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3outposts.Bucket[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3outposts.Bucket not found", name)
}

// GetAllS3OutpostsBucketPolicyResources retrieves all s3outposts.BucketPolicy items from an AWS CloudFormation template
func (t *Template) GetAllS3OutpostsBucketPolicyResources() map[string]*s3outposts.BucketPolicy[any] {
	results := map[string]*s3outposts.BucketPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3outposts.BucketPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3OutpostsBucketPolicyWithName retrieves all s3outposts.BucketPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3OutpostsBucketPolicyWithName(name string) (*s3outposts.BucketPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3outposts.BucketPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3outposts.BucketPolicy not found", name)
}

// GetAllS3OutpostsEndpointResources retrieves all s3outposts.Endpoint items from an AWS CloudFormation template
func (t *Template) GetAllS3OutpostsEndpointResources() map[string]*s3outposts.Endpoint[any] {
	results := map[string]*s3outposts.Endpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *s3outposts.Endpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetS3OutpostsEndpointWithName retrieves all s3outposts.Endpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetS3OutpostsEndpointWithName(name string) (*s3outposts.Endpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *s3outposts.Endpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type s3outposts.Endpoint not found", name)
}

// GetAllSDBDomainResources retrieves all sdb.Domain items from an AWS CloudFormation template
func (t *Template) GetAllSDBDomainResources() map[string]*sdb.Domain[any] {
	results := map[string]*sdb.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sdb.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSDBDomainWithName retrieves all sdb.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSDBDomainWithName(name string) (*sdb.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sdb.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sdb.Domain not found", name)
}

// GetAllSESConfigurationSetResources retrieves all ses.ConfigurationSet items from an AWS CloudFormation template
func (t *Template) GetAllSESConfigurationSetResources() map[string]*ses.ConfigurationSet[any] {
	results := map[string]*ses.ConfigurationSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.ConfigurationSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESConfigurationSetWithName retrieves all ses.ConfigurationSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESConfigurationSetWithName(name string) (*ses.ConfigurationSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.ConfigurationSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.ConfigurationSet not found", name)
}

// GetAllSESConfigurationSetEventDestinationResources retrieves all ses.ConfigurationSetEventDestination items from an AWS CloudFormation template
func (t *Template) GetAllSESConfigurationSetEventDestinationResources() map[string]*ses.ConfigurationSetEventDestination[any] {
	results := map[string]*ses.ConfigurationSetEventDestination[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.ConfigurationSetEventDestination[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESConfigurationSetEventDestinationWithName retrieves all ses.ConfigurationSetEventDestination items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESConfigurationSetEventDestinationWithName(name string) (*ses.ConfigurationSetEventDestination[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.ConfigurationSetEventDestination[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.ConfigurationSetEventDestination not found", name)
}

// GetAllSESContactListResources retrieves all ses.ContactList items from an AWS CloudFormation template
func (t *Template) GetAllSESContactListResources() map[string]*ses.ContactList[any] {
	results := map[string]*ses.ContactList[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.ContactList[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESContactListWithName retrieves all ses.ContactList items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESContactListWithName(name string) (*ses.ContactList[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.ContactList[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.ContactList not found", name)
}

// GetAllSESDedicatedIpPoolResources retrieves all ses.DedicatedIpPool items from an AWS CloudFormation template
func (t *Template) GetAllSESDedicatedIpPoolResources() map[string]*ses.DedicatedIpPool[any] {
	results := map[string]*ses.DedicatedIpPool[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.DedicatedIpPool[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESDedicatedIpPoolWithName retrieves all ses.DedicatedIpPool items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESDedicatedIpPoolWithName(name string) (*ses.DedicatedIpPool[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.DedicatedIpPool[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.DedicatedIpPool not found", name)
}

// GetAllSESEmailIdentityResources retrieves all ses.EmailIdentity items from an AWS CloudFormation template
func (t *Template) GetAllSESEmailIdentityResources() map[string]*ses.EmailIdentity[any] {
	results := map[string]*ses.EmailIdentity[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.EmailIdentity[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESEmailIdentityWithName retrieves all ses.EmailIdentity items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESEmailIdentityWithName(name string) (*ses.EmailIdentity[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.EmailIdentity[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.EmailIdentity not found", name)
}

// GetAllSESReceiptFilterResources retrieves all ses.ReceiptFilter items from an AWS CloudFormation template
func (t *Template) GetAllSESReceiptFilterResources() map[string]*ses.ReceiptFilter[any] {
	results := map[string]*ses.ReceiptFilter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.ReceiptFilter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESReceiptFilterWithName retrieves all ses.ReceiptFilter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESReceiptFilterWithName(name string) (*ses.ReceiptFilter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.ReceiptFilter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.ReceiptFilter not found", name)
}

// GetAllSESReceiptRuleResources retrieves all ses.ReceiptRule items from an AWS CloudFormation template
func (t *Template) GetAllSESReceiptRuleResources() map[string]*ses.ReceiptRule[any] {
	results := map[string]*ses.ReceiptRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.ReceiptRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESReceiptRuleWithName retrieves all ses.ReceiptRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESReceiptRuleWithName(name string) (*ses.ReceiptRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.ReceiptRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.ReceiptRule not found", name)
}

// GetAllSESReceiptRuleSetResources retrieves all ses.ReceiptRuleSet items from an AWS CloudFormation template
func (t *Template) GetAllSESReceiptRuleSetResources() map[string]*ses.ReceiptRuleSet[any] {
	results := map[string]*ses.ReceiptRuleSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.ReceiptRuleSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESReceiptRuleSetWithName retrieves all ses.ReceiptRuleSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESReceiptRuleSetWithName(name string) (*ses.ReceiptRuleSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.ReceiptRuleSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.ReceiptRuleSet not found", name)
}

// GetAllSESTemplateResources retrieves all ses.Template items from an AWS CloudFormation template
func (t *Template) GetAllSESTemplateResources() map[string]*ses.Template[any] {
	results := map[string]*ses.Template[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.Template[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESTemplateWithName retrieves all ses.Template items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESTemplateWithName(name string) (*ses.Template[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.Template[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.Template not found", name)
}

// GetAllSESVdmAttributesResources retrieves all ses.VdmAttributes items from an AWS CloudFormation template
func (t *Template) GetAllSESVdmAttributesResources() map[string]*ses.VdmAttributes[any] {
	results := map[string]*ses.VdmAttributes[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ses.VdmAttributes[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSESVdmAttributesWithName retrieves all ses.VdmAttributes items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSESVdmAttributesWithName(name string) (*ses.VdmAttributes[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ses.VdmAttributes[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ses.VdmAttributes not found", name)
}

// GetAllSNSSubscriptionResources retrieves all sns.Subscription items from an AWS CloudFormation template
func (t *Template) GetAllSNSSubscriptionResources() map[string]*sns.Subscription[any] {
	results := map[string]*sns.Subscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sns.Subscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSNSSubscriptionWithName retrieves all sns.Subscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSNSSubscriptionWithName(name string) (*sns.Subscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sns.Subscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sns.Subscription not found", name)
}

// GetAllSNSTopicResources retrieves all sns.Topic items from an AWS CloudFormation template
func (t *Template) GetAllSNSTopicResources() map[string]*sns.Topic[any] {
	results := map[string]*sns.Topic[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sns.Topic[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSNSTopicWithName retrieves all sns.Topic items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSNSTopicWithName(name string) (*sns.Topic[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sns.Topic[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sns.Topic not found", name)
}

// GetAllSNSTopicPolicyResources retrieves all sns.TopicPolicy items from an AWS CloudFormation template
func (t *Template) GetAllSNSTopicPolicyResources() map[string]*sns.TopicPolicy[any] {
	results := map[string]*sns.TopicPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sns.TopicPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSNSTopicPolicyWithName retrieves all sns.TopicPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSNSTopicPolicyWithName(name string) (*sns.TopicPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sns.TopicPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sns.TopicPolicy not found", name)
}

// GetAllSQSQueueResources retrieves all sqs.Queue items from an AWS CloudFormation template
func (t *Template) GetAllSQSQueueResources() map[string]*sqs.Queue[any] {
	results := map[string]*sqs.Queue[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sqs.Queue[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSQSQueueWithName retrieves all sqs.Queue items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSQSQueueWithName(name string) (*sqs.Queue[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sqs.Queue[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sqs.Queue not found", name)
}

// GetAllSQSQueuePolicyResources retrieves all sqs.QueuePolicy items from an AWS CloudFormation template
func (t *Template) GetAllSQSQueuePolicyResources() map[string]*sqs.QueuePolicy[any] {
	results := map[string]*sqs.QueuePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sqs.QueuePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSQSQueuePolicyWithName retrieves all sqs.QueuePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSQSQueuePolicyWithName(name string) (*sqs.QueuePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sqs.QueuePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sqs.QueuePolicy not found", name)
}

// GetAllSSMAssociationResources retrieves all ssm.Association items from an AWS CloudFormation template
func (t *Template) GetAllSSMAssociationResources() map[string]*ssm.Association[any] {
	results := map[string]*ssm.Association[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.Association[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMAssociationWithName retrieves all ssm.Association items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMAssociationWithName(name string) (*ssm.Association[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.Association[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.Association not found", name)
}

// GetAllSSMDocumentResources retrieves all ssm.Document items from an AWS CloudFormation template
func (t *Template) GetAllSSMDocumentResources() map[string]*ssm.Document[any] {
	results := map[string]*ssm.Document[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.Document[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMDocumentWithName retrieves all ssm.Document items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMDocumentWithName(name string) (*ssm.Document[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.Document[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.Document not found", name)
}

// GetAllSSMMaintenanceWindowResources retrieves all ssm.MaintenanceWindow items from an AWS CloudFormation template
func (t *Template) GetAllSSMMaintenanceWindowResources() map[string]*ssm.MaintenanceWindow[any] {
	results := map[string]*ssm.MaintenanceWindow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.MaintenanceWindow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMMaintenanceWindowWithName retrieves all ssm.MaintenanceWindow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMMaintenanceWindowWithName(name string) (*ssm.MaintenanceWindow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.MaintenanceWindow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.MaintenanceWindow not found", name)
}

// GetAllSSMMaintenanceWindowTargetResources retrieves all ssm.MaintenanceWindowTarget items from an AWS CloudFormation template
func (t *Template) GetAllSSMMaintenanceWindowTargetResources() map[string]*ssm.MaintenanceWindowTarget[any] {
	results := map[string]*ssm.MaintenanceWindowTarget[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.MaintenanceWindowTarget[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMMaintenanceWindowTargetWithName retrieves all ssm.MaintenanceWindowTarget items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMMaintenanceWindowTargetWithName(name string) (*ssm.MaintenanceWindowTarget[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.MaintenanceWindowTarget[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.MaintenanceWindowTarget not found", name)
}

// GetAllSSMMaintenanceWindowTaskResources retrieves all ssm.MaintenanceWindowTask items from an AWS CloudFormation template
func (t *Template) GetAllSSMMaintenanceWindowTaskResources() map[string]*ssm.MaintenanceWindowTask[any] {
	results := map[string]*ssm.MaintenanceWindowTask[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.MaintenanceWindowTask[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMMaintenanceWindowTaskWithName retrieves all ssm.MaintenanceWindowTask items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMMaintenanceWindowTaskWithName(name string) (*ssm.MaintenanceWindowTask[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.MaintenanceWindowTask[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.MaintenanceWindowTask not found", name)
}

// GetAllSSMParameterResources retrieves all ssm.Parameter items from an AWS CloudFormation template
func (t *Template) GetAllSSMParameterResources() map[string]*ssm.Parameter[any] {
	results := map[string]*ssm.Parameter[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.Parameter[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMParameterWithName retrieves all ssm.Parameter items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMParameterWithName(name string) (*ssm.Parameter[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.Parameter[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.Parameter not found", name)
}

// GetAllSSMPatchBaselineResources retrieves all ssm.PatchBaseline items from an AWS CloudFormation template
func (t *Template) GetAllSSMPatchBaselineResources() map[string]*ssm.PatchBaseline[any] {
	results := map[string]*ssm.PatchBaseline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.PatchBaseline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMPatchBaselineWithName retrieves all ssm.PatchBaseline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMPatchBaselineWithName(name string) (*ssm.PatchBaseline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.PatchBaseline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.PatchBaseline not found", name)
}

// GetAllSSMResourceDataSyncResources retrieves all ssm.ResourceDataSync items from an AWS CloudFormation template
func (t *Template) GetAllSSMResourceDataSyncResources() map[string]*ssm.ResourceDataSync[any] {
	results := map[string]*ssm.ResourceDataSync[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.ResourceDataSync[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMResourceDataSyncWithName retrieves all ssm.ResourceDataSync items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMResourceDataSyncWithName(name string) (*ssm.ResourceDataSync[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.ResourceDataSync[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.ResourceDataSync not found", name)
}

// GetAllSSMResourcePolicyResources retrieves all ssm.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllSSMResourcePolicyResources() map[string]*ssm.ResourcePolicy[any] {
	results := map[string]*ssm.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssm.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMResourcePolicyWithName retrieves all ssm.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMResourcePolicyWithName(name string) (*ssm.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssm.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssm.ResourcePolicy not found", name)
}

// GetAllSSMContactsContactResources retrieves all ssmcontacts.Contact items from an AWS CloudFormation template
func (t *Template) GetAllSSMContactsContactResources() map[string]*ssmcontacts.Contact[any] {
	results := map[string]*ssmcontacts.Contact[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssmcontacts.Contact[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMContactsContactWithName retrieves all ssmcontacts.Contact items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMContactsContactWithName(name string) (*ssmcontacts.Contact[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssmcontacts.Contact[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssmcontacts.Contact not found", name)
}

// GetAllSSMContactsContactChannelResources retrieves all ssmcontacts.ContactChannel items from an AWS CloudFormation template
func (t *Template) GetAllSSMContactsContactChannelResources() map[string]*ssmcontacts.ContactChannel[any] {
	results := map[string]*ssmcontacts.ContactChannel[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssmcontacts.ContactChannel[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMContactsContactChannelWithName retrieves all ssmcontacts.ContactChannel items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMContactsContactChannelWithName(name string) (*ssmcontacts.ContactChannel[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssmcontacts.ContactChannel[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssmcontacts.ContactChannel not found", name)
}

// GetAllSSMContactsPlanResources retrieves all ssmcontacts.Plan items from an AWS CloudFormation template
func (t *Template) GetAllSSMContactsPlanResources() map[string]*ssmcontacts.Plan[any] {
	results := map[string]*ssmcontacts.Plan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssmcontacts.Plan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMContactsPlanWithName retrieves all ssmcontacts.Plan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMContactsPlanWithName(name string) (*ssmcontacts.Plan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssmcontacts.Plan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssmcontacts.Plan not found", name)
}

// GetAllSSMContactsRotationResources retrieves all ssmcontacts.Rotation items from an AWS CloudFormation template
func (t *Template) GetAllSSMContactsRotationResources() map[string]*ssmcontacts.Rotation[any] {
	results := map[string]*ssmcontacts.Rotation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssmcontacts.Rotation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMContactsRotationWithName retrieves all ssmcontacts.Rotation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMContactsRotationWithName(name string) (*ssmcontacts.Rotation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssmcontacts.Rotation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssmcontacts.Rotation not found", name)
}

// GetAllSSMIncidentsReplicationSetResources retrieves all ssmincidents.ReplicationSet items from an AWS CloudFormation template
func (t *Template) GetAllSSMIncidentsReplicationSetResources() map[string]*ssmincidents.ReplicationSet[any] {
	results := map[string]*ssmincidents.ReplicationSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssmincidents.ReplicationSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMIncidentsReplicationSetWithName retrieves all ssmincidents.ReplicationSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMIncidentsReplicationSetWithName(name string) (*ssmincidents.ReplicationSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssmincidents.ReplicationSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssmincidents.ReplicationSet not found", name)
}

// GetAllSSMIncidentsResponsePlanResources retrieves all ssmincidents.ResponsePlan items from an AWS CloudFormation template
func (t *Template) GetAllSSMIncidentsResponsePlanResources() map[string]*ssmincidents.ResponsePlan[any] {
	results := map[string]*ssmincidents.ResponsePlan[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ssmincidents.ResponsePlan[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSMIncidentsResponsePlanWithName retrieves all ssmincidents.ResponsePlan items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSMIncidentsResponsePlanWithName(name string) (*ssmincidents.ResponsePlan[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ssmincidents.ResponsePlan[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ssmincidents.ResponsePlan not found", name)
}

// GetAllSSOAssignmentResources retrieves all sso.Assignment items from an AWS CloudFormation template
func (t *Template) GetAllSSOAssignmentResources() map[string]*sso.Assignment[any] {
	results := map[string]*sso.Assignment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sso.Assignment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSOAssignmentWithName retrieves all sso.Assignment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSOAssignmentWithName(name string) (*sso.Assignment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sso.Assignment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sso.Assignment not found", name)
}

// GetAllSSOInstanceAccessControlAttributeConfigurationResources retrieves all sso.InstanceAccessControlAttributeConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllSSOInstanceAccessControlAttributeConfigurationResources() map[string]*sso.InstanceAccessControlAttributeConfiguration[any] {
	results := map[string]*sso.InstanceAccessControlAttributeConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sso.InstanceAccessControlAttributeConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSOInstanceAccessControlAttributeConfigurationWithName retrieves all sso.InstanceAccessControlAttributeConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSOInstanceAccessControlAttributeConfigurationWithName(name string) (*sso.InstanceAccessControlAttributeConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sso.InstanceAccessControlAttributeConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sso.InstanceAccessControlAttributeConfiguration not found", name)
}

// GetAllSSOPermissionSetResources retrieves all sso.PermissionSet items from an AWS CloudFormation template
func (t *Template) GetAllSSOPermissionSetResources() map[string]*sso.PermissionSet[any] {
	results := map[string]*sso.PermissionSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sso.PermissionSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSSOPermissionSetWithName retrieves all sso.PermissionSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSSOPermissionSetWithName(name string) (*sso.PermissionSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sso.PermissionSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sso.PermissionSet not found", name)
}

// GetAllSageMakerAppResources retrieves all sagemaker.App items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerAppResources() map[string]*sagemaker.App[any] {
	results := map[string]*sagemaker.App[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.App[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerAppWithName retrieves all sagemaker.App items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerAppWithName(name string) (*sagemaker.App[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.App[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.App not found", name)
}

// GetAllSageMakerAppImageConfigResources retrieves all sagemaker.AppImageConfig items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerAppImageConfigResources() map[string]*sagemaker.AppImageConfig[any] {
	results := map[string]*sagemaker.AppImageConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.AppImageConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerAppImageConfigWithName retrieves all sagemaker.AppImageConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerAppImageConfigWithName(name string) (*sagemaker.AppImageConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.AppImageConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.AppImageConfig not found", name)
}

// GetAllSageMakerCodeRepositoryResources retrieves all sagemaker.CodeRepository items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerCodeRepositoryResources() map[string]*sagemaker.CodeRepository[any] {
	results := map[string]*sagemaker.CodeRepository[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.CodeRepository[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerCodeRepositoryWithName retrieves all sagemaker.CodeRepository items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerCodeRepositoryWithName(name string) (*sagemaker.CodeRepository[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.CodeRepository[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.CodeRepository not found", name)
}

// GetAllSageMakerDataQualityJobDefinitionResources retrieves all sagemaker.DataQualityJobDefinition items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerDataQualityJobDefinitionResources() map[string]*sagemaker.DataQualityJobDefinition[any] {
	results := map[string]*sagemaker.DataQualityJobDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.DataQualityJobDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerDataQualityJobDefinitionWithName retrieves all sagemaker.DataQualityJobDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerDataQualityJobDefinitionWithName(name string) (*sagemaker.DataQualityJobDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.DataQualityJobDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.DataQualityJobDefinition not found", name)
}

// GetAllSageMakerDeviceResources retrieves all sagemaker.Device items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerDeviceResources() map[string]*sagemaker.Device[any] {
	results := map[string]*sagemaker.Device[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Device[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerDeviceWithName retrieves all sagemaker.Device items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerDeviceWithName(name string) (*sagemaker.Device[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Device[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Device not found", name)
}

// GetAllSageMakerDeviceFleetResources retrieves all sagemaker.DeviceFleet items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerDeviceFleetResources() map[string]*sagemaker.DeviceFleet[any] {
	results := map[string]*sagemaker.DeviceFleet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.DeviceFleet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerDeviceFleetWithName retrieves all sagemaker.DeviceFleet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerDeviceFleetWithName(name string) (*sagemaker.DeviceFleet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.DeviceFleet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.DeviceFleet not found", name)
}

// GetAllSageMakerDomainResources retrieves all sagemaker.Domain items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerDomainResources() map[string]*sagemaker.Domain[any] {
	results := map[string]*sagemaker.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerDomainWithName retrieves all sagemaker.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerDomainWithName(name string) (*sagemaker.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Domain not found", name)
}

// GetAllSageMakerEndpointResources retrieves all sagemaker.Endpoint items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerEndpointResources() map[string]*sagemaker.Endpoint[any] {
	results := map[string]*sagemaker.Endpoint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Endpoint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerEndpointWithName retrieves all sagemaker.Endpoint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerEndpointWithName(name string) (*sagemaker.Endpoint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Endpoint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Endpoint not found", name)
}

// GetAllSageMakerEndpointConfigResources retrieves all sagemaker.EndpointConfig items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerEndpointConfigResources() map[string]*sagemaker.EndpointConfig[any] {
	results := map[string]*sagemaker.EndpointConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.EndpointConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerEndpointConfigWithName retrieves all sagemaker.EndpointConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerEndpointConfigWithName(name string) (*sagemaker.EndpointConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.EndpointConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.EndpointConfig not found", name)
}

// GetAllSageMakerFeatureGroupResources retrieves all sagemaker.FeatureGroup items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerFeatureGroupResources() map[string]*sagemaker.FeatureGroup[any] {
	results := map[string]*sagemaker.FeatureGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.FeatureGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerFeatureGroupWithName retrieves all sagemaker.FeatureGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerFeatureGroupWithName(name string) (*sagemaker.FeatureGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.FeatureGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.FeatureGroup not found", name)
}

// GetAllSageMakerImageResources retrieves all sagemaker.Image items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerImageResources() map[string]*sagemaker.Image[any] {
	results := map[string]*sagemaker.Image[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Image[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerImageWithName retrieves all sagemaker.Image items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerImageWithName(name string) (*sagemaker.Image[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Image[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Image not found", name)
}

// GetAllSageMakerImageVersionResources retrieves all sagemaker.ImageVersion items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerImageVersionResources() map[string]*sagemaker.ImageVersion[any] {
	results := map[string]*sagemaker.ImageVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ImageVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerImageVersionWithName retrieves all sagemaker.ImageVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerImageVersionWithName(name string) (*sagemaker.ImageVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ImageVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ImageVersion not found", name)
}

// GetAllSageMakerInferenceExperimentResources retrieves all sagemaker.InferenceExperiment items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerInferenceExperimentResources() map[string]*sagemaker.InferenceExperiment[any] {
	results := map[string]*sagemaker.InferenceExperiment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.InferenceExperiment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerInferenceExperimentWithName retrieves all sagemaker.InferenceExperiment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerInferenceExperimentWithName(name string) (*sagemaker.InferenceExperiment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.InferenceExperiment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.InferenceExperiment not found", name)
}

// GetAllSageMakerModelResources retrieves all sagemaker.Model items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelResources() map[string]*sagemaker.Model[any] {
	results := map[string]*sagemaker.Model[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Model[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelWithName retrieves all sagemaker.Model items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelWithName(name string) (*sagemaker.Model[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Model[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Model not found", name)
}

// GetAllSageMakerModelBiasJobDefinitionResources retrieves all sagemaker.ModelBiasJobDefinition items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelBiasJobDefinitionResources() map[string]*sagemaker.ModelBiasJobDefinition[any] {
	results := map[string]*sagemaker.ModelBiasJobDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ModelBiasJobDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelBiasJobDefinitionWithName retrieves all sagemaker.ModelBiasJobDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelBiasJobDefinitionWithName(name string) (*sagemaker.ModelBiasJobDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ModelBiasJobDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ModelBiasJobDefinition not found", name)
}

// GetAllSageMakerModelCardResources retrieves all sagemaker.ModelCard items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelCardResources() map[string]*sagemaker.ModelCard[any] {
	results := map[string]*sagemaker.ModelCard[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ModelCard[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelCardWithName retrieves all sagemaker.ModelCard items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelCardWithName(name string) (*sagemaker.ModelCard[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ModelCard[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ModelCard not found", name)
}

// GetAllSageMakerModelExplainabilityJobDefinitionResources retrieves all sagemaker.ModelExplainabilityJobDefinition items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelExplainabilityJobDefinitionResources() map[string]*sagemaker.ModelExplainabilityJobDefinition[any] {
	results := map[string]*sagemaker.ModelExplainabilityJobDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ModelExplainabilityJobDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelExplainabilityJobDefinitionWithName retrieves all sagemaker.ModelExplainabilityJobDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelExplainabilityJobDefinitionWithName(name string) (*sagemaker.ModelExplainabilityJobDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ModelExplainabilityJobDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ModelExplainabilityJobDefinition not found", name)
}

// GetAllSageMakerModelPackageResources retrieves all sagemaker.ModelPackage items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelPackageResources() map[string]*sagemaker.ModelPackage[any] {
	results := map[string]*sagemaker.ModelPackage[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ModelPackage[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelPackageWithName retrieves all sagemaker.ModelPackage items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelPackageWithName(name string) (*sagemaker.ModelPackage[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ModelPackage[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ModelPackage not found", name)
}

// GetAllSageMakerModelPackageGroupResources retrieves all sagemaker.ModelPackageGroup items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelPackageGroupResources() map[string]*sagemaker.ModelPackageGroup[any] {
	results := map[string]*sagemaker.ModelPackageGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ModelPackageGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelPackageGroupWithName retrieves all sagemaker.ModelPackageGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelPackageGroupWithName(name string) (*sagemaker.ModelPackageGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ModelPackageGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ModelPackageGroup not found", name)
}

// GetAllSageMakerModelQualityJobDefinitionResources retrieves all sagemaker.ModelQualityJobDefinition items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerModelQualityJobDefinitionResources() map[string]*sagemaker.ModelQualityJobDefinition[any] {
	results := map[string]*sagemaker.ModelQualityJobDefinition[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.ModelQualityJobDefinition[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerModelQualityJobDefinitionWithName retrieves all sagemaker.ModelQualityJobDefinition items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerModelQualityJobDefinitionWithName(name string) (*sagemaker.ModelQualityJobDefinition[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.ModelQualityJobDefinition[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.ModelQualityJobDefinition not found", name)
}

// GetAllSageMakerMonitoringScheduleResources retrieves all sagemaker.MonitoringSchedule items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerMonitoringScheduleResources() map[string]*sagemaker.MonitoringSchedule[any] {
	results := map[string]*sagemaker.MonitoringSchedule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.MonitoringSchedule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerMonitoringScheduleWithName retrieves all sagemaker.MonitoringSchedule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerMonitoringScheduleWithName(name string) (*sagemaker.MonitoringSchedule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.MonitoringSchedule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.MonitoringSchedule not found", name)
}

// GetAllSageMakerNotebookInstanceResources retrieves all sagemaker.NotebookInstance items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerNotebookInstanceResources() map[string]*sagemaker.NotebookInstance[any] {
	results := map[string]*sagemaker.NotebookInstance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.NotebookInstance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerNotebookInstanceWithName retrieves all sagemaker.NotebookInstance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerNotebookInstanceWithName(name string) (*sagemaker.NotebookInstance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.NotebookInstance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.NotebookInstance not found", name)
}

// GetAllSageMakerNotebookInstanceLifecycleConfigResources retrieves all sagemaker.NotebookInstanceLifecycleConfig items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerNotebookInstanceLifecycleConfigResources() map[string]*sagemaker.NotebookInstanceLifecycleConfig[any] {
	results := map[string]*sagemaker.NotebookInstanceLifecycleConfig[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.NotebookInstanceLifecycleConfig[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerNotebookInstanceLifecycleConfigWithName retrieves all sagemaker.NotebookInstanceLifecycleConfig items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerNotebookInstanceLifecycleConfigWithName(name string) (*sagemaker.NotebookInstanceLifecycleConfig[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.NotebookInstanceLifecycleConfig[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.NotebookInstanceLifecycleConfig not found", name)
}

// GetAllSageMakerPipelineResources retrieves all sagemaker.Pipeline items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerPipelineResources() map[string]*sagemaker.Pipeline[any] {
	results := map[string]*sagemaker.Pipeline[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Pipeline[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerPipelineWithName retrieves all sagemaker.Pipeline items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerPipelineWithName(name string) (*sagemaker.Pipeline[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Pipeline[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Pipeline not found", name)
}

// GetAllSageMakerProjectResources retrieves all sagemaker.Project items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerProjectResources() map[string]*sagemaker.Project[any] {
	results := map[string]*sagemaker.Project[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Project[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerProjectWithName retrieves all sagemaker.Project items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerProjectWithName(name string) (*sagemaker.Project[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Project[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Project not found", name)
}

// GetAllSageMakerSpaceResources retrieves all sagemaker.Space items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerSpaceResources() map[string]*sagemaker.Space[any] {
	results := map[string]*sagemaker.Space[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Space[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerSpaceWithName retrieves all sagemaker.Space items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerSpaceWithName(name string) (*sagemaker.Space[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Space[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Space not found", name)
}

// GetAllSageMakerUserProfileResources retrieves all sagemaker.UserProfile items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerUserProfileResources() map[string]*sagemaker.UserProfile[any] {
	results := map[string]*sagemaker.UserProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.UserProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerUserProfileWithName retrieves all sagemaker.UserProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerUserProfileWithName(name string) (*sagemaker.UserProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.UserProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.UserProfile not found", name)
}

// GetAllSageMakerWorkteamResources retrieves all sagemaker.Workteam items from an AWS CloudFormation template
func (t *Template) GetAllSageMakerWorkteamResources() map[string]*sagemaker.Workteam[any] {
	results := map[string]*sagemaker.Workteam[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *sagemaker.Workteam[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSageMakerWorkteamWithName retrieves all sagemaker.Workteam items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSageMakerWorkteamWithName(name string) (*sagemaker.Workteam[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *sagemaker.Workteam[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type sagemaker.Workteam not found", name)
}

// GetAllSchedulerScheduleResources retrieves all scheduler.Schedule items from an AWS CloudFormation template
func (t *Template) GetAllSchedulerScheduleResources() map[string]*scheduler.Schedule[any] {
	results := map[string]*scheduler.Schedule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *scheduler.Schedule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSchedulerScheduleWithName retrieves all scheduler.Schedule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSchedulerScheduleWithName(name string) (*scheduler.Schedule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *scheduler.Schedule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type scheduler.Schedule not found", name)
}

// GetAllSchedulerScheduleGroupResources retrieves all scheduler.ScheduleGroup items from an AWS CloudFormation template
func (t *Template) GetAllSchedulerScheduleGroupResources() map[string]*scheduler.ScheduleGroup[any] {
	results := map[string]*scheduler.ScheduleGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *scheduler.ScheduleGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSchedulerScheduleGroupWithName retrieves all scheduler.ScheduleGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSchedulerScheduleGroupWithName(name string) (*scheduler.ScheduleGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *scheduler.ScheduleGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type scheduler.ScheduleGroup not found", name)
}

// GetAllSecretsManagerResourcePolicyResources retrieves all secretsmanager.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllSecretsManagerResourcePolicyResources() map[string]*secretsmanager.ResourcePolicy[any] {
	results := map[string]*secretsmanager.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *secretsmanager.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSecretsManagerResourcePolicyWithName retrieves all secretsmanager.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSecretsManagerResourcePolicyWithName(name string) (*secretsmanager.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *secretsmanager.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type secretsmanager.ResourcePolicy not found", name)
}

// GetAllSecretsManagerRotationScheduleResources retrieves all secretsmanager.RotationSchedule items from an AWS CloudFormation template
func (t *Template) GetAllSecretsManagerRotationScheduleResources() map[string]*secretsmanager.RotationSchedule[any] {
	results := map[string]*secretsmanager.RotationSchedule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *secretsmanager.RotationSchedule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSecretsManagerRotationScheduleWithName retrieves all secretsmanager.RotationSchedule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSecretsManagerRotationScheduleWithName(name string) (*secretsmanager.RotationSchedule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *secretsmanager.RotationSchedule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type secretsmanager.RotationSchedule not found", name)
}

// GetAllSecretsManagerSecretResources retrieves all secretsmanager.Secret items from an AWS CloudFormation template
func (t *Template) GetAllSecretsManagerSecretResources() map[string]*secretsmanager.Secret[any] {
	results := map[string]*secretsmanager.Secret[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *secretsmanager.Secret[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSecretsManagerSecretWithName retrieves all secretsmanager.Secret items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSecretsManagerSecretWithName(name string) (*secretsmanager.Secret[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *secretsmanager.Secret[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type secretsmanager.Secret not found", name)
}

// GetAllSecretsManagerSecretTargetAttachmentResources retrieves all secretsmanager.SecretTargetAttachment items from an AWS CloudFormation template
func (t *Template) GetAllSecretsManagerSecretTargetAttachmentResources() map[string]*secretsmanager.SecretTargetAttachment[any] {
	results := map[string]*secretsmanager.SecretTargetAttachment[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *secretsmanager.SecretTargetAttachment[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSecretsManagerSecretTargetAttachmentWithName retrieves all secretsmanager.SecretTargetAttachment items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSecretsManagerSecretTargetAttachmentWithName(name string) (*secretsmanager.SecretTargetAttachment[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *secretsmanager.SecretTargetAttachment[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type secretsmanager.SecretTargetAttachment not found", name)
}

// GetAllSecurityHubHubResources retrieves all securityhub.Hub items from an AWS CloudFormation template
func (t *Template) GetAllSecurityHubHubResources() map[string]*securityhub.Hub[any] {
	results := map[string]*securityhub.Hub[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *securityhub.Hub[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSecurityHubHubWithName retrieves all securityhub.Hub items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSecurityHubHubWithName(name string) (*securityhub.Hub[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *securityhub.Hub[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type securityhub.Hub not found", name)
}

// GetAllServerlessApiResources retrieves all serverless.Api items from an AWS CloudFormation template
func (t *Template) GetAllServerlessApiResources() map[string]*serverless.Api[any] {
	results := map[string]*serverless.Api[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.Api[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessApiWithName retrieves all serverless.Api items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessApiWithName(name string) (*serverless.Api[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.Api[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.Api not found", name)
}

// GetAllServerlessApplicationResources retrieves all serverless.Application items from an AWS CloudFormation template
func (t *Template) GetAllServerlessApplicationResources() map[string]*serverless.Application[any] {
	results := map[string]*serverless.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessApplicationWithName retrieves all serverless.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessApplicationWithName(name string) (*serverless.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.Application not found", name)
}

// GetAllServerlessFunctionResources retrieves all serverless.Function items from an AWS CloudFormation template
func (t *Template) GetAllServerlessFunctionResources() map[string]*serverless.Function[any] {
	results := map[string]*serverless.Function[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.Function[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessFunctionWithName retrieves all serverless.Function items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessFunctionWithName(name string) (*serverless.Function[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.Function[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.Function not found", name)
}

// GetAllServerlessHttpApiResources retrieves all serverless.HttpApi items from an AWS CloudFormation template
func (t *Template) GetAllServerlessHttpApiResources() map[string]*serverless.HttpApi[any] {
	results := map[string]*serverless.HttpApi[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.HttpApi[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessHttpApiWithName retrieves all serverless.HttpApi items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessHttpApiWithName(name string) (*serverless.HttpApi[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.HttpApi[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.HttpApi not found", name)
}

// GetAllServerlessLayerVersionResources retrieves all serverless.LayerVersion items from an AWS CloudFormation template
func (t *Template) GetAllServerlessLayerVersionResources() map[string]*serverless.LayerVersion[any] {
	results := map[string]*serverless.LayerVersion[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.LayerVersion[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessLayerVersionWithName retrieves all serverless.LayerVersion items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessLayerVersionWithName(name string) (*serverless.LayerVersion[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.LayerVersion[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.LayerVersion not found", name)
}

// GetAllServerlessSimpleTableResources retrieves all serverless.SimpleTable items from an AWS CloudFormation template
func (t *Template) GetAllServerlessSimpleTableResources() map[string]*serverless.SimpleTable[any] {
	results := map[string]*serverless.SimpleTable[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.SimpleTable[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessSimpleTableWithName retrieves all serverless.SimpleTable items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessSimpleTableWithName(name string) (*serverless.SimpleTable[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.SimpleTable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.SimpleTable not found", name)
}

// GetAllServerlessStateMachineResources retrieves all serverless.StateMachine items from an AWS CloudFormation template
func (t *Template) GetAllServerlessStateMachineResources() map[string]*serverless.StateMachine[any] {
	results := map[string]*serverless.StateMachine[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *serverless.StateMachine[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServerlessStateMachineWithName retrieves all serverless.StateMachine items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServerlessStateMachineWithName(name string) (*serverless.StateMachine[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *serverless.StateMachine[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type serverless.StateMachine not found", name)
}

// GetAllServiceCatalogAcceptedPortfolioShareResources retrieves all servicecatalog.AcceptedPortfolioShare items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogAcceptedPortfolioShareResources() map[string]*servicecatalog.AcceptedPortfolioShare[any] {
	results := map[string]*servicecatalog.AcceptedPortfolioShare[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.AcceptedPortfolioShare[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogAcceptedPortfolioShareWithName retrieves all servicecatalog.AcceptedPortfolioShare items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogAcceptedPortfolioShareWithName(name string) (*servicecatalog.AcceptedPortfolioShare[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.AcceptedPortfolioShare[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.AcceptedPortfolioShare not found", name)
}

// GetAllServiceCatalogCloudFormationProductResources retrieves all servicecatalog.CloudFormationProduct items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogCloudFormationProductResources() map[string]*servicecatalog.CloudFormationProduct[any] {
	results := map[string]*servicecatalog.CloudFormationProduct[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.CloudFormationProduct[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogCloudFormationProductWithName retrieves all servicecatalog.CloudFormationProduct items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogCloudFormationProductWithName(name string) (*servicecatalog.CloudFormationProduct[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.CloudFormationProduct[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.CloudFormationProduct not found", name)
}

// GetAllServiceCatalogCloudFormationProvisionedProductResources retrieves all servicecatalog.CloudFormationProvisionedProduct items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogCloudFormationProvisionedProductResources() map[string]*servicecatalog.CloudFormationProvisionedProduct[any] {
	results := map[string]*servicecatalog.CloudFormationProvisionedProduct[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.CloudFormationProvisionedProduct[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogCloudFormationProvisionedProductWithName retrieves all servicecatalog.CloudFormationProvisionedProduct items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogCloudFormationProvisionedProductWithName(name string) (*servicecatalog.CloudFormationProvisionedProduct[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.CloudFormationProvisionedProduct[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.CloudFormationProvisionedProduct not found", name)
}

// GetAllServiceCatalogLaunchNotificationConstraintResources retrieves all servicecatalog.LaunchNotificationConstraint items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogLaunchNotificationConstraintResources() map[string]*servicecatalog.LaunchNotificationConstraint[any] {
	results := map[string]*servicecatalog.LaunchNotificationConstraint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.LaunchNotificationConstraint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogLaunchNotificationConstraintWithName retrieves all servicecatalog.LaunchNotificationConstraint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogLaunchNotificationConstraintWithName(name string) (*servicecatalog.LaunchNotificationConstraint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.LaunchNotificationConstraint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.LaunchNotificationConstraint not found", name)
}

// GetAllServiceCatalogLaunchRoleConstraintResources retrieves all servicecatalog.LaunchRoleConstraint items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogLaunchRoleConstraintResources() map[string]*servicecatalog.LaunchRoleConstraint[any] {
	results := map[string]*servicecatalog.LaunchRoleConstraint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.LaunchRoleConstraint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogLaunchRoleConstraintWithName retrieves all servicecatalog.LaunchRoleConstraint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogLaunchRoleConstraintWithName(name string) (*servicecatalog.LaunchRoleConstraint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.LaunchRoleConstraint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.LaunchRoleConstraint not found", name)
}

// GetAllServiceCatalogLaunchTemplateConstraintResources retrieves all servicecatalog.LaunchTemplateConstraint items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogLaunchTemplateConstraintResources() map[string]*servicecatalog.LaunchTemplateConstraint[any] {
	results := map[string]*servicecatalog.LaunchTemplateConstraint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.LaunchTemplateConstraint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogLaunchTemplateConstraintWithName retrieves all servicecatalog.LaunchTemplateConstraint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogLaunchTemplateConstraintWithName(name string) (*servicecatalog.LaunchTemplateConstraint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.LaunchTemplateConstraint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.LaunchTemplateConstraint not found", name)
}

// GetAllServiceCatalogPortfolioResources retrieves all servicecatalog.Portfolio items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogPortfolioResources() map[string]*servicecatalog.Portfolio[any] {
	results := map[string]*servicecatalog.Portfolio[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.Portfolio[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogPortfolioWithName retrieves all servicecatalog.Portfolio items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogPortfolioWithName(name string) (*servicecatalog.Portfolio[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.Portfolio[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.Portfolio not found", name)
}

// GetAllServiceCatalogPortfolioPrincipalAssociationResources retrieves all servicecatalog.PortfolioPrincipalAssociation items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogPortfolioPrincipalAssociationResources() map[string]*servicecatalog.PortfolioPrincipalAssociation[any] {
	results := map[string]*servicecatalog.PortfolioPrincipalAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.PortfolioPrincipalAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogPortfolioPrincipalAssociationWithName retrieves all servicecatalog.PortfolioPrincipalAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogPortfolioPrincipalAssociationWithName(name string) (*servicecatalog.PortfolioPrincipalAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.PortfolioPrincipalAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.PortfolioPrincipalAssociation not found", name)
}

// GetAllServiceCatalogPortfolioProductAssociationResources retrieves all servicecatalog.PortfolioProductAssociation items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogPortfolioProductAssociationResources() map[string]*servicecatalog.PortfolioProductAssociation[any] {
	results := map[string]*servicecatalog.PortfolioProductAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.PortfolioProductAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogPortfolioProductAssociationWithName retrieves all servicecatalog.PortfolioProductAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogPortfolioProductAssociationWithName(name string) (*servicecatalog.PortfolioProductAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.PortfolioProductAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.PortfolioProductAssociation not found", name)
}

// GetAllServiceCatalogPortfolioShareResources retrieves all servicecatalog.PortfolioShare items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogPortfolioShareResources() map[string]*servicecatalog.PortfolioShare[any] {
	results := map[string]*servicecatalog.PortfolioShare[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.PortfolioShare[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogPortfolioShareWithName retrieves all servicecatalog.PortfolioShare items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogPortfolioShareWithName(name string) (*servicecatalog.PortfolioShare[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.PortfolioShare[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.PortfolioShare not found", name)
}

// GetAllServiceCatalogResourceUpdateConstraintResources retrieves all servicecatalog.ResourceUpdateConstraint items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogResourceUpdateConstraintResources() map[string]*servicecatalog.ResourceUpdateConstraint[any] {
	results := map[string]*servicecatalog.ResourceUpdateConstraint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.ResourceUpdateConstraint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogResourceUpdateConstraintWithName retrieves all servicecatalog.ResourceUpdateConstraint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogResourceUpdateConstraintWithName(name string) (*servicecatalog.ResourceUpdateConstraint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.ResourceUpdateConstraint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.ResourceUpdateConstraint not found", name)
}

// GetAllServiceCatalogServiceActionResources retrieves all servicecatalog.ServiceAction items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogServiceActionResources() map[string]*servicecatalog.ServiceAction[any] {
	results := map[string]*servicecatalog.ServiceAction[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.ServiceAction[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogServiceActionWithName retrieves all servicecatalog.ServiceAction items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogServiceActionWithName(name string) (*servicecatalog.ServiceAction[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.ServiceAction[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.ServiceAction not found", name)
}

// GetAllServiceCatalogServiceActionAssociationResources retrieves all servicecatalog.ServiceActionAssociation items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogServiceActionAssociationResources() map[string]*servicecatalog.ServiceActionAssociation[any] {
	results := map[string]*servicecatalog.ServiceActionAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.ServiceActionAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogServiceActionAssociationWithName retrieves all servicecatalog.ServiceActionAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogServiceActionAssociationWithName(name string) (*servicecatalog.ServiceActionAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.ServiceActionAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.ServiceActionAssociation not found", name)
}

// GetAllServiceCatalogStackSetConstraintResources retrieves all servicecatalog.StackSetConstraint items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogStackSetConstraintResources() map[string]*servicecatalog.StackSetConstraint[any] {
	results := map[string]*servicecatalog.StackSetConstraint[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.StackSetConstraint[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogStackSetConstraintWithName retrieves all servicecatalog.StackSetConstraint items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogStackSetConstraintWithName(name string) (*servicecatalog.StackSetConstraint[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.StackSetConstraint[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.StackSetConstraint not found", name)
}

// GetAllServiceCatalogTagOptionResources retrieves all servicecatalog.TagOption items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogTagOptionResources() map[string]*servicecatalog.TagOption[any] {
	results := map[string]*servicecatalog.TagOption[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.TagOption[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogTagOptionWithName retrieves all servicecatalog.TagOption items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogTagOptionWithName(name string) (*servicecatalog.TagOption[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.TagOption[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.TagOption not found", name)
}

// GetAllServiceCatalogTagOptionAssociationResources retrieves all servicecatalog.TagOptionAssociation items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogTagOptionAssociationResources() map[string]*servicecatalog.TagOptionAssociation[any] {
	results := map[string]*servicecatalog.TagOptionAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalog.TagOptionAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogTagOptionAssociationWithName retrieves all servicecatalog.TagOptionAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogTagOptionAssociationWithName(name string) (*servicecatalog.TagOptionAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalog.TagOptionAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalog.TagOptionAssociation not found", name)
}

// GetAllServiceCatalogAppRegistryApplicationResources retrieves all servicecatalogappregistry.Application items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogAppRegistryApplicationResources() map[string]*servicecatalogappregistry.Application[any] {
	results := map[string]*servicecatalogappregistry.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogAppRegistryApplicationWithName retrieves all servicecatalogappregistry.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogAppRegistryApplicationWithName(name string) (*servicecatalogappregistry.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalogappregistry.Application not found", name)
}

// GetAllServiceCatalogAppRegistryAttributeGroupResources retrieves all servicecatalogappregistry.AttributeGroup items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogAppRegistryAttributeGroupResources() map[string]*servicecatalogappregistry.AttributeGroup[any] {
	results := map[string]*servicecatalogappregistry.AttributeGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.AttributeGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogAppRegistryAttributeGroupWithName retrieves all servicecatalogappregistry.AttributeGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogAppRegistryAttributeGroupWithName(name string) (*servicecatalogappregistry.AttributeGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.AttributeGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalogappregistry.AttributeGroup not found", name)
}

// GetAllServiceCatalogAppRegistryAttributeGroupAssociationResources retrieves all servicecatalogappregistry.AttributeGroupAssociation items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogAppRegistryAttributeGroupAssociationResources() map[string]*servicecatalogappregistry.AttributeGroupAssociation[any] {
	results := map[string]*servicecatalogappregistry.AttributeGroupAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.AttributeGroupAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogAppRegistryAttributeGroupAssociationWithName retrieves all servicecatalogappregistry.AttributeGroupAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogAppRegistryAttributeGroupAssociationWithName(name string) (*servicecatalogappregistry.AttributeGroupAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.AttributeGroupAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalogappregistry.AttributeGroupAssociation not found", name)
}

// GetAllServiceCatalogAppRegistryResourceAssociationResources retrieves all servicecatalogappregistry.ResourceAssociation items from an AWS CloudFormation template
func (t *Template) GetAllServiceCatalogAppRegistryResourceAssociationResources() map[string]*servicecatalogappregistry.ResourceAssociation[any] {
	results := map[string]*servicecatalogappregistry.ResourceAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.ResourceAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceCatalogAppRegistryResourceAssociationWithName retrieves all servicecatalogappregistry.ResourceAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceCatalogAppRegistryResourceAssociationWithName(name string) (*servicecatalogappregistry.ResourceAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicecatalogappregistry.ResourceAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicecatalogappregistry.ResourceAssociation not found", name)
}

// GetAllServiceDiscoveryHttpNamespaceResources retrieves all servicediscovery.HttpNamespace items from an AWS CloudFormation template
func (t *Template) GetAllServiceDiscoveryHttpNamespaceResources() map[string]*servicediscovery.HttpNamespace[any] {
	results := map[string]*servicediscovery.HttpNamespace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicediscovery.HttpNamespace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceDiscoveryHttpNamespaceWithName retrieves all servicediscovery.HttpNamespace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceDiscoveryHttpNamespaceWithName(name string) (*servicediscovery.HttpNamespace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicediscovery.HttpNamespace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicediscovery.HttpNamespace not found", name)
}

// GetAllServiceDiscoveryInstanceResources retrieves all servicediscovery.Instance items from an AWS CloudFormation template
func (t *Template) GetAllServiceDiscoveryInstanceResources() map[string]*servicediscovery.Instance[any] {
	results := map[string]*servicediscovery.Instance[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicediscovery.Instance[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceDiscoveryInstanceWithName retrieves all servicediscovery.Instance items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceDiscoveryInstanceWithName(name string) (*servicediscovery.Instance[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicediscovery.Instance[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicediscovery.Instance not found", name)
}

// GetAllServiceDiscoveryPrivateDnsNamespaceResources retrieves all servicediscovery.PrivateDnsNamespace items from an AWS CloudFormation template
func (t *Template) GetAllServiceDiscoveryPrivateDnsNamespaceResources() map[string]*servicediscovery.PrivateDnsNamespace[any] {
	results := map[string]*servicediscovery.PrivateDnsNamespace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicediscovery.PrivateDnsNamespace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceDiscoveryPrivateDnsNamespaceWithName retrieves all servicediscovery.PrivateDnsNamespace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceDiscoveryPrivateDnsNamespaceWithName(name string) (*servicediscovery.PrivateDnsNamespace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicediscovery.PrivateDnsNamespace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicediscovery.PrivateDnsNamespace not found", name)
}

// GetAllServiceDiscoveryPublicDnsNamespaceResources retrieves all servicediscovery.PublicDnsNamespace items from an AWS CloudFormation template
func (t *Template) GetAllServiceDiscoveryPublicDnsNamespaceResources() map[string]*servicediscovery.PublicDnsNamespace[any] {
	results := map[string]*servicediscovery.PublicDnsNamespace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicediscovery.PublicDnsNamespace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceDiscoveryPublicDnsNamespaceWithName retrieves all servicediscovery.PublicDnsNamespace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceDiscoveryPublicDnsNamespaceWithName(name string) (*servicediscovery.PublicDnsNamespace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicediscovery.PublicDnsNamespace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicediscovery.PublicDnsNamespace not found", name)
}

// GetAllServiceDiscoveryServiceResources retrieves all servicediscovery.Service items from an AWS CloudFormation template
func (t *Template) GetAllServiceDiscoveryServiceResources() map[string]*servicediscovery.Service[any] {
	results := map[string]*servicediscovery.Service[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *servicediscovery.Service[any]:
			results[name] = resource
		}
	}
	return results
}

// GetServiceDiscoveryServiceWithName retrieves all servicediscovery.Service items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetServiceDiscoveryServiceWithName(name string) (*servicediscovery.Service[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *servicediscovery.Service[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type servicediscovery.Service not found", name)
}

// GetAllShieldDRTAccessResources retrieves all shield.DRTAccess items from an AWS CloudFormation template
func (t *Template) GetAllShieldDRTAccessResources() map[string]*shield.DRTAccess[any] {
	results := map[string]*shield.DRTAccess[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *shield.DRTAccess[any]:
			results[name] = resource
		}
	}
	return results
}

// GetShieldDRTAccessWithName retrieves all shield.DRTAccess items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetShieldDRTAccessWithName(name string) (*shield.DRTAccess[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *shield.DRTAccess[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type shield.DRTAccess not found", name)
}

// GetAllShieldProactiveEngagementResources retrieves all shield.ProactiveEngagement items from an AWS CloudFormation template
func (t *Template) GetAllShieldProactiveEngagementResources() map[string]*shield.ProactiveEngagement[any] {
	results := map[string]*shield.ProactiveEngagement[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *shield.ProactiveEngagement[any]:
			results[name] = resource
		}
	}
	return results
}

// GetShieldProactiveEngagementWithName retrieves all shield.ProactiveEngagement items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetShieldProactiveEngagementWithName(name string) (*shield.ProactiveEngagement[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *shield.ProactiveEngagement[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type shield.ProactiveEngagement not found", name)
}

// GetAllShieldProtectionResources retrieves all shield.Protection items from an AWS CloudFormation template
func (t *Template) GetAllShieldProtectionResources() map[string]*shield.Protection[any] {
	results := map[string]*shield.Protection[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *shield.Protection[any]:
			results[name] = resource
		}
	}
	return results
}

// GetShieldProtectionWithName retrieves all shield.Protection items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetShieldProtectionWithName(name string) (*shield.Protection[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *shield.Protection[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type shield.Protection not found", name)
}

// GetAllShieldProtectionGroupResources retrieves all shield.ProtectionGroup items from an AWS CloudFormation template
func (t *Template) GetAllShieldProtectionGroupResources() map[string]*shield.ProtectionGroup[any] {
	results := map[string]*shield.ProtectionGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *shield.ProtectionGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetShieldProtectionGroupWithName retrieves all shield.ProtectionGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetShieldProtectionGroupWithName(name string) (*shield.ProtectionGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *shield.ProtectionGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type shield.ProtectionGroup not found", name)
}

// GetAllSignerProfilePermissionResources retrieves all signer.ProfilePermission items from an AWS CloudFormation template
func (t *Template) GetAllSignerProfilePermissionResources() map[string]*signer.ProfilePermission[any] {
	results := map[string]*signer.ProfilePermission[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *signer.ProfilePermission[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSignerProfilePermissionWithName retrieves all signer.ProfilePermission items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSignerProfilePermissionWithName(name string) (*signer.ProfilePermission[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *signer.ProfilePermission[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type signer.ProfilePermission not found", name)
}

// GetAllSignerSigningProfileResources retrieves all signer.SigningProfile items from an AWS CloudFormation template
func (t *Template) GetAllSignerSigningProfileResources() map[string]*signer.SigningProfile[any] {
	results := map[string]*signer.SigningProfile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *signer.SigningProfile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSignerSigningProfileWithName retrieves all signer.SigningProfile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSignerSigningProfileWithName(name string) (*signer.SigningProfile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *signer.SigningProfile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type signer.SigningProfile not found", name)
}

// GetAllSimSpaceWeaverSimulationResources retrieves all simspaceweaver.Simulation items from an AWS CloudFormation template
func (t *Template) GetAllSimSpaceWeaverSimulationResources() map[string]*simspaceweaver.Simulation[any] {
	results := map[string]*simspaceweaver.Simulation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *simspaceweaver.Simulation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSimSpaceWeaverSimulationWithName retrieves all simspaceweaver.Simulation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSimSpaceWeaverSimulationWithName(name string) (*simspaceweaver.Simulation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *simspaceweaver.Simulation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type simspaceweaver.Simulation not found", name)
}

// GetAllStepFunctionsActivityResources retrieves all stepfunctions.Activity items from an AWS CloudFormation template
func (t *Template) GetAllStepFunctionsActivityResources() map[string]*stepfunctions.Activity[any] {
	results := map[string]*stepfunctions.Activity[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *stepfunctions.Activity[any]:
			results[name] = resource
		}
	}
	return results
}

// GetStepFunctionsActivityWithName retrieves all stepfunctions.Activity items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetStepFunctionsActivityWithName(name string) (*stepfunctions.Activity[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *stepfunctions.Activity[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type stepfunctions.Activity not found", name)
}

// GetAllStepFunctionsStateMachineResources retrieves all stepfunctions.StateMachine items from an AWS CloudFormation template
func (t *Template) GetAllStepFunctionsStateMachineResources() map[string]*stepfunctions.StateMachine[any] {
	results := map[string]*stepfunctions.StateMachine[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *stepfunctions.StateMachine[any]:
			results[name] = resource
		}
	}
	return results
}

// GetStepFunctionsStateMachineWithName retrieves all stepfunctions.StateMachine items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetStepFunctionsStateMachineWithName(name string) (*stepfunctions.StateMachine[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *stepfunctions.StateMachine[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type stepfunctions.StateMachine not found", name)
}

// GetAllSupportAppAccountAliasResources retrieves all supportapp.AccountAlias items from an AWS CloudFormation template
func (t *Template) GetAllSupportAppAccountAliasResources() map[string]*supportapp.AccountAlias[any] {
	results := map[string]*supportapp.AccountAlias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *supportapp.AccountAlias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSupportAppAccountAliasWithName retrieves all supportapp.AccountAlias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSupportAppAccountAliasWithName(name string) (*supportapp.AccountAlias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *supportapp.AccountAlias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type supportapp.AccountAlias not found", name)
}

// GetAllSupportAppSlackChannelConfigurationResources retrieves all supportapp.SlackChannelConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllSupportAppSlackChannelConfigurationResources() map[string]*supportapp.SlackChannelConfiguration[any] {
	results := map[string]*supportapp.SlackChannelConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *supportapp.SlackChannelConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSupportAppSlackChannelConfigurationWithName retrieves all supportapp.SlackChannelConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSupportAppSlackChannelConfigurationWithName(name string) (*supportapp.SlackChannelConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *supportapp.SlackChannelConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type supportapp.SlackChannelConfiguration not found", name)
}

// GetAllSupportAppSlackWorkspaceConfigurationResources retrieves all supportapp.SlackWorkspaceConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllSupportAppSlackWorkspaceConfigurationResources() map[string]*supportapp.SlackWorkspaceConfiguration[any] {
	results := map[string]*supportapp.SlackWorkspaceConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *supportapp.SlackWorkspaceConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSupportAppSlackWorkspaceConfigurationWithName retrieves all supportapp.SlackWorkspaceConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSupportAppSlackWorkspaceConfigurationWithName(name string) (*supportapp.SlackWorkspaceConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *supportapp.SlackWorkspaceConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type supportapp.SlackWorkspaceConfiguration not found", name)
}

// GetAllSyntheticsCanaryResources retrieves all synthetics.Canary items from an AWS CloudFormation template
func (t *Template) GetAllSyntheticsCanaryResources() map[string]*synthetics.Canary[any] {
	results := map[string]*synthetics.Canary[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *synthetics.Canary[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSyntheticsCanaryWithName retrieves all synthetics.Canary items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSyntheticsCanaryWithName(name string) (*synthetics.Canary[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *synthetics.Canary[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type synthetics.Canary not found", name)
}

// GetAllSyntheticsGroupResources retrieves all synthetics.Group items from an AWS CloudFormation template
func (t *Template) GetAllSyntheticsGroupResources() map[string]*synthetics.Group[any] {
	results := map[string]*synthetics.Group[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *synthetics.Group[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSyntheticsGroupWithName retrieves all synthetics.Group items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSyntheticsGroupWithName(name string) (*synthetics.Group[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *synthetics.Group[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type synthetics.Group not found", name)
}

// GetAllSystemsManagerSAPApplicationResources retrieves all systemsmanagersap.Application items from an AWS CloudFormation template
func (t *Template) GetAllSystemsManagerSAPApplicationResources() map[string]*systemsmanagersap.Application[any] {
	results := map[string]*systemsmanagersap.Application[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *systemsmanagersap.Application[any]:
			results[name] = resource
		}
	}
	return results
}

// GetSystemsManagerSAPApplicationWithName retrieves all systemsmanagersap.Application items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetSystemsManagerSAPApplicationWithName(name string) (*systemsmanagersap.Application[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *systemsmanagersap.Application[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type systemsmanagersap.Application not found", name)
}

// GetAllTimestreamDatabaseResources retrieves all timestream.Database items from an AWS CloudFormation template
func (t *Template) GetAllTimestreamDatabaseResources() map[string]*timestream.Database[any] {
	results := map[string]*timestream.Database[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *timestream.Database[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTimestreamDatabaseWithName retrieves all timestream.Database items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTimestreamDatabaseWithName(name string) (*timestream.Database[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *timestream.Database[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type timestream.Database not found", name)
}

// GetAllTimestreamScheduledQueryResources retrieves all timestream.ScheduledQuery items from an AWS CloudFormation template
func (t *Template) GetAllTimestreamScheduledQueryResources() map[string]*timestream.ScheduledQuery[any] {
	results := map[string]*timestream.ScheduledQuery[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *timestream.ScheduledQuery[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTimestreamScheduledQueryWithName retrieves all timestream.ScheduledQuery items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTimestreamScheduledQueryWithName(name string) (*timestream.ScheduledQuery[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *timestream.ScheduledQuery[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type timestream.ScheduledQuery not found", name)
}

// GetAllTimestreamTableResources retrieves all timestream.Table items from an AWS CloudFormation template
func (t *Template) GetAllTimestreamTableResources() map[string]*timestream.Table[any] {
	results := map[string]*timestream.Table[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *timestream.Table[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTimestreamTableWithName retrieves all timestream.Table items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTimestreamTableWithName(name string) (*timestream.Table[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *timestream.Table[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type timestream.Table not found", name)
}

// GetAllTransferAgreementResources retrieves all transfer.Agreement items from an AWS CloudFormation template
func (t *Template) GetAllTransferAgreementResources() map[string]*transfer.Agreement[any] {
	results := map[string]*transfer.Agreement[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.Agreement[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferAgreementWithName retrieves all transfer.Agreement items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferAgreementWithName(name string) (*transfer.Agreement[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.Agreement[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.Agreement not found", name)
}

// GetAllTransferCertificateResources retrieves all transfer.Certificate items from an AWS CloudFormation template
func (t *Template) GetAllTransferCertificateResources() map[string]*transfer.Certificate[any] {
	results := map[string]*transfer.Certificate[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.Certificate[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferCertificateWithName retrieves all transfer.Certificate items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferCertificateWithName(name string) (*transfer.Certificate[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.Certificate[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.Certificate not found", name)
}

// GetAllTransferConnectorResources retrieves all transfer.Connector items from an AWS CloudFormation template
func (t *Template) GetAllTransferConnectorResources() map[string]*transfer.Connector[any] {
	results := map[string]*transfer.Connector[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.Connector[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferConnectorWithName retrieves all transfer.Connector items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferConnectorWithName(name string) (*transfer.Connector[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.Connector[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.Connector not found", name)
}

// GetAllTransferProfileResources retrieves all transfer.Profile items from an AWS CloudFormation template
func (t *Template) GetAllTransferProfileResources() map[string]*transfer.Profile[any] {
	results := map[string]*transfer.Profile[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.Profile[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferProfileWithName retrieves all transfer.Profile items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferProfileWithName(name string) (*transfer.Profile[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.Profile[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.Profile not found", name)
}

// GetAllTransferServerResources retrieves all transfer.Server items from an AWS CloudFormation template
func (t *Template) GetAllTransferServerResources() map[string]*transfer.Server[any] {
	results := map[string]*transfer.Server[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.Server[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferServerWithName retrieves all transfer.Server items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferServerWithName(name string) (*transfer.Server[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.Server[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.Server not found", name)
}

// GetAllTransferUserResources retrieves all transfer.User items from an AWS CloudFormation template
func (t *Template) GetAllTransferUserResources() map[string]*transfer.User[any] {
	results := map[string]*transfer.User[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.User[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferUserWithName retrieves all transfer.User items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferUserWithName(name string) (*transfer.User[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.User[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.User not found", name)
}

// GetAllTransferWorkflowResources retrieves all transfer.Workflow items from an AWS CloudFormation template
func (t *Template) GetAllTransferWorkflowResources() map[string]*transfer.Workflow[any] {
	results := map[string]*transfer.Workflow[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *transfer.Workflow[any]:
			results[name] = resource
		}
	}
	return results
}

// GetTransferWorkflowWithName retrieves all transfer.Workflow items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetTransferWorkflowWithName(name string) (*transfer.Workflow[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *transfer.Workflow[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type transfer.Workflow not found", name)
}

// GetAllVoiceIDDomainResources retrieves all voiceid.Domain items from an AWS CloudFormation template
func (t *Template) GetAllVoiceIDDomainResources() map[string]*voiceid.Domain[any] {
	results := map[string]*voiceid.Domain[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *voiceid.Domain[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVoiceIDDomainWithName retrieves all voiceid.Domain items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVoiceIDDomainWithName(name string) (*voiceid.Domain[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *voiceid.Domain[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type voiceid.Domain not found", name)
}

// GetAllVpcLatticeAccessLogSubscriptionResources retrieves all vpclattice.AccessLogSubscription items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeAccessLogSubscriptionResources() map[string]*vpclattice.AccessLogSubscription[any] {
	results := map[string]*vpclattice.AccessLogSubscription[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.AccessLogSubscription[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeAccessLogSubscriptionWithName retrieves all vpclattice.AccessLogSubscription items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeAccessLogSubscriptionWithName(name string) (*vpclattice.AccessLogSubscription[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.AccessLogSubscription[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.AccessLogSubscription not found", name)
}

// GetAllVpcLatticeAuthPolicyResources retrieves all vpclattice.AuthPolicy items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeAuthPolicyResources() map[string]*vpclattice.AuthPolicy[any] {
	results := map[string]*vpclattice.AuthPolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.AuthPolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeAuthPolicyWithName retrieves all vpclattice.AuthPolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeAuthPolicyWithName(name string) (*vpclattice.AuthPolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.AuthPolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.AuthPolicy not found", name)
}

// GetAllVpcLatticeListenerResources retrieves all vpclattice.Listener items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeListenerResources() map[string]*vpclattice.Listener[any] {
	results := map[string]*vpclattice.Listener[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.Listener[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeListenerWithName retrieves all vpclattice.Listener items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeListenerWithName(name string) (*vpclattice.Listener[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.Listener[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.Listener not found", name)
}

// GetAllVpcLatticeResourcePolicyResources retrieves all vpclattice.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeResourcePolicyResources() map[string]*vpclattice.ResourcePolicy[any] {
	results := map[string]*vpclattice.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeResourcePolicyWithName retrieves all vpclattice.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeResourcePolicyWithName(name string) (*vpclattice.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.ResourcePolicy not found", name)
}

// GetAllVpcLatticeRuleResources retrieves all vpclattice.Rule items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeRuleResources() map[string]*vpclattice.Rule[any] {
	results := map[string]*vpclattice.Rule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.Rule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeRuleWithName retrieves all vpclattice.Rule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeRuleWithName(name string) (*vpclattice.Rule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.Rule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.Rule not found", name)
}

// GetAllVpcLatticeServiceResources retrieves all vpclattice.Service items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeServiceResources() map[string]*vpclattice.Service[any] {
	results := map[string]*vpclattice.Service[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.Service[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeServiceWithName retrieves all vpclattice.Service items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeServiceWithName(name string) (*vpclattice.Service[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.Service[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.Service not found", name)
}

// GetAllVpcLatticeServiceNetworkResources retrieves all vpclattice.ServiceNetwork items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeServiceNetworkResources() map[string]*vpclattice.ServiceNetwork[any] {
	results := map[string]*vpclattice.ServiceNetwork[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.ServiceNetwork[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeServiceNetworkWithName retrieves all vpclattice.ServiceNetwork items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeServiceNetworkWithName(name string) (*vpclattice.ServiceNetwork[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.ServiceNetwork[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.ServiceNetwork not found", name)
}

// GetAllVpcLatticeServiceNetworkServiceAssociationResources retrieves all vpclattice.ServiceNetworkServiceAssociation items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeServiceNetworkServiceAssociationResources() map[string]*vpclattice.ServiceNetworkServiceAssociation[any] {
	results := map[string]*vpclattice.ServiceNetworkServiceAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.ServiceNetworkServiceAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeServiceNetworkServiceAssociationWithName retrieves all vpclattice.ServiceNetworkServiceAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeServiceNetworkServiceAssociationWithName(name string) (*vpclattice.ServiceNetworkServiceAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.ServiceNetworkServiceAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.ServiceNetworkServiceAssociation not found", name)
}

// GetAllVpcLatticeServiceNetworkVpcAssociationResources retrieves all vpclattice.ServiceNetworkVpcAssociation items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeServiceNetworkVpcAssociationResources() map[string]*vpclattice.ServiceNetworkVpcAssociation[any] {
	results := map[string]*vpclattice.ServiceNetworkVpcAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.ServiceNetworkVpcAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeServiceNetworkVpcAssociationWithName retrieves all vpclattice.ServiceNetworkVpcAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeServiceNetworkVpcAssociationWithName(name string) (*vpclattice.ServiceNetworkVpcAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.ServiceNetworkVpcAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.ServiceNetworkVpcAssociation not found", name)
}

// GetAllVpcLatticeTargetGroupResources retrieves all vpclattice.TargetGroup items from an AWS CloudFormation template
func (t *Template) GetAllVpcLatticeTargetGroupResources() map[string]*vpclattice.TargetGroup[any] {
	results := map[string]*vpclattice.TargetGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *vpclattice.TargetGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetVpcLatticeTargetGroupWithName retrieves all vpclattice.TargetGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetVpcLatticeTargetGroupWithName(name string) (*vpclattice.TargetGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *vpclattice.TargetGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type vpclattice.TargetGroup not found", name)
}

// GetAllWAFByteMatchSetResources retrieves all waf.ByteMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFByteMatchSetResources() map[string]*waf.ByteMatchSet[any] {
	results := map[string]*waf.ByteMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.ByteMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFByteMatchSetWithName retrieves all waf.ByteMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFByteMatchSetWithName(name string) (*waf.ByteMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.ByteMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.ByteMatchSet not found", name)
}

// GetAllWAFIPSetResources retrieves all waf.IPSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFIPSetResources() map[string]*waf.IPSet[any] {
	results := map[string]*waf.IPSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.IPSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFIPSetWithName retrieves all waf.IPSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFIPSetWithName(name string) (*waf.IPSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.IPSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.IPSet not found", name)
}

// GetAllWAFRuleResources retrieves all waf.Rule items from an AWS CloudFormation template
func (t *Template) GetAllWAFRuleResources() map[string]*waf.Rule[any] {
	results := map[string]*waf.Rule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.Rule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRuleWithName retrieves all waf.Rule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRuleWithName(name string) (*waf.Rule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.Rule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.Rule not found", name)
}

// GetAllWAFSizeConstraintSetResources retrieves all waf.SizeConstraintSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFSizeConstraintSetResources() map[string]*waf.SizeConstraintSet[any] {
	results := map[string]*waf.SizeConstraintSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.SizeConstraintSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFSizeConstraintSetWithName retrieves all waf.SizeConstraintSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFSizeConstraintSetWithName(name string) (*waf.SizeConstraintSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.SizeConstraintSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.SizeConstraintSet not found", name)
}

// GetAllWAFSqlInjectionMatchSetResources retrieves all waf.SqlInjectionMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFSqlInjectionMatchSetResources() map[string]*waf.SqlInjectionMatchSet[any] {
	results := map[string]*waf.SqlInjectionMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.SqlInjectionMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFSqlInjectionMatchSetWithName retrieves all waf.SqlInjectionMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFSqlInjectionMatchSetWithName(name string) (*waf.SqlInjectionMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.SqlInjectionMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.SqlInjectionMatchSet not found", name)
}

// GetAllWAFWebACLResources retrieves all waf.WebACL items from an AWS CloudFormation template
func (t *Template) GetAllWAFWebACLResources() map[string]*waf.WebACL[any] {
	results := map[string]*waf.WebACL[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.WebACL[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFWebACLWithName retrieves all waf.WebACL items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFWebACLWithName(name string) (*waf.WebACL[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.WebACL[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.WebACL not found", name)
}

// GetAllWAFXssMatchSetResources retrieves all waf.XssMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFXssMatchSetResources() map[string]*waf.XssMatchSet[any] {
	results := map[string]*waf.XssMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *waf.XssMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFXssMatchSetWithName retrieves all waf.XssMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFXssMatchSetWithName(name string) (*waf.XssMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *waf.XssMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type waf.XssMatchSet not found", name)
}

// GetAllWAFRegionalByteMatchSetResources retrieves all wafregional.ByteMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalByteMatchSetResources() map[string]*wafregional.ByteMatchSet[any] {
	results := map[string]*wafregional.ByteMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.ByteMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalByteMatchSetWithName retrieves all wafregional.ByteMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalByteMatchSetWithName(name string) (*wafregional.ByteMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.ByteMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.ByteMatchSet not found", name)
}

// GetAllWAFRegionalGeoMatchSetResources retrieves all wafregional.GeoMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalGeoMatchSetResources() map[string]*wafregional.GeoMatchSet[any] {
	results := map[string]*wafregional.GeoMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.GeoMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalGeoMatchSetWithName retrieves all wafregional.GeoMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalGeoMatchSetWithName(name string) (*wafregional.GeoMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.GeoMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.GeoMatchSet not found", name)
}

// GetAllWAFRegionalIPSetResources retrieves all wafregional.IPSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalIPSetResources() map[string]*wafregional.IPSet[any] {
	results := map[string]*wafregional.IPSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.IPSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalIPSetWithName retrieves all wafregional.IPSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalIPSetWithName(name string) (*wafregional.IPSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.IPSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.IPSet not found", name)
}

// GetAllWAFRegionalRateBasedRuleResources retrieves all wafregional.RateBasedRule items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalRateBasedRuleResources() map[string]*wafregional.RateBasedRule[any] {
	results := map[string]*wafregional.RateBasedRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.RateBasedRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalRateBasedRuleWithName retrieves all wafregional.RateBasedRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalRateBasedRuleWithName(name string) (*wafregional.RateBasedRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.RateBasedRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.RateBasedRule not found", name)
}

// GetAllWAFRegionalRegexPatternSetResources retrieves all wafregional.RegexPatternSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalRegexPatternSetResources() map[string]*wafregional.RegexPatternSet[any] {
	results := map[string]*wafregional.RegexPatternSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.RegexPatternSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalRegexPatternSetWithName retrieves all wafregional.RegexPatternSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalRegexPatternSetWithName(name string) (*wafregional.RegexPatternSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.RegexPatternSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.RegexPatternSet not found", name)
}

// GetAllWAFRegionalRuleResources retrieves all wafregional.Rule items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalRuleResources() map[string]*wafregional.Rule[any] {
	results := map[string]*wafregional.Rule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.Rule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalRuleWithName retrieves all wafregional.Rule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalRuleWithName(name string) (*wafregional.Rule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.Rule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.Rule not found", name)
}

// GetAllWAFRegionalSizeConstraintSetResources retrieves all wafregional.SizeConstraintSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalSizeConstraintSetResources() map[string]*wafregional.SizeConstraintSet[any] {
	results := map[string]*wafregional.SizeConstraintSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.SizeConstraintSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalSizeConstraintSetWithName retrieves all wafregional.SizeConstraintSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalSizeConstraintSetWithName(name string) (*wafregional.SizeConstraintSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.SizeConstraintSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.SizeConstraintSet not found", name)
}

// GetAllWAFRegionalSqlInjectionMatchSetResources retrieves all wafregional.SqlInjectionMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalSqlInjectionMatchSetResources() map[string]*wafregional.SqlInjectionMatchSet[any] {
	results := map[string]*wafregional.SqlInjectionMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.SqlInjectionMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalSqlInjectionMatchSetWithName retrieves all wafregional.SqlInjectionMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalSqlInjectionMatchSetWithName(name string) (*wafregional.SqlInjectionMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.SqlInjectionMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.SqlInjectionMatchSet not found", name)
}

// GetAllWAFRegionalWebACLResources retrieves all wafregional.WebACL items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalWebACLResources() map[string]*wafregional.WebACL[any] {
	results := map[string]*wafregional.WebACL[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.WebACL[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalWebACLWithName retrieves all wafregional.WebACL items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalWebACLWithName(name string) (*wafregional.WebACL[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.WebACL[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.WebACL not found", name)
}

// GetAllWAFRegionalWebACLAssociationResources retrieves all wafregional.WebACLAssociation items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalWebACLAssociationResources() map[string]*wafregional.WebACLAssociation[any] {
	results := map[string]*wafregional.WebACLAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.WebACLAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalWebACLAssociationWithName retrieves all wafregional.WebACLAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalWebACLAssociationWithName(name string) (*wafregional.WebACLAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.WebACLAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.WebACLAssociation not found", name)
}

// GetAllWAFRegionalXssMatchSetResources retrieves all wafregional.XssMatchSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFRegionalXssMatchSetResources() map[string]*wafregional.XssMatchSet[any] {
	results := map[string]*wafregional.XssMatchSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafregional.XssMatchSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFRegionalXssMatchSetWithName retrieves all wafregional.XssMatchSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFRegionalXssMatchSetWithName(name string) (*wafregional.XssMatchSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafregional.XssMatchSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafregional.XssMatchSet not found", name)
}

// GetAllWAFv2IPSetResources retrieves all wafv2.IPSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFv2IPSetResources() map[string]*wafv2.IPSet[any] {
	results := map[string]*wafv2.IPSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafv2.IPSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFv2IPSetWithName retrieves all wafv2.IPSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFv2IPSetWithName(name string) (*wafv2.IPSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafv2.IPSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafv2.IPSet not found", name)
}

// GetAllWAFv2LoggingConfigurationResources retrieves all wafv2.LoggingConfiguration items from an AWS CloudFormation template
func (t *Template) GetAllWAFv2LoggingConfigurationResources() map[string]*wafv2.LoggingConfiguration[any] {
	results := map[string]*wafv2.LoggingConfiguration[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafv2.LoggingConfiguration[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFv2LoggingConfigurationWithName retrieves all wafv2.LoggingConfiguration items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFv2LoggingConfigurationWithName(name string) (*wafv2.LoggingConfiguration[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafv2.LoggingConfiguration[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafv2.LoggingConfiguration not found", name)
}

// GetAllWAFv2RegexPatternSetResources retrieves all wafv2.RegexPatternSet items from an AWS CloudFormation template
func (t *Template) GetAllWAFv2RegexPatternSetResources() map[string]*wafv2.RegexPatternSet[any] {
	results := map[string]*wafv2.RegexPatternSet[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafv2.RegexPatternSet[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFv2RegexPatternSetWithName retrieves all wafv2.RegexPatternSet items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFv2RegexPatternSetWithName(name string) (*wafv2.RegexPatternSet[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafv2.RegexPatternSet[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafv2.RegexPatternSet not found", name)
}

// GetAllWAFv2RuleGroupResources retrieves all wafv2.RuleGroup items from an AWS CloudFormation template
func (t *Template) GetAllWAFv2RuleGroupResources() map[string]*wafv2.RuleGroup[any] {
	results := map[string]*wafv2.RuleGroup[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafv2.RuleGroup[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFv2RuleGroupWithName retrieves all wafv2.RuleGroup items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFv2RuleGroupWithName(name string) (*wafv2.RuleGroup[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafv2.RuleGroup[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafv2.RuleGroup not found", name)
}

// GetAllWAFv2WebACLResources retrieves all wafv2.WebACL items from an AWS CloudFormation template
func (t *Template) GetAllWAFv2WebACLResources() map[string]*wafv2.WebACL[any] {
	results := map[string]*wafv2.WebACL[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafv2.WebACL[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFv2WebACLWithName retrieves all wafv2.WebACL items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFv2WebACLWithName(name string) (*wafv2.WebACL[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafv2.WebACL[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafv2.WebACL not found", name)
}

// GetAllWAFv2WebACLAssociationResources retrieves all wafv2.WebACLAssociation items from an AWS CloudFormation template
func (t *Template) GetAllWAFv2WebACLAssociationResources() map[string]*wafv2.WebACLAssociation[any] {
	results := map[string]*wafv2.WebACLAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wafv2.WebACLAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWAFv2WebACLAssociationWithName retrieves all wafv2.WebACLAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWAFv2WebACLAssociationWithName(name string) (*wafv2.WebACLAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wafv2.WebACLAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wafv2.WebACLAssociation not found", name)
}

// GetAllWisdomAssistantResources retrieves all wisdom.Assistant items from an AWS CloudFormation template
func (t *Template) GetAllWisdomAssistantResources() map[string]*wisdom.Assistant[any] {
	results := map[string]*wisdom.Assistant[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wisdom.Assistant[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWisdomAssistantWithName retrieves all wisdom.Assistant items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWisdomAssistantWithName(name string) (*wisdom.Assistant[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wisdom.Assistant[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wisdom.Assistant not found", name)
}

// GetAllWisdomAssistantAssociationResources retrieves all wisdom.AssistantAssociation items from an AWS CloudFormation template
func (t *Template) GetAllWisdomAssistantAssociationResources() map[string]*wisdom.AssistantAssociation[any] {
	results := map[string]*wisdom.AssistantAssociation[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wisdom.AssistantAssociation[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWisdomAssistantAssociationWithName retrieves all wisdom.AssistantAssociation items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWisdomAssistantAssociationWithName(name string) (*wisdom.AssistantAssociation[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wisdom.AssistantAssociation[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wisdom.AssistantAssociation not found", name)
}

// GetAllWisdomKnowledgeBaseResources retrieves all wisdom.KnowledgeBase items from an AWS CloudFormation template
func (t *Template) GetAllWisdomKnowledgeBaseResources() map[string]*wisdom.KnowledgeBase[any] {
	results := map[string]*wisdom.KnowledgeBase[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *wisdom.KnowledgeBase[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWisdomKnowledgeBaseWithName retrieves all wisdom.KnowledgeBase items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWisdomKnowledgeBaseWithName(name string) (*wisdom.KnowledgeBase[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *wisdom.KnowledgeBase[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type wisdom.KnowledgeBase not found", name)
}

// GetAllWorkSpacesConnectionAliasResources retrieves all workspaces.ConnectionAlias items from an AWS CloudFormation template
func (t *Template) GetAllWorkSpacesConnectionAliasResources() map[string]*workspaces.ConnectionAlias[any] {
	results := map[string]*workspaces.ConnectionAlias[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *workspaces.ConnectionAlias[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWorkSpacesConnectionAliasWithName retrieves all workspaces.ConnectionAlias items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWorkSpacesConnectionAliasWithName(name string) (*workspaces.ConnectionAlias[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *workspaces.ConnectionAlias[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type workspaces.ConnectionAlias not found", name)
}

// GetAllWorkSpacesWorkspaceResources retrieves all workspaces.Workspace items from an AWS CloudFormation template
func (t *Template) GetAllWorkSpacesWorkspaceResources() map[string]*workspaces.Workspace[any] {
	results := map[string]*workspaces.Workspace[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *workspaces.Workspace[any]:
			results[name] = resource
		}
	}
	return results
}

// GetWorkSpacesWorkspaceWithName retrieves all workspaces.Workspace items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetWorkSpacesWorkspaceWithName(name string) (*workspaces.Workspace[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *workspaces.Workspace[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type workspaces.Workspace not found", name)
}

// GetAllXRayGroupResources retrieves all xray.Group items from an AWS CloudFormation template
func (t *Template) GetAllXRayGroupResources() map[string]*xray.Group[any] {
	results := map[string]*xray.Group[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *xray.Group[any]:
			results[name] = resource
		}
	}
	return results
}

// GetXRayGroupWithName retrieves all xray.Group items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetXRayGroupWithName(name string) (*xray.Group[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *xray.Group[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type xray.Group not found", name)
}

// GetAllXRayResourcePolicyResources retrieves all xray.ResourcePolicy items from an AWS CloudFormation template
func (t *Template) GetAllXRayResourcePolicyResources() map[string]*xray.ResourcePolicy[any] {
	results := map[string]*xray.ResourcePolicy[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *xray.ResourcePolicy[any]:
			results[name] = resource
		}
	}
	return results
}

// GetXRayResourcePolicyWithName retrieves all xray.ResourcePolicy items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetXRayResourcePolicyWithName(name string) (*xray.ResourcePolicy[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *xray.ResourcePolicy[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type xray.ResourcePolicy not found", name)
}

// GetAllXRaySamplingRuleResources retrieves all xray.SamplingRule items from an AWS CloudFormation template
func (t *Template) GetAllXRaySamplingRuleResources() map[string]*xray.SamplingRule[any] {
	results := map[string]*xray.SamplingRule[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *xray.SamplingRule[any]:
			results[name] = resource
		}
	}
	return results
}

// GetXRaySamplingRuleWithName retrieves all xray.SamplingRule items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetXRaySamplingRuleWithName(name string) (*xray.SamplingRule[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *xray.SamplingRule[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type xray.SamplingRule not found", name)
}

// GetAllASKSkillResources retrieves all ask.Skill items from an AWS CloudFormation template
func (t *Template) GetAllASKSkillResources() map[string]*ask.Skill[any] {
	results := map[string]*ask.Skill[any]{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case *ask.Skill[any]:
			results[name] = resource
		}
	}
	return results
}

// GetASKSkillWithName retrieves all ask.Skill items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) GetASKSkillWithName(name string) (*ask.Skill[any], error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case *ask.Skill[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource %q of type ask.Skill not found", name)
}

// GetServerlessGlobalApi retrieves the template's Globals.Api items from an AWS SAM template.
// Returns an error if not found.
func (t *Template) GetServerlessGlobalApi() (*global.Api[any], error) {
	globals := t.Globals
	if globals == nil {
		return nil, fmt.Errorf("globals not found")
	}
	if untyped, ok := globals["Api"]; ok {
		switch resource := untyped.(type) {
		case *global.Api[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource of type global.Api not found")
}

// GetServerlessGlobalFunction retrieves the template's Globals.Function items from an AWS SAM template.
// Returns an error if not found.
func (t *Template) GetServerlessGlobalFunction() (*global.Function[any], error) {
	globals := t.Globals
	if globals == nil {
		return nil, fmt.Errorf("globals not found")
	}
	if untyped, ok := globals["Function"]; ok {
		switch resource := untyped.(type) {
		case *global.Function[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource of type global.Function not found")
}

// GetServerlessGlobalHttpApi retrieves the template's Globals.HttpApi items from an AWS SAM template.
// Returns an error if not found.
func (t *Template) GetServerlessGlobalHttpApi() (*global.HttpApi[any], error) {
	globals := t.Globals
	if globals == nil {
		return nil, fmt.Errorf("globals not found")
	}
	if untyped, ok := globals["HttpApi"]; ok {
		switch resource := untyped.(type) {
		case *global.HttpApi[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource of type global.HttpApi not found")
}

// GetServerlessGlobalSimpleTable retrieves the template's Globals.SimpleTable items from an AWS SAM template.
// Returns an error if not found.
func (t *Template) GetServerlessGlobalSimpleTable() (*global.SimpleTable[any], error) {
	globals := t.Globals
	if globals == nil {
		return nil, fmt.Errorf("globals not found")
	}
	if untyped, ok := globals["SimpleTable"]; ok {
		switch resource := untyped.(type) {
		case *global.SimpleTable[any]:
			return resource, nil
		}
	}
	return nil, fmt.Errorf("resource of type global.SimpleTable not found")
}
